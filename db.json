{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1548348052000},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1548348052000},{"_id":"themes/indigo/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1548348052000},{"_id":"themes/indigo/_config.yml","hash":"c23a28d86c0861db58af3c8e5b1b4a3f40e92ae1","modified":1550801832559},{"_id":"themes/indigo/package-lock.json","hash":"b695b548be4f3abde654fad54d8aef1e4aa39e04","modified":1550480277261},{"_id":"themes/indigo/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1550483913628},{"_id":"source/_posts/JAVA-8的新特性-1.md","hash":"fff3578e08f8c66ec565c9b2aa0d041f15ab36fb","modified":1550829718869},{"_id":"source/_posts/JAVA-笔记.md","hash":"31463c11b8a83890b9f649a9392857a7cc4d199f","modified":1550741999699},{"_id":"source/_posts/Java-动态代理为啥需要接口？？？.md","hash":"4bde583d371678c45e653d8109068f515b4e7d93","modified":1552614289855},{"_id":"source/_posts/Java-集合.md","hash":"45d6880d8496bfa2a56aa153238c1f90a98aac1d","modified":1552615064118},{"_id":"source/_posts/Linux下项目自动部署脚本.md","hash":"588756e82b1aac79bd04077e442903195e8425b6","modified":1550571639804},{"_id":"source/_posts/ModelAttribute-对象没有无参的构造函数出错详解-1.md","hash":"65748e52d5fbea993c7355c610c9bc02c88d18a7","modified":1550481558525},{"_id":"source/_posts/cookie-和-session-的区别.md","hash":"3cefa070f542e4775fc65ebdf51b88df80fd1329","modified":1551152959250},{"_id":"source/_posts/get-请求中文乱码问题.md","hash":"ef4c929356ae874836750d91e63f356ff4800bf3","modified":1550800286670},{"_id":"source/_posts/gitLab-搭建.md","hash":"3b2b1957dd4d4e4bf54497e4a463421ee1b6b109","modified":1550803865582},{"_id":"source/_posts/java-反射笔记.md","hash":"780f5d2877b600836135db314df46ba82732408a","modified":1550829625808},{"_id":"source/_posts/js实现粘贴板功能.md","hash":"5364c53a7377fbfc54bfa0389d4e9e3e89c61aa6","modified":1550803077956},{"_id":"source/_posts/jvm-面试问题总结-一.md","hash":"07ec30352326dccb86fa9ab9263c599a40994287","modified":1552614600039},{"_id":"source/_posts/markdown的使用笔记.md","hash":"729a345184201e5360f8058e792b02e4ab15eb2b","modified":1551152620456},{"_id":"source/_posts/shiro-笔记（一）.md","hash":"455f3239caae0f011f4a44ecfa88bc73304e6e66","modified":1552614152974},{"_id":"source/_posts/spring boot 学习笔记.md","hash":"86dcff09cae7e467db6e49d8257906c894719cec","modified":1550481022276},{"_id":"source/_posts/spring-bean的作用域.md","hash":"d3903b85ed5d880fee5c14cf4937b2bd2cc07335","modified":1552614748490},{"_id":"source/_posts/spring-boot-如何创建和使用freemaker自定义标签.md","hash":"8b48fe9504241ef4ce3ee8a5c0736accc214a411","modified":1550570985506},{"_id":"source/_posts/spring-mvc-RequestBody-和-RequestParam-比较.md","hash":"ed90a585703a8317fdeed615565fd5a9e540523e","modified":1550571024753},{"_id":"source/_posts/了解Java中的代理.md","hash":"bacdf03affcb569f898bb37d800fb8e875a04e0c","modified":1552614491030},{"_id":"source/_posts/使用iframe遇到的问题.md","hash":"d00a3ac3f71751207d96d81cde9092861fe8765b","modified":1552615110887},{"_id":"source/_posts/关于Volatile的那点事.md","hash":"9ce7a50d074d3e9bb75bdbe918f23758716208cd","modified":1552614904985},{"_id":"source/_posts/关于executeUpdate方法返回的值问题.md","hash":"b670a7cbfbcf78644ebd42567f67468be1dde27a","modified":1552614664769},{"_id":"source/_posts/双通道存储器技术.md","hash":"b8851066456cbfc1363d71f8e462e82192468424","modified":1551152754650},{"_id":"source/_posts/如何使用flatMap.md","hash":"e42bf87f235aebbbebb7ebd68b1986a2ec352dac","modified":1552614806070},{"_id":"source/_posts/理解-linux-cpu-负载.md","hash":"e7bb970654f60110b241705df69fd3cc33580504","modified":1552614942287},{"_id":"source/archives/index.md","hash":"cc7206912be4872693bcb723649359959dc598c9","modified":1550742187748},{"_id":"source/tags/index.md","hash":"d3d74175ebc982f6e1d71948546ce1cc18029eb1","modified":1550741867833},{"_id":"themes/indigo/.git/FETCH_HEAD","hash":"65dc54bfda881754ac3abf8264870c0e7b0c0e16","modified":1550478895229},{"_id":"themes/indigo/.git/HEAD","hash":"56972de0006084f47d1438c2f2de39d7c3f0c186","modified":1550482508356},{"_id":"themes/indigo/.git/ORIG_HEAD","hash":"484dfa35ff9eb7a589991d8ca81ef961cd2a4ea6","modified":1550478895360},{"_id":"themes/indigo/.git/config","hash":"a15105d7ceffae664ad108699dcf7e7c4b2f0adb","modified":1540036370922},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1540036362939},{"_id":"themes/indigo/.git/index","hash":"75123f7d6fc0bc4aedb159a91f83c431087911a1","modified":1550483914327},{"_id":"themes/indigo/.git/packed-refs","hash":"aa83d511a879b7d9cecfc8c4ec8e73e9b737ed42","modified":1540036370905},{"_id":"themes/indigo/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1548348052000},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1548348052000},{"_id":"themes/indigo/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1548348052000},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1548348052000},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1548348052000},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1548348052000},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1548348052000},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1548348052000},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1548348052000},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1548348052000},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1548348052000},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1548348052000},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1548348052000},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1548348052000},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1548348052000},{"_id":"themes/indigo/node_modules/extsprintf/.gitmodules","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1416529720000},{"_id":"themes/indigo/node_modules/mime/.npmignore","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511569060000},{"_id":"source/_posts/JAVA-8的新特性-1/1550828240.jpg","hash":"12e9302c8111196359e1c12a0a6bca16d4d4b964","modified":1550828240678},{"_id":"source/_posts/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105954917.png","hash":"fe2345c1f9c9e15dff77f252e368b3af8894c666","modified":1550481405359},{"_id":"source/_posts/gitLab-搭建/1550803434.jpg","hash":"3041441c7226d4517978a35fee37dd8fe74b12b2","modified":1550803434681},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1540036362940},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1540036362941},{"_id":"themes/indigo/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1540036362945},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1540036362946},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1540036362947},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1540036362948},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1540036362948},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1540036362949},{"_id":"themes/indigo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1540036362950},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1540036362951},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1540036362951},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1540036362953},{"_id":"themes/indigo/.git/logs/HEAD","hash":"3629745d4807383d5e27d61c2e86e16ffb3bbd45","modified":1550482508356},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"31052bc524a10abd6871aed2415448ce585faff2","modified":1550483913627},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1548348052000},{"_id":"themes/indigo/node_modules/.bin/errno","hash":"350800cfc349e5c9d3757743540a07cbe31ddb0b","modified":1550480277023},{"_id":"themes/indigo/node_modules/.bin/errno.cmd","hash":"4e29ad3040e91240e72d414faef98e8195dadd98","modified":1550480277023},{"_id":"themes/indigo/node_modules/.bin/image-size","hash":"9d29f413dee7042eaca23f1cbffb11279ddbc6a6","modified":1550480276986},{"_id":"themes/indigo/node_modules/.bin/image-size.cmd","hash":"f7dede9c6e44c2aae40201bafcb3344d7d143272","modified":1550480276985},{"_id":"themes/indigo/node_modules/.bin/lessc","hash":"049fdefd171e86496c559703adae316601c42c5d","modified":1550480277066},{"_id":"themes/indigo/node_modules/.bin/lessc.cmd","hash":"78e594be9d436b21275dc13a0c9f0728da9af241","modified":1550480277066},{"_id":"themes/indigo/node_modules/.bin/mime","hash":"a55dada748b677f9338527e826b5aca71fea71f9","modified":1550480277001},{"_id":"themes/indigo/node_modules/.bin/mime.cmd","hash":"91d57795f0aa22a7a850dbcbb8d6ec6823706984","modified":1550480277001},{"_id":"themes/indigo/node_modules/.bin/mkdirp","hash":"b78b5824403f4fe66ee948a22275aaba4b573983","modified":1550480277012},{"_id":"themes/indigo/node_modules/.bin/mkdirp.cmd","hash":"85e369955d5dc6893b8968ab90e19532eb3fa29b","modified":1550480277012},{"_id":"themes/indigo/node_modules/.bin/sshpk-conv","hash":"3b8176e56ed6f5a2abb54195c63aea45605fbfbf","modified":1550480277036},{"_id":"themes/indigo/node_modules/.bin/sshpk-conv.cmd","hash":"5da21d8b7b8e4a3b3babe315866fcada57ebbdae","modified":1550480277036},{"_id":"themes/indigo/node_modules/.bin/sshpk-sign","hash":"435da6138ae165297081dfaabd8c3ff8dafff31e","modified":1550480277035},{"_id":"themes/indigo/node_modules/.bin/sshpk-sign.cmd","hash":"b521dd349c9e1ece9f54631a4338edc8c46fa1f8","modified":1550480277035},{"_id":"themes/indigo/node_modules/.bin/sshpk-verify","hash":"3f826781a6134a23971195ceaaec353a5cf0265f","modified":1550480277035},{"_id":"themes/indigo/node_modules/.bin/sshpk-verify.cmd","hash":"6971b6b54b503f1a5f908017170531b767313231","modified":1550480277035},{"_id":"themes/indigo/node_modules/.bin/uuid","hash":"51ddca7ee096ab8947a88242fe69fcecdcb9a86f","modified":1550480277057},{"_id":"themes/indigo/node_modules/.bin/uuid.cmd","hash":"9c954e424d955df6392a2cc91260046de221e897","modified":1550480277056},{"_id":"themes/indigo/node_modules/ajv/LICENSE","hash":"ea828f38ab0e82ec6d2272e46d794d7c3d55c9c9","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/.tonic_example.js","hash":"4234fa9e49ee50602f9877e95bf46cdfaf4f618f","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/package.json","hash":"58dcde16ef6ee44e918f71caf1227d4054938fb6","modified":1550480276795},{"_id":"themes/indigo/node_modules/asap/CHANGES.md","hash":"81428158366f7e993e1c2188eb0f3e0e8fba2657","modified":1499700076000},{"_id":"themes/indigo/node_modules/asap/LICENSE.md","hash":"b9e748ee0b7d1cbadaf9f1fa8997b092ebeb9db7","modified":1451874428000},{"_id":"themes/indigo/node_modules/asap/README.md","hash":"538d5e8ff175447bc0506b06c6ee25bf48e980b2","modified":1451874428000},{"_id":"themes/indigo/node_modules/asap/asap.js","hash":"dfb4ab3ad5524d143221515950159eee5c0fd0db","modified":1451874428000},{"_id":"themes/indigo/node_modules/asap/browser-asap.js","hash":"8dba5a29c0d3479897084d0843de36805382be48","modified":1451874558000},{"_id":"themes/indigo/node_modules/asap/browser-raw.js","hash":"bc8104273b725150c81a2869d657dca110c30ce5","modified":1474844473000},{"_id":"themes/indigo/node_modules/asap/package.json","hash":"f4d0334bd84fdbbedb1e4392785f1a4824e12206","modified":1550480274797},{"_id":"themes/indigo/node_modules/asap/raw.js","hash":"5dd00f087a2cb50f5bcf6bde80f144e3444c6b26","modified":1451874428000},{"_id":"themes/indigo/node_modules/asn1/LICENSE","hash":"724e48cfc739674999ff82b4e49d76d5376818e9","modified":1518292051000},{"_id":"themes/indigo/node_modules/asn1/README.md","hash":"ec42f7168854358d5e3611b20c1bad0ac55954b8","modified":1532988025000},{"_id":"themes/indigo/node_modules/asn1/package.json","hash":"0738d8e9fc07ed500474e9aae461818bf98e8dae","modified":1550480276038},{"_id":"themes/indigo/node_modules/assert-plus/AUTHORS","hash":"d1d14de8fc8c21f9f86c2231df2531381f6a9194","modified":1453918488000},{"_id":"themes/indigo/node_modules/assert-plus/CHANGES.md","hash":"b27cef2253f8ff8a83584bf1a55cec9d4dfbf517","modified":1453920717000},{"_id":"themes/indigo/node_modules/assert-plus/README.md","hash":"d6771de291034391f0ec79175fff3428ed6d82b8","modified":1453920717000},{"_id":"themes/indigo/node_modules/assert-plus/assert.js","hash":"8103ced007b61b3e45a420607de576faf7e1e0e4","modified":1453920717000},{"_id":"themes/indigo/node_modules/assert-plus/package.json","hash":"fe6fe5cd840579309e522e0173500307ff881836","modified":1550480274797},{"_id":"themes/indigo/node_modules/asynckit/LICENSE","hash":"9171131798797e013e6c922921540694b1e3542d","modified":1463552412000},{"_id":"themes/indigo/node_modules/asynckit/README.md","hash":"030a12b4b2a9151538e9491d3a4f23dfe9848f32","modified":1465928899000},{"_id":"themes/indigo/node_modules/asynckit/bench.js","hash":"8dacd95640ad3d0ae47aebf5bd1ba4d83f6a1f1d","modified":1463686174000},{"_id":"themes/indigo/node_modules/asynckit/index.js","hash":"9201eacd2650642ff12a8af5fd1dbf7dc7848bee","modified":1463795005000},{"_id":"themes/indigo/node_modules/asynckit/package.json","hash":"90b7d76a859ff12405056fd30f864bdeee50027a","modified":1550480274797},{"_id":"themes/indigo/node_modules/asynckit/parallel.js","hash":"ecead062825e6790ce70c1879c745808c8ce7528","modified":1465665593000},{"_id":"themes/indigo/node_modules/asynckit/serial.js","hash":"9af5e746a0a9f8ba24926bc2fbb9786cf13f081b","modified":1465665583000},{"_id":"themes/indigo/node_modules/asynckit/serialOrdered.js","hash":"26f4cadf2685ee07af06e82803171847f74b9fb3","modified":1465665610000},{"_id":"themes/indigo/node_modules/asynckit/stream.js","hash":"c8bde32c80d2f3ecb33462a0aed86851c4c7e9e6","modified":1465859636000},{"_id":"themes/indigo/node_modules/aws-sign2/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1492024121000},{"_id":"themes/indigo/node_modules/aws-sign2/README.md","hash":"5e8e0e7c811b1f319c0e94ff08f38ecf4896e3c9","modified":1492024121000},{"_id":"themes/indigo/node_modules/aws-sign2/index.js","hash":"fb21f9e87275ef41a4901fa4bf0680d1bf0f0605","modified":1492024121000},{"_id":"themes/indigo/node_modules/aws-sign2/package.json","hash":"2a264c94ae231f013b79bcffb14243943a6ec3a2","modified":1550480274911},{"_id":"themes/indigo/node_modules/aws4/.travis.yml","hash":"73c40717fe695caf839f2bc871320837b3c2abae","modified":499162500000},{"_id":"themes/indigo/node_modules/aws4/LICENSE","hash":"9ba903f14c37d0ab0250a8e6920e7269bdc5b294","modified":499162500000},{"_id":"themes/indigo/node_modules/aws4/README.md","hash":"8c7e5705921c53e38919481a09ad2d545422648c","modified":499162500000},{"_id":"themes/indigo/node_modules/aws4/aws4.js","hash":"e7b745e9f188988e700fed38869710b1ea442b9b","modified":499162500000},{"_id":"themes/indigo/node_modules/aws4/lru.js","hash":"015965230b90e69906f66fca1792c4557336336f","modified":499162500000},{"_id":"themes/indigo/node_modules/aws4/package.json","hash":"bf3ed07f8b6586604b3ca21298c326ff8a523c65","modified":1550480274911},{"_id":"themes/indigo/node_modules/bcrypt-pbkdf/CONTRIBUTING.md","hash":"24ea74be3d4501f6e46a96dd11fed6c1c36d6c56","modified":1530232429000},{"_id":"themes/indigo/node_modules/bcrypt-pbkdf/LICENSE","hash":"fce141a52014eee7adc6585514d55c6330db0307","modified":1530232429000},{"_id":"themes/indigo/node_modules/bcrypt-pbkdf/README.md","hash":"1c4e671f5ead73535ed536bb37f81a70d43bef58","modified":1530232429000},{"_id":"themes/indigo/node_modules/bcrypt-pbkdf/index.js","hash":"4be9d75ea7a7a9c91fe8436f52ebd113fdc674f3","modified":1530232429000},{"_id":"themes/indigo/node_modules/bcrypt-pbkdf/package.json","hash":"da13c16b12786f724acb889c55b73da034b5e390","modified":1550480276221},{"_id":"themes/indigo/node_modules/caseless/LICENSE","hash":"48f9e0a4c07f36c07d47962212fe022d0417c90f","modified":1435268329000},{"_id":"themes/indigo/node_modules/caseless/README.md","hash":"5770b9496fb480f7c403b6c38759a27d6170e882","modified":1414608769000},{"_id":"themes/indigo/node_modules/caseless/index.js","hash":"49a6a654b1bdc4e119895edc96a1ee4bb519a38c","modified":1485466642000},{"_id":"themes/indigo/node_modules/caseless/package.json","hash":"2c8c7ac0eaaa15841224feba7b53cfd06a2ed5c5","modified":1550480275054},{"_id":"themes/indigo/node_modules/caseless/test.js","hash":"9cbbc1b43bd3b86518885b2c82f0d8c302e68ed9","modified":1485466642000},{"_id":"themes/indigo/node_modules/clone/.npmignore","hash":"6e378aaee6959933e8f4dffa0899b31607798496","modified":1510175670000},{"_id":"themes/indigo/node_modules/clone/LICENSE","hash":"ab8d07f122b88e61e3c3596d78fe4a41ee3c2e13","modified":1421231867000},{"_id":"themes/indigo/node_modules/clone/README.md","hash":"3dd3ab245f987c50112ac2347b6b03065daf0ac7","modified":1521666384000},{"_id":"themes/indigo/node_modules/clone/clone.iml","hash":"422985d148426181991ebc43708f79c1cfd82d61","modified":1452084020000},{"_id":"themes/indigo/node_modules/clone/clone.js","hash":"828ca873659e75b4db604727881cfb4d95b7c273","modified":1521666053000},{"_id":"themes/indigo/node_modules/clone/package.json","hash":"3d31cd12643e219411c97f5e92f58da1cfb343ac","modified":1550480274961},{"_id":"themes/indigo/node_modules/combined-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1518224813000},{"_id":"themes/indigo/node_modules/combined-stream/Readme.md","hash":"0e4384a6edea7b3a580ffa5b32236b7f8b251834","modified":1518224813000},{"_id":"themes/indigo/node_modules/combined-stream/package.json","hash":"4fc147f523fbf39a80b47d270a6f30fea2fd1734","modified":1550480275139},{"_id":"themes/indigo/node_modules/core-util-is/LICENSE","hash":"a95471326a84657b0e164f84e1285685f63011e0","modified":1447979068000},{"_id":"themes/indigo/node_modules/core-util-is/README.md","hash":"d4987293f1078d937454a14a5ca6f386d227679d","modified":1447978999000},{"_id":"themes/indigo/node_modules/core-util-is/float.patch","hash":"d7f073ceb05c6f6dd1bb852fc00f5379a3e41301","modified":1447978999000},{"_id":"themes/indigo/node_modules/core-util-is/package.json","hash":"a508ec250a40c255fd10b730a0c44a594c08373e","modified":1550480275017},{"_id":"themes/indigo/node_modules/core-util-is/test.js","hash":"2837ee1d57f385943ba5ccc7fd0ec4ed1cb8cfdd","modified":1447979358000},{"_id":"themes/indigo/node_modules/dashdash/CHANGES.md","hash":"d4c1434f92782308105f24a11c0bdb076127be5e","modified":1479854012000},{"_id":"themes/indigo/node_modules/dashdash/LICENSE.txt","hash":"427497f949741f3f7e72ea1e62749908e9c4f5b9","modified":1451581401000},{"_id":"themes/indigo/node_modules/dashdash/README.md","hash":"e40739349732594d5d96438bd27aa444915d3f79","modified":1453144686000},{"_id":"themes/indigo/node_modules/dashdash/package.json","hash":"df59fe5da3faa5a5a015a506ac2bec3d1a40c345","modified":1550480275095},{"_id":"themes/indigo/node_modules/delayed-stream/.npmignore","hash":"4e1243bd22c66e76c2ba9eddc1f91394e57f9f83","modified":1430430799000},{"_id":"themes/indigo/node_modules/delayed-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1430160212000},{"_id":"themes/indigo/node_modules/delayed-stream/Makefile","hash":"1d88cf18c0fef56e91425a086590e31271a7c4d5","modified":1430160212000},{"_id":"themes/indigo/node_modules/delayed-stream/Readme.md","hash":"21db9b7ec97b7028a031a18867aab00575b09850","modified":1430160212000},{"_id":"themes/indigo/node_modules/delayed-stream/package.json","hash":"49a4e45362cdd664c1708f37c34e944d6600d415","modified":1550480275115},{"_id":"themes/indigo/node_modules/ecc-jsbn/LICENSE","hash":"d9dddd103d636dbaa178cd222de612fd923f62da","modified":1532879415000},{"_id":"themes/indigo/node_modules/ecc-jsbn/README.md","hash":"97cb1bdec48ebb5e46e64fc5441c79d3d38a3c82","modified":1532879415000},{"_id":"themes/indigo/node_modules/ecc-jsbn/index.js","hash":"242eff19118d5cd84c53679acc7395dee6bfb1df","modified":1532879415000},{"_id":"themes/indigo/node_modules/ecc-jsbn/package.json","hash":"4ae7eedea9dc065296da0a2b5514cb6162beaa60","modified":1550480276221},{"_id":"themes/indigo/node_modules/ecc-jsbn/test.js","hash":"9709f584f556ceb8acaa0fd746029dcb58390eb4","modified":1532879415000},{"_id":"themes/indigo/node_modules/errno/.jshintrc","hash":"61590c8e7282c327fe7f2987a3c5a7514446561d","modified":1512507283000},{"_id":"themes/indigo/node_modules/errno/.travis.yml","hash":"bd4c321263e32947f9dd93477d3962045562a70b","modified":1512682640000},{"_id":"themes/indigo/node_modules/errno/README.md","hash":"cc5d1391f4c7ac0f42fecde6b9160a69cfe05755","modified":1512918283000},{"_id":"themes/indigo/node_modules/errno/build.js","hash":"ecd066eabb8fed1ad687178f6bcad2d3f0d6bcd9","modified":1512508062000},{"_id":"themes/indigo/node_modules/errno/cli.js","hash":"cfccf7094427ecbf8322fe52043257c5294715ca","modified":1550480277025},{"_id":"themes/indigo/node_modules/errno/custom.js","hash":"4d12b6eb73549d745efef39d6b2bed25a498831d","modified":1518663311000},{"_id":"themes/indigo/node_modules/errno/errno.js","hash":"c94b102208b31299ad76dbb27424173188a03e63","modified":1512682056000},{"_id":"themes/indigo/node_modules/errno/package.json","hash":"8df30544ba46f4d54cdcf1aff3c3b79214942d65","modified":1550480276326},{"_id":"themes/indigo/node_modules/errno/test.js","hash":"7779f43d62904ac5ae9e286eb388a5c0c8a7dda9","modified":1518663338000},{"_id":"themes/indigo/node_modules/extend/.editorconfig","hash":"b613101963356bfaf6118fc55cf67bd5f5567303","modified":499162500000},{"_id":"themes/indigo/node_modules/extend/.eslintrc","hash":"495142299502da25082a07dc75ae9d0dfd8d19f6","modified":499162500000},{"_id":"themes/indigo/node_modules/extend/.jscs.json","hash":"88712fb751dde48f7326c45a25b87c593b144830","modified":499162500000},{"_id":"themes/indigo/node_modules/extend/.travis.yml","hash":"c3d28348f599bc838f7bbbff116ab3ea13d78bbe","modified":499162500000},{"_id":"themes/indigo/node_modules/extend/CHANGELOG.md","hash":"c82d9ea712d2098a397643f13b5580f8de49b503","modified":499162500000},{"_id":"themes/indigo/node_modules/extend/LICENSE","hash":"bed93ae1abcd71e5d1c9c363595dd24bb1b9016c","modified":499162500000},{"_id":"themes/indigo/node_modules/extend/README.md","hash":"25aa925ed3ef4f533976a45cece2cc8159993783","modified":499162500000},{"_id":"themes/indigo/node_modules/extend/component.json","hash":"07af5d609ee23647ce3238a0e1322c35b385fc45","modified":499162500000},{"_id":"themes/indigo/node_modules/extend/index.js","hash":"21ecd848815af34edd426bcdafa52bf13c02be59","modified":499162500000},{"_id":"themes/indigo/node_modules/extend/package.json","hash":"1a1f17731b13167bd61336403bf320ee52e32c77","modified":1550480276160},{"_id":"themes/indigo/node_modules/extsprintf/.npmignore","hash":"f6f25c76813204f78147a50d49d3b6a9a4282201","modified":1416529581000},{"_id":"themes/indigo/node_modules/extsprintf/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1416529581000},{"_id":"themes/indigo/node_modules/extsprintf/Makefile","hash":"49da84d8f9e1db5727d0a881ef0382e45f26492d","modified":1425686217000},{"_id":"themes/indigo/node_modules/extsprintf/Makefile.targ","hash":"f66e38899fc918aac830c478ae402c66d8793bc7","modified":1416529581000},{"_id":"themes/indigo/node_modules/extsprintf/README.md","hash":"4226a704e2766b5069bb6636555517ed866be6f1","modified":1425686198000},{"_id":"themes/indigo/node_modules/extsprintf/jsl.node.conf","hash":"7197578b829d6c93d8356bf114c7f3d26722ec0b","modified":1416529581000},{"_id":"themes/indigo/node_modules/extsprintf/package.json","hash":"330c75ae27cd188488415d84d9a091fca71ba748","modified":1550480275171},{"_id":"themes/indigo/node_modules/fast-deep-equal/LICENSE","hash":"44bdc0699c385cdf423dbadea7355ff72e5adc36","modified":1519590513000},{"_id":"themes/indigo/node_modules/fast-deep-equal/README.md","hash":"09192a92f5ef1b36a62dde12a520bc7529fe437e","modified":1524262875000},{"_id":"themes/indigo/node_modules/fast-deep-equal/index.d.ts","hash":"c2f05139dccaac36615727a10d7b0b31082a0e98","modified":1519591012000},{"_id":"themes/indigo/node_modules/fast-deep-equal/index.js","hash":"7544a59317225a41d7c3b02605e87459a251ea54","modified":1524909376000},{"_id":"themes/indigo/node_modules/fast-deep-equal/package.json","hash":"ba36b919afe527cf043b51059038010632207592","modified":1550480275528},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/.eslintrc.yml","hash":"e557873fb13e67775c12f025f7254f12547784bc","modified":1508841234000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/.npmignore","hash":"079203ff3bee95cc2b071f1e8b15fec2111f1930","modified":1508866028000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/.travis.yml","hash":"4c08200f6602d0fb52c7d3659131401a78f4e34a","modified":1508840229000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1508836326000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/README.md","hash":"994000bfa12b63fed32d4c13e91f158097d7f888","modified":1508866787000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/index.js","hash":"81aef05bcfffb0f8804dc9684dd6283f0024bd2d","modified":1508865839000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/package.json","hash":"06caca3fcbc1e0b387d0a48bce4044c5b924389b","modified":1550480275206},{"_id":"themes/indigo/node_modules/forever-agent/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1426938522000},{"_id":"themes/indigo/node_modules/forever-agent/README.md","hash":"fd2b1d08b55284aa2abc72d199e3c487744a0c31","modified":1426938522000},{"_id":"themes/indigo/node_modules/forever-agent/index.js","hash":"a96917d5912eef5a8ed12a4b1f3a41400eac80d1","modified":1428426146000},{"_id":"themes/indigo/node_modules/forever-agent/package.json","hash":"8b7fc1e681b655ef2c22240701caf75385a012e7","modified":1550480275281},{"_id":"themes/indigo/node_modules/form-data/License","hash":"1d11381521bdc7e7df9bb1d7bf85341ffca266d9","modified":1354688992000},{"_id":"themes/indigo/node_modules/form-data/README.md","hash":"d35f6dba2b67cbe947f229485fd7c15277d35225","modified":1539761181000},{"_id":"themes/indigo/node_modules/form-data/README.md.bak","hash":"91dbdbd25f0e985599bc346b478eacc1a4f05c51","modified":1518546191000},{"_id":"themes/indigo/node_modules/form-data/package.json","hash":"bed27dc87522e8e2277b7ef674dae5add50797a0","modified":1550480275705},{"_id":"themes/indigo/node_modules/getpass/.npmignore","hash":"013de6e5745b61fd07777e2bff18d3d44c11c0a1","modified":1461270348000},{"_id":"themes/indigo/node_modules/getpass/.travis.yml","hash":"4f7f46c996ede594c41fefbe08df3248206d895d","modified":1461270363000},{"_id":"themes/indigo/node_modules/getpass/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1493163595000},{"_id":"themes/indigo/node_modules/getpass/README.md","hash":"72706fc471e2713656e5dbc049a4c1a2c418b2e7","modified":1461275519000},{"_id":"themes/indigo/node_modules/getpass/package.json","hash":"107d9bc44d4168bb6c3315d81356fd6d8f1b4bc3","modified":1550480275261},{"_id":"themes/indigo/node_modules/graceful-fs/LICENSE","hash":"6560c016f1644ce652d83d039d8ba9e64795fd49","modified":499162500000},{"_id":"themes/indigo/node_modules/graceful-fs/README.md","hash":"649ce10ecea3a470be5c2d07ddeae45c7e7b3482","modified":499162500000},{"_id":"themes/indigo/node_modules/graceful-fs/clone.js","hash":"675f90846258fc892068a5ac038323dffec033d2","modified":499162500000},{"_id":"themes/indigo/node_modules/graceful-fs/graceful-fs.js","hash":"34f9473ad7e411c79361ba2af894cad952173b07","modified":499162500000},{"_id":"themes/indigo/node_modules/graceful-fs/legacy-streams.js","hash":"f4a3583d4c3e8b0c407ab8406bdafb02b4055b7f","modified":499162500000},{"_id":"themes/indigo/node_modules/graceful-fs/package.json","hash":"b7ae2b75a85857d13fc3b85128af73d5c2af5346","modified":1550480275227},{"_id":"themes/indigo/node_modules/graceful-fs/polyfills.js","hash":"f5aa6f1c7cbc705e4a55246377db6552c4f3a58a","modified":499162500000},{"_id":"themes/indigo/node_modules/har-schema/LICENSE","hash":"57fc502455231f1d10c4d2e67c261f0fc56bb17d","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/README.md","hash":"ade485d13a06d1d75c93216ed9276c86a9b4ace0","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/package.json","hash":"bb3e73649779a522c7f9d078cc5de5b4b10ad34b","modified":1550480275661},{"_id":"themes/indigo/node_modules/har-validator/LICENSE","hash":"181750ad60fd8b4c88ad0f978cc1cd21c9d701e6","modified":499162500000},{"_id":"themes/indigo/node_modules/har-validator/README.md","hash":"0e6a44779655556795fb65407114a493b8e27430","modified":499162500000},{"_id":"themes/indigo/node_modules/har-validator/package.json","hash":"f9fdb317177cac23cc8337fc55f63cf8cee8d65c","modified":1550480276770},{"_id":"themes/indigo/node_modules/hexo-renderer-less/LICENSE","hash":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":499162500000},{"_id":"themes/indigo/node_modules/hexo-renderer-less/README.md","hash":"4ed0dd0c636f7cb70f3acd7550fb226dc84dabd0","modified":499162500000},{"_id":"themes/indigo/node_modules/hexo-renderer-less/index.js","hash":"ff1b44b8017a8c24476869ae50ff94824c691a0c","modified":499162500000},{"_id":"themes/indigo/node_modules/hexo-renderer-less/package.json","hash":"a002dd495a41c775994968a6ec712dfd32a1cec6","modified":1550480276498},{"_id":"themes/indigo/node_modules/hexo-renderer-less/yarn.lock","hash":"c9bbccef3c382546508aafa32afe7701747ce999","modified":499162500000},{"_id":"themes/indigo/node_modules/http-signature/.dir-locals.el","hash":"bda1c75ba87348876340908be6799d6ac3a4b807","modified":1503623992000},{"_id":"themes/indigo/node_modules/http-signature/.npmignore","hash":"8992dfba5fdf2ba23c1da7e57021d6b1274f2456","modified":1503623992000},{"_id":"themes/indigo/node_modules/http-signature/CHANGES.md","hash":"59a2ab5cc1ac7f7691560038beb2349e628eeacc","modified":1503623992000},{"_id":"themes/indigo/node_modules/http-signature/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1503623992000},{"_id":"themes/indigo/node_modules/http-signature/README.md","hash":"5847fa2ec86a2ca744776acd5528fdfd6c3377fc","modified":1503623992000},{"_id":"themes/indigo/node_modules/http-signature/http_signing.md","hash":"945eb22661d1c43e547371ac8d354a4b761eab09","modified":1503623992000},{"_id":"themes/indigo/node_modules/http-signature/package.json","hash":"d866bf0aa3d8e71ce55ba9d9511c13e89616c8f4","modified":1550480276498},{"_id":"themes/indigo/node_modules/image-size/Readme.md","hash":"0c69d34c8e772242a995faca07c951b24032ef31","modified":1494844393000},{"_id":"themes/indigo/node_modules/image-size/LICENSE","hash":"c7366a8e9fb0c9563ec5f0a7f757cd9b0032e96a","modified":1494841670000},{"_id":"themes/indigo/node_modules/image-size/package.json","hash":"91583523218da1778ad2762b6f9ae62ba0727f0f","modified":1550480276244},{"_id":"themes/indigo/node_modules/is-typedarray/LICENSE.md","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1401649683000},{"_id":"themes/indigo/node_modules/is-typedarray/README.md","hash":"8f33b0dd445cfa2ab6712dee34df082f480a5a76","modified":1401649785000},{"_id":"themes/indigo/node_modules/is-typedarray/index.js","hash":"b7ff45ac41fdcb4bb75dd771d6cb9bfbd129e56d","modified":1431824601000},{"_id":"themes/indigo/node_modules/is-typedarray/package.json","hash":"8125aae88ecae68c0e72b9ba2fa6f78c65ee897d","modified":1550480275317},{"_id":"themes/indigo/node_modules/is-typedarray/test.js","hash":"c3aa563061f8d086aaf066b389b0e811444e3913","modified":1401649839000},{"_id":"themes/indigo/node_modules/isstream/.jshintrc","hash":"61590c8e7282c327fe7f2987a3c5a7514446561d","modified":1396828238000},{"_id":"themes/indigo/node_modules/isstream/.npmignore","hash":"ecb39380a39d86a6861344abf98891016990e2c5","modified":1396757852000},{"_id":"themes/indigo/node_modules/isstream/.travis.yml","hash":"890d1669abc18b7c0541df1483b9f27c60063712","modified":1396829306000},{"_id":"themes/indigo/node_modules/isstream/LICENSE.md","hash":"3fc5bd6825a9d8fd53c0cd8de0bd16d1c1a7f37a","modified":1425687271000},{"_id":"themes/indigo/node_modules/isstream/README.md","hash":"0563c8dd8178c335de8d882a14c0408ba179789b","modified":1425687291000},{"_id":"themes/indigo/node_modules/isstream/isstream.js","hash":"db3d8708d100bdb66fd33e1eeb6d2b232016934b","modified":1396827239000},{"_id":"themes/indigo/node_modules/isstream/package.json","hash":"fa019d876cce2240e2652de52c845bcd295f1b22","modified":1550480275394},{"_id":"themes/indigo/node_modules/isstream/test.js","hash":"3c3c171729a3738bd73b12d311265c7fcfb2a9fa","modified":1396831146000},{"_id":"themes/indigo/node_modules/jsbn/.npmignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1457730283000},{"_id":"themes/indigo/node_modules/jsbn/LICENSE","hash":"d9b1b910dfea689402ffdb75f5467ec263f8480d","modified":1486885358000},{"_id":"themes/indigo/node_modules/jsbn/README.md","hash":"6db673c03e15b4e75f95e25ba87177799511ad0c","modified":1486885358000},{"_id":"themes/indigo/node_modules/jsbn/example.html","hash":"ec1f94b093e0f1457642f8647294be35d4af033f","modified":1486885358000},{"_id":"themes/indigo/node_modules/jsbn/example.js","hash":"ba7f33b1196eca41a007177372fe237ac7a85c1b","modified":1486885358000},{"_id":"themes/indigo/node_modules/jsbn/index.js","hash":"0a4334c7b70f87e13dbd14b0938106ac0d6beebb","modified":1486886477000},{"_id":"themes/indigo/node_modules/jsbn/package.json","hash":"dd1797d1c7fde37293a658e28cab1383dff894f7","modified":1550480275359},{"_id":"themes/indigo/node_modules/json-schema/README.md","hash":"9065e9ab354ce910706716a42584222674fe1470","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema/draft-zyp-json-schema-03.xml","hash":"da15453583b019a448fae4b857fe29a583bc1a38","modified":1307480092000},{"_id":"themes/indigo/node_modules/json-schema/draft-zyp-json-schema-04.xml","hash":"02845f4b0406bffb06ff5cb01eca43f492db6901","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema/package.json","hash":"8d502136cd515c0b2f3b032e57db39904beae632","modified":1550480275439},{"_id":"themes/indigo/node_modules/json-schema-traverse/.eslintrc.yml","hash":"b80233178c09213e16f8daace837fb9581ec401b","modified":1525807808000},{"_id":"themes/indigo/node_modules/json-schema-traverse/.travis.yml","hash":"4c08200f6602d0fb52c7d3659131401a78f4e34a","modified":1525807808000},{"_id":"themes/indigo/node_modules/json-schema-traverse/LICENSE","hash":"44bdc0699c385cdf423dbadea7355ff72e5adc36","modified":1525807808000},{"_id":"themes/indigo/node_modules/json-schema-traverse/README.md","hash":"38e9ed06ec0ecba0058d1df291ff244be22cb7ac","modified":1525808085000},{"_id":"themes/indigo/node_modules/json-schema-traverse/index.js","hash":"8302f0123512ec818251c530c24bd493d0ab1744","modified":1528619807000},{"_id":"themes/indigo/node_modules/json-schema-traverse/package.json","hash":"7dcab13b92e7333ac6ddd32e16547994879dee5b","modified":1550480275483},{"_id":"themes/indigo/node_modules/json-stringify-safe/.npmignore","hash":"454bf1af6e2932c514862b67b108ef4ad00d7c1a","modified":1431999690000},{"_id":"themes/indigo/node_modules/json-stringify-safe/CHANGELOG.md","hash":"d9b3407ce2eef8d2dadc6b2839a8b16b783eef47","modified":1431999690000},{"_id":"themes/indigo/node_modules/json-stringify-safe/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999719000},{"_id":"themes/indigo/node_modules/json-stringify-safe/Makefile","hash":"589819e00a30573f50fa4a11ddb22fb45b372a65","modified":1431999690000},{"_id":"themes/indigo/node_modules/json-stringify-safe/README.md","hash":"a2972dd72d8ec7c8b1f229f7732f911ed721dbca","modified":1431999690000},{"_id":"themes/indigo/node_modules/json-stringify-safe/package.json","hash":"42902640cfe5d3b5b6e539a03cea1d0c1c688428","modified":1550480275617},{"_id":"themes/indigo/node_modules/json-stringify-safe/stringify.js","hash":"b36a3a8d0f794fae13dc8e1c93bd4a8cae311bf2","modified":1431999708000},{"_id":"themes/indigo/node_modules/jsprim/CHANGES.md","hash":"671e4e43c6ee6fc2d711052a7933ebd3cd29a46e","modified":1501690556000},{"_id":"themes/indigo/node_modules/jsprim/CONTRIBUTING.md","hash":"9147b55a7f13fa4e1db7fe3f83d4415be389ab8a","modified":1501690329000},{"_id":"themes/indigo/node_modules/jsprim/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1416249172000},{"_id":"themes/indigo/node_modules/jsprim/README.md","hash":"9274fef622af8e283f2f1d023a5b17fa2f7623c4","modified":1501690357000},{"_id":"themes/indigo/node_modules/jsprim/package.json","hash":"e87d2829284d306593bad3be8fefa6b7157416f3","modified":1550480276498},{"_id":"themes/indigo/node_modules/less/.editorconfig","hash":"4d7ddc0dd54231af782232a0422f81305d66a421","modified":499162500000},{"_id":"themes/indigo/node_modules/less/.eslintignore","hash":"6dfcb5248de2f2e99f9fc48b3c8da9cb716d45de","modified":499162500000},{"_id":"themes/indigo/node_modules/less/.eslintrc.json","hash":"eac06f06aef1ef974ba1436115193119e0494d2b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/.travis.yml","hash":"7067cef5c730320f8ebc9c0cdbef48763868f02b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/CHANGELOG.md","hash":"6fa26b465923204029c0184034f2090a00b52ffe","modified":499162500000},{"_id":"themes/indigo/node_modules/less/CONTRIBUTING.md","hash":"8e5af16c9121290642fa5ae37cb66b170e51f6fd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/Gruntfile.js","hash":"1252d1c5c4f336b173b65bb02b733e0856286b5c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/LICENSE","hash":"a67980ac171608a5a773c5c4d352f7f18c9b897c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/README.md","hash":"44e0b0f6fbf522170550533792d6be66e3906592","modified":499162500000},{"_id":"themes/indigo/node_modules/less/appveyor.yml","hash":"a8e3cfa7b5008448d5a3d01ae360e29d409a25cf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/bower.json","hash":"71a18f271d8483e5b7c0e7219fb1368556b0853b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/browser.js","hash":"cb6b53533c623999d237c6d62c530d814626b07d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/index.js","hash":"1a5fbc841edadadfbaa54cb44e11119b34654fa2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/package.json","hash":"c7b2d09fe89990c0690846361feed21b11f5d68c","modified":1550480276794},{"_id":"themes/indigo/node_modules/mime/CHANGELOG.md","hash":"fb1894068ff1a400dd64fd5e5b5006d7561d7534","modified":1511571168000},{"_id":"themes/indigo/node_modules/mime/LICENSE","hash":"2e84853fb5f2711901b6ecb4a0b8fe4d419348fd","modified":1511456684000},{"_id":"themes/indigo/node_modules/mime/README.md","hash":"ed339e905c074b2391760ebb46d624bfbc1860fb","modified":1511569060000},{"_id":"themes/indigo/node_modules/mime/cli.js","hash":"4d5f01b12fe3fc18e06d871ce00d0264643200fa","modified":1550480277003},{"_id":"themes/indigo/node_modules/mime/mime.js","hash":"f3ccff5ba27af0b9d39cc5c2f228f5ae3e276d13","modified":1511569060000},{"_id":"themes/indigo/node_modules/mime/package.json","hash":"8dd9380f7f96e5cd2d325f14cc8a1092b367b689","modified":1550480276270},{"_id":"themes/indigo/node_modules/mime/types.json","hash":"caccd2726f4694fa5a276f34a28c29e8fb073ef5","modified":1511571197000},{"_id":"themes/indigo/node_modules/mime-db/HISTORY.md","hash":"4b9c5224c38f43d554a9198dcf6afc3d2cf36a16","modified":499162500000},{"_id":"themes/indigo/node_modules/mime-db/LICENSE","hash":"b559c45c8d07f2679620d9771e68696ee3d5964b","modified":499162500000},{"_id":"themes/indigo/node_modules/mime-db/README.md","hash":"2d84dbb2b2f82052e265be6b7302bdf560a28ee4","modified":499162500000},{"_id":"themes/indigo/node_modules/mime-db/index.js","hash":"31180f8d0ae079b1bee7ee03e77ea5323583eb06","modified":499162500000},{"_id":"themes/indigo/node_modules/mime-db/package.json","hash":"abdf63b318cd0ff72acd68689b2679fe2ed7611b","modified":1550480275572},{"_id":"themes/indigo/node_modules/mime-types/HISTORY.md","hash":"2f040546e19e511c0f68adc7b28c46bb80a22168","modified":499162500000},{"_id":"themes/indigo/node_modules/mime-types/LICENSE","hash":"f027af3e61af3880fd7f7b8ba9452a85dd215738","modified":499162500000},{"_id":"themes/indigo/node_modules/mime-types/README.md","hash":"decb3b62e791f36236189df2a0edd5c1ac38d02b","modified":499162500000},{"_id":"themes/indigo/node_modules/mime-types/index.js","hash":"8d1f07ae6192c4dd6bc08a9247a91af4a0a51eca","modified":499162500000},{"_id":"themes/indigo/node_modules/mime-types/package.json","hash":"d9c4f2672216e398eaee792278dc09d4ef2e14be","modified":1550480275661},{"_id":"themes/indigo/node_modules/minimist/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1372148119000},{"_id":"themes/indigo/node_modules/minimist/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1372145420000},{"_id":"themes/indigo/node_modules/minimist/index.js","hash":"c69b3860fa8b40337db188fdfb201077df93ef5b","modified":1392957961000},{"_id":"themes/indigo/node_modules/minimist/package.json","hash":"24e7800aea101761fc7c65f1bbea906131a7ac28","modified":1550480275743},{"_id":"themes/indigo/node_modules/minimist/readme.markdown","hash":"b037b8453fa008383cf7495b3736aa7cc217deb1","modified":1372148196000},{"_id":"themes/indigo/node_modules/mkdirp/.travis.yml","hash":"6f47845eac101b08d34b0cfb4cb6d0614b69b4b2","modified":1431568866000},{"_id":"themes/indigo/node_modules/mkdirp/LICENSE","hash":"35d8442a9599f876c805b2c7d31178ecfa18c829","modified":1419626841000},{"_id":"themes/indigo/node_modules/mkdirp/index.js","hash":"e4aca996fb54ff20c3dad61f1fa7807fcb44409f","modified":1431570694000},{"_id":"themes/indigo/node_modules/mkdirp/package.json","hash":"7704339f597dc9f02f63080c3ec2b110dbbe9d08","modified":1550480276357},{"_id":"themes/indigo/node_modules/mkdirp/readme.markdown","hash":"e4ffd1099773d1e612dc9ecea76dbb791ef355f5","modified":1419626841000},{"_id":"themes/indigo/node_modules/oauth-sign/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":499162500000},{"_id":"themes/indigo/node_modules/oauth-sign/README.md","hash":"63113f7bf7868dc9a27766af9bc5014a47a38c71","modified":499162500000},{"_id":"themes/indigo/node_modules/oauth-sign/index.js","hash":"4f44395b3b6968d1c22b7b9a0db5b5951778fd1d","modified":499162500000},{"_id":"themes/indigo/node_modules/oauth-sign/package.json","hash":"ab0eaf454e3dd77e7845e16536fef2073c5d4549","modified":1550480275783},{"_id":"themes/indigo/node_modules/performance-now/.npmignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1483443554000},{"_id":"themes/indigo/node_modules/performance-now/.tm_properties","hash":"5c5e5a43a6bb68e67a644fc5726f90cfbe1218cc","modified":1483443554000},{"_id":"themes/indigo/node_modules/performance-now/.travis.yml","hash":"73c068ae853eb29403f51762ea2ba273e4f3ae0c","modified":1487513562000},{"_id":"themes/indigo/node_modules/performance-now/README.md","hash":"1d0d3237cc6e91952e690fdad3beef7ffebb94db","modified":1483850811000},{"_id":"themes/indigo/node_modules/performance-now/license.txt","hash":"7dabcaa93e54d0a7328e689b637f990f1ec73d8f","modified":1483718998000},{"_id":"themes/indigo/node_modules/performance-now/package.json","hash":"839d193510877bb1a4e7fa204e309e3400659e74","modified":1550480276017},{"_id":"themes/indigo/node_modules/promise/.jshintrc","hash":"02782e5a9707ad01e62d23f3801fbece197cd1ed","modified":1392045098000},{"_id":"themes/indigo/node_modules/promise/.npmignore","hash":"32cc5dd8d524473a909327a7bdf496e315ea9512","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/LICENSE","hash":"18f37c0d03100028c8dd401e4e8fb9f8c5c3cb7e","modified":1392045098000},{"_id":"themes/indigo/node_modules/promise/Readme.md","hash":"d9a494db4ead6677ae1ee81d9c63f8df0d41f1a6","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/build.js","hash":"e9c8329f5d31b739b57f1ea14d16170c22934e93","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/core.js","hash":"dab16708aaad750fb2590b588e9bdbed342c3b65","modified":1419634121000},{"_id":"themes/indigo/node_modules/promise/index.d.ts","hash":"32e871ab2c0a3dfb9aadf6699164a0b6ef975de2","modified":1497910502000},{"_id":"themes/indigo/node_modules/promise/index.js","hash":"6edfe7f6612b094e87a6eb638ac6fce70a0bc03f","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/package.json","hash":"1df5e29462cb2a951101f3a66a960c61df8f51ac","modified":1550480275744},{"_id":"themes/indigo/node_modules/promise/polyfill-done.js","hash":"82851dcacad142b820fb40c346aafcf1fc1ba779","modified":1419634121000},{"_id":"themes/indigo/node_modules/promise/polyfill.js","hash":"d111838a1898960810aba3d30fbdd58017236f4c","modified":1419634121000},{"_id":"themes/indigo/node_modules/prr/.jshintrc","hash":"5d6460a4348842fe32a383f9d09b4c01d0bbd960","modified":1364763241000},{"_id":"themes/indigo/node_modules/prr/.npmignore","hash":"9193e35d8b7fc33d768461505160c12c96c608bd","modified":1364763352000},{"_id":"themes/indigo/node_modules/prr/.travis.yml","hash":"484c8ea5f624e9a9b0d63b557dd16b537e877ab3","modified":1364837470000},{"_id":"themes/indigo/node_modules/prr/LICENSE.md","hash":"daff65c4c1453ac89e0a19859d434be112694e8c","modified":1406011894000},{"_id":"themes/indigo/node_modules/prr/README.md","hash":"881c37828b2279daa1ce647203e6ed6a2af606d5","modified":1406011916000},{"_id":"themes/indigo/node_modules/prr/package.json","hash":"7a3ba8b95b71812612be85dcc001fce59ff68e43","modified":1550480275783},{"_id":"themes/indigo/node_modules/prr/prr.js","hash":"3fde29b2e8c547ee64df384fe4b2b114e77da1fc","modified":1364836844000},{"_id":"themes/indigo/node_modules/prr/test.js","hash":"c13a389ae08c7c8e870ff8ebf17d1f1406a32660","modified":1364836816000},{"_id":"themes/indigo/node_modules/psl/.eslintignore","hash":"7034922a65cdf513621de2751fe1d2a5919456b1","modified":499162500000},{"_id":"themes/indigo/node_modules/psl/.eslintrc","hash":"0794084918a64128da9442651b24845c82178af3","modified":499162500000},{"_id":"themes/indigo/node_modules/psl/.travis.yml","hash":"f5d0889f00be64d67259c82e14ab85829e7bea08","modified":499162500000},{"_id":"themes/indigo/node_modules/psl/LICENSE","hash":"5d37c256ec93671543bfc8eb89a7a1dcee4f62a6","modified":499162500000},{"_id":"themes/indigo/node_modules/psl/README.md","hash":"d4e5b3d92d8f5a628c926aeb02dd7ee971aae4f6","modified":499162500000},{"_id":"themes/indigo/node_modules/psl/index.js","hash":"9e7fd00d5e988f4034720c6831e47a0f258261f0","modified":499162500000},{"_id":"themes/indigo/node_modules/psl/karma.conf.js","hash":"eff61ddf45a72571673455ff42a746405c98ced4","modified":499162500000},{"_id":"themes/indigo/node_modules/psl/package.json","hash":"2c4b7193ee2ae1e2ecbb8cdf5187bbb2fa46c774","modified":1550480275814},{"_id":"themes/indigo/node_modules/punycode/LICENSE-MIT.txt","hash":"d7384cd3ed0c9614f87dde0f86568017f369814c","modified":1521100211000},{"_id":"themes/indigo/node_modules/punycode/README.md","hash":"471282886c3bad44b6359b091e9af61bad2291f6","modified":1526957064000},{"_id":"themes/indigo/node_modules/punycode/package.json","hash":"dbb3f2b26d8ecbe44e387bf1fa1ddc00d10aa791","modified":1550480275849},{"_id":"themes/indigo/node_modules/punycode/punycode.es6.js","hash":"4cd0d6df6666175db84f03044e1729d28149bfae","modified":1526957201000},{"_id":"themes/indigo/node_modules/punycode/punycode.js","hash":"39ab3964d954c66ab440a590444fd7dd3493be37","modified":1526957064000},{"_id":"themes/indigo/node_modules/qs/.editorconfig","hash":"482f35688b4e4f8b77ee64b804fca396e2a23022","modified":1501090018000},{"_id":"themes/indigo/node_modules/qs/.eslintignore","hash":"7b8fdc232fc9b1a8050da3c419dea3d23b5da9c5","modified":1450856430000},{"_id":"themes/indigo/node_modules/qs/.eslintrc","hash":"af86f256e00e4a0ebe26c0ef8a926e191d81033f","modified":1525237041000},{"_id":"themes/indigo/node_modules/qs/CHANGELOG.md","hash":"5374e64b21af4db41ef1b529b7d0d0d8ab8f3bcb","modified":1525377002000},{"_id":"themes/indigo/node_modules/qs/LICENSE","hash":"ddf13f1b7345d730677237125bc2e46fbbfbbf32","modified":1450856430000},{"_id":"themes/indigo/node_modules/qs/README.md","hash":"ac4ad81116c9e9e06c46433b58220bc94660ac9e","modified":1497472480000},{"_id":"themes/indigo/node_modules/qs/package.json","hash":"4a8ec1373567c0c7a8d447a453606f6201fbe39c","modified":1550480275905},{"_id":"themes/indigo/node_modules/request/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":499162500000},{"_id":"themes/indigo/node_modules/request/README.md","hash":"094c96f0a70ddd62d7a13a9ad6bfaac0d25f8dab","modified":499162500000},{"_id":"themes/indigo/node_modules/request/index.js","hash":"c62c4d3004ac33bfd8e85d9545814592701ed0f8","modified":499162500000},{"_id":"themes/indigo/node_modules/request/package.json","hash":"ad64105403a41cb2ed011602378c84f5a9e6c9dd","modified":1550480276724},{"_id":"themes/indigo/node_modules/request/request.js","hash":"3343f046367cfa3bba73eb3f40c628342f17c7db","modified":499162500000},{"_id":"themes/indigo/node_modules/safe-buffer/LICENSE","hash":"07d9563f6153658de124707787ff43f0458ab24a","modified":499162500000},{"_id":"themes/indigo/node_modules/safe-buffer/README.md","hash":"75916065970faa645bca603327ecbaea09afe12e","modified":499162500000},{"_id":"themes/indigo/node_modules/safe-buffer/index.d.ts","hash":"0b5844a33b757b9db574541363116917fcbc6d90","modified":499162500000},{"_id":"themes/indigo/node_modules/safe-buffer/index.js","hash":"f67b8decb99eed068f28c9ae56df08c21bf4c33d","modified":499162500000},{"_id":"themes/indigo/node_modules/safe-buffer/package.json","hash":"2c229372355208c1b03d283aab4abc31a81e0048","modified":1550480275939},{"_id":"themes/indigo/node_modules/safer-buffer/LICENSE","hash":"cfcb19ab237382e4ce1253c5f0e28ad153a3c77a","modified":499162500000},{"_id":"themes/indigo/node_modules/safer-buffer/Porting-Buffer.md","hash":"1f23a158dc57c02812baef3334ef96ba1c940e5c","modified":499162500000},{"_id":"themes/indigo/node_modules/safer-buffer/Readme.md","hash":"133890ecc4218d9c67890f0e5884e754e824c859","modified":499162500000},{"_id":"themes/indigo/node_modules/safer-buffer/dangerous.js","hash":"f5d11729706b0de3ed7d6f35060eb73680cce42f","modified":499162500000},{"_id":"themes/indigo/node_modules/safer-buffer/package.json","hash":"6f8a0bdba2ff65c9689e135f1e3c6939aaabb788","modified":1550480275982},{"_id":"themes/indigo/node_modules/safer-buffer/safer.js","hash":"ad919cad501061f663026f382334cc6ce5a8b381","modified":499162500000},{"_id":"themes/indigo/node_modules/safer-buffer/tests.js","hash":"dc7fd8ad11f6c0a7de689697afc870f58f7a2844","modified":499162500000},{"_id":"themes/indigo/node_modules/source-map/CHANGELOG.md","hash":"30497f61c3317cab69ac398e6a1bbb3ced8165f2","modified":1492467890000},{"_id":"themes/indigo/node_modules/source-map/LICENSE","hash":"914d42b13ad394be4aa75b4d93fde94b1e79cbbd","modified":1492467890000},{"_id":"themes/indigo/node_modules/source-map/README.md","hash":"2ba19c8a33cf6196178891f454f98068f202ab6e","modified":1506355788000},{"_id":"themes/indigo/node_modules/source-map/package.json","hash":"a217340b97aad88bc158131c87554cbdccac9a2a","modified":1550480276061},{"_id":"themes/indigo/node_modules/source-map/source-map.d.ts","hash":"5bbd72110452608820b81dc1323c208f13c0047a","modified":1492467891000},{"_id":"themes/indigo/node_modules/source-map/source-map.js","hash":"54dd50c132e3a298bcad252861389300ac0ce265","modified":1506367807000},{"_id":"themes/indigo/node_modules/sshpk/.npmignore","hash":"695019f4a886543f630c962200d822a468757eb0","modified":1452565517000},{"_id":"themes/indigo/node_modules/sshpk/.travis.yml","hash":"1cc0c8e1f34a6f75f2cd25a733c765ac6ea793d3","modified":1461292363000},{"_id":"themes/indigo/node_modules/sshpk/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1446856544000},{"_id":"themes/indigo/node_modules/sshpk/README.md","hash":"a4b37391302777a0f8eadaa61a3e80a9c28360d5","modified":1545357205000},{"_id":"themes/indigo/node_modules/sshpk/package.json","hash":"353be3d689807caaf2dffce2b634f1361a7d3cd4","modified":1550480276870},{"_id":"themes/indigo/node_modules/tough-cookie/LICENSE","hash":"27b1c1365696caf2b2be9a9fa391fa93b0152cb6","modified":499162500000},{"_id":"themes/indigo/node_modules/tough-cookie/README.md","hash":"d64afec360a861d6748989cf4303678159b4e277","modified":499162500000},{"_id":"themes/indigo/node_modules/tough-cookie/package.json","hash":"e66b17ad2a458a026bfd2d34fed2434f26a23f17","modified":1550480276115},{"_id":"themes/indigo/node_modules/tunnel-agent/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1366607489000},{"_id":"themes/indigo/node_modules/tunnel-agent/README.md","hash":"fab5bff0eba532373f36d827d9775105d64ff719","modified":1366607489000},{"_id":"themes/indigo/node_modules/tunnel-agent/index.js","hash":"61c5cadcb5f04336e11d95cb55f86f18cb986f9f","modified":1488673752000},{"_id":"themes/indigo/node_modules/tunnel-agent/package.json","hash":"1c31be80a23b992e049c8c215f88a9a43d2013b6","modified":1550480276270},{"_id":"themes/indigo/node_modules/tweetnacl/.npmignore","hash":"11c8e36af35ec98e1a2d7eddf45646dcb6653169","modified":1460742445000},{"_id":"themes/indigo/node_modules/tweetnacl/AUTHORS.md","hash":"f075e705a5f8e8ff0e7842de6a26ebf53e08f745","modified":1481623354000},{"_id":"themes/indigo/node_modules/tweetnacl/CHANGELOG.md","hash":"06dec0b7fb3130df4b0fdd1f8122bf2cd196e900","modified":1481626689000},{"_id":"themes/indigo/node_modules/tweetnacl/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1481623354000},{"_id":"themes/indigo/node_modules/tweetnacl/PULL_REQUEST_TEMPLATE.md","hash":"e88e8e670a11b57fc18bb19a15c1c0df04517a09","modified":1481623354000},{"_id":"themes/indigo/node_modules/tweetnacl/README.md","hash":"cf98261b2d1bc21a11ab1f28ee70cc2597205802","modified":1481627238000},{"_id":"themes/indigo/node_modules/tweetnacl/nacl-fast.js","hash":"b8caf62487ca1fcba5ed9e47571bdff0806b8fc1","modified":1460742445000},{"_id":"themes/indigo/node_modules/tweetnacl/nacl-fast.min.js","hash":"08db9a8b57304c3c117c2a5ba117e25a0d816b34","modified":1481623484000},{"_id":"themes/indigo/node_modules/tweetnacl/nacl.d.ts","hash":"074079a1aca6756d5a4fec3f3fd4a9f6e9c00f66","modified":1481623733000},{"_id":"themes/indigo/node_modules/tweetnacl/nacl.js","hash":"523fe36259524a0f35d056416a18de5ae96027a3","modified":1460742445000},{"_id":"themes/indigo/node_modules/tweetnacl/nacl.min.js","hash":"ab05565ba3e2cf29401962ddcd94912e54d916f3","modified":1481623482000},{"_id":"themes/indigo/node_modules/tweetnacl/package.json","hash":"289e660483e5ccc4b28e0f92023750b9748ca6ea","modified":1550480276138},{"_id":"themes/indigo/node_modules/uri-js/README.md","hash":"f516cd7f6fec8648791a9f05aec4e6ac907dc881","modified":1522550800000},{"_id":"themes/indigo/node_modules/uri-js/bower.json","hash":"8ab4105201bac6a1463d7794b6a7278e9dd098d5","modified":1490711780000},{"_id":"themes/indigo/node_modules/uri-js/package.json","hash":"196347f9dce6b999d9834e3dd4d0f6d84889d1b6","modified":1550480276794},{"_id":"themes/indigo/node_modules/uri-js/rollup.config.js","hash":"9dbfc1323ddee512821226775f22ef2f27718185","modified":1523405531000},{"_id":"themes/indigo/node_modules/uri-js/tsconfig.json","hash":"ae7be1d9765a433dc3e588e759e2127b701432f6","modified":1490368148000},{"_id":"themes/indigo/node_modules/uuid/.eslintrc.json","hash":"cb4d88ea242b9938ab64c0445baa41f9ef366a02","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/AUTHORS","hash":"55ad68da17b6319a39a82d7c7f7a3ea1e951dee8","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/CHANGELOG.md","hash":"f81c4e89670fe5d8573f553a8d99fa5d4458d00a","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/LICENSE.md","hash":"65e6555c3308c1d9538808d6c67e75924b8ad912","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/README.md","hash":"49b1c8547e5d44bd9199c15ad35d4237fb18fec0","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/README_js.md","hash":"58e2418907131ae07fa5135ecf1985576dfd7fcc","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/index.js","hash":"8e8abb1384d04d1ec5745c9824eee400f77536c0","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/package.json","hash":"3afb0557db5420cf1864b28984641c677db68659","modified":1550480276828},{"_id":"themes/indigo/node_modules/uuid/v1.js","hash":"02e4c5e78eb8183c890753bb6ce6f1aa7479bf38","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/v3.js","hash":"8815de1e54c316b5fc537712462a07a45e229fec","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/v4.js","hash":"af1ab906dd54d3df6319d096b3d5f10686aa7331","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/v5.js","hash":"5666846c28ee13c09c22763866145dffe92762bf","modified":499162500000},{"_id":"themes/indigo/node_modules/verror/.npmignore","hash":"e9062d79bd70146c728778571cbdec1dfa54bcd0","modified":1475636976000},{"_id":"themes/indigo/node_modules/verror/CHANGES.md","hash":"557736d3be5363b84f160d480fd2143bbe324c36","modified":1493743176000},{"_id":"themes/indigo/node_modules/verror/CONTRIBUTING.md","hash":"9147b55a7f13fa4e1db7fe3f83d4415be389ab8a","modified":1475636976000},{"_id":"themes/indigo/node_modules/verror/LICENSE","hash":"ca9d7f4229b385ade88c365257829b4005e85b9e","modified":1475636976000},{"_id":"themes/indigo/node_modules/verror/README.md","hash":"4464bdc3da677f07d0f22e1b14f81a81cdee75f0","modified":1493743176000},{"_id":"themes/indigo/node_modules/verror/package.json","hash":"e8d2120dfa3a7973f55685c1631ec5a9eb3d5885","modified":1550480276498},{"_id":"themes/indigo/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1548348052000},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1550479540007},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"515e1d16256ed4492847f861cdf1f0b4ae43d70e","modified":1550476633026},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1548348052000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1548348052000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1548348052000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1548348052000},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1550479539994},{"_id":"themes/indigo/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1548348052000},{"_id":"themes/indigo/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1548348052000},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1548348052000},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1548348052000},{"_id":"source/_posts/ModelAttribute-对象没有无参的构造函数出错详解-1/20180627151839209.png","hash":"722d8694c8fa51bd8473b3caf77b2a4350d3d9f0","modified":1550481383375},{"_id":"source/_posts/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105206677.png","hash":"c221ae7089106418910b0590ddd18f81fde49324","modified":1550481400593},{"_id":"themes/indigo/node_modules/ajv/README.md","hash":"cd839e70043f61f6841309e712349807b97b8ec2","modified":1549787913000},{"_id":"themes/indigo/node_modules/form-data/yarn.lock","hash":"dc0bb50636fa8f779471708f86657a37eb41422f","modified":1518539554000},{"_id":"themes/indigo/node_modules/request/CHANGELOG.md","hash":"c19e990e25828536705fd6d8c6db4410380201b4","modified":499162500000},{"_id":"themes/indigo/node_modules/uri-js/yarn.lock","hash":"ed46014fa76c4a547f30fdc35561bd4962a0842c","modified":1525380349000},{"_id":"themes/indigo/.git/objects/04/2750c9eb063988df769b8b225b87c031c8835d","hash":"de146d118a77ca2e56d3c3b2bcacd8756d394520","modified":1550479351000},{"_id":"themes/indigo/.git/objects/0c/965db7d51a09815f99ee05d174db091def17f9","hash":"4c851e0e2821d481a7e45dd0a9190078ccef43ad","modified":1550478892817},{"_id":"themes/indigo/.git/objects/14/a08e5958e880e3db49041de02e68281e319458","hash":"ece6c5f57d047e0679ce161a5dd872258c31340c","modified":1550478892764},{"_id":"themes/indigo/.git/objects/18/3b6f6744b576b0a498dbedb270992b84a24763","hash":"a7406a7354fa0f815c1e24c54efd21eed4b786b5","modified":1550478893474},{"_id":"themes/indigo/.git/objects/3c/87599b040690608fc594044ae769b66c42c4d0","hash":"4860b75cdc9e20eeab6d6e443487c5a15a26dd3e","modified":1550478892694},{"_id":"themes/indigo/.git/objects/41/0b4df261c5d22458a09c1cf8ca77e6b142e9e6","hash":"571f514dd5675c86b83981e96f12e07dc92e9da4","modified":1550479351000},{"_id":"themes/indigo/.git/objects/61/244dccd422107080be5e44f0447008054bec1c","hash":"2193942fc7ea8902bda67bcdbe03ca2064e03891","modified":1550478893743},{"_id":"themes/indigo/.git/objects/61/3b6510550c563d1f80e638474cba8a1c0f8cf3","hash":"f3b32293f5b0677f23d42da6056a1e83911aa925","modified":1550478893238},{"_id":"themes/indigo/.git/objects/71/a55e6c2db5b0b041905d8d8b39f032c869e1a0","hash":"6e6c17e13177e61c6d0e77a4109af244ac177a40","modified":1550479537000},{"_id":"themes/indigo/.git/objects/72/1d202d8e7e26d75908bc9fd07967d3676453d6","hash":"5c8313e39ff994b5ce176ec4cc9ed0dbcb64428f","modified":1550478892885},{"_id":"themes/indigo/.git/objects/85/5fc69013304c567abeceec2e419179c6ceedb9","hash":"a0b30810965cac9ad9719acf8db29a553432863e","modified":1550480129167},{"_id":"themes/indigo/.git/objects/8b/78e038dee9d703036d51c5d531dbbab4257967","hash":"d3afc1fc8713a054fcda4f8753c12d0a569333fa","modified":1550478893551},{"_id":"themes/indigo/.git/objects/8e/63f2c8df3ed8e0f1e6b040830803b36b51f0aa","hash":"31577789de4d8e0216ce66bac9522a93424dbfd5","modified":1540208280449},{"_id":"themes/indigo/.git/objects/9b/a09640c6f7435c6e9ecc083ee808458caa2356","hash":"a18dbcfa061ab9ecf2b245552706013f8447de26","modified":1550478894097},{"_id":"themes/indigo/.git/objects/b8/8a100f2bcd216e481614a5769dbf359f9d46f1","hash":"f5dc5b961633d1958fe4c786bb9aaec0396e0dfe","modified":1550479351000},{"_id":"themes/indigo/.git/objects/b9/6cc0ec4d7a752f4d920e59cc16af6972796273","hash":"10d910f10c84fe8fa4ef78eeb11c38e312aab92a","modified":1550478893178},{"_id":"themes/indigo/.git/objects/ba/126ad4e28cefb33a865b372a2878cd61faffbd","hash":"f64668fbdd9e3373a0c587f838026d93bb42b5a8","modified":1550478893119},{"_id":"themes/indigo/.git/objects/bb/7926a3debdb5c6aa170c160f78834c77a3d4fb","hash":"bd1c090f9870d7d06f4f8d2ae26f2b8d0a53d6f1","modified":1550480129000},{"_id":"themes/indigo/.git/objects/bc/547c540078d6b5e049ead11dd0302335793ced","hash":"114ea203fb2b38b4dc1db3759278628acfd3ee35","modified":1550478893084},{"_id":"themes/indigo/.git/objects/bc/99b31f2576aa40fecb3e8b769d6b82cd6ee46a","hash":"e76d6edc1a19ec58cc3e264bd7ea0589ed7f12a0","modified":1550478894174},{"_id":"themes/indigo/.git/objects/c3/7fc7efaf1480a566a81689073c72dfa164db0c","hash":"f1f4fdc69c728882500256485794a06abe69de9e","modified":1550478894029},{"_id":"themes/indigo/.git/objects/d2/94d90b03281c6eb4480fff8bb9e2c4f27269b3","hash":"d9e1269cdc8f2e7dbd2a528b1a9ad042d30aee66","modified":1550478893285},{"_id":"themes/indigo/.git/objects/e4/bc41a3b9404fa870899cb14b03062d72cb10c0","hash":"943f35c4af83866051b0f90f05b36ef8c8af59db","modified":1550478893021},{"_id":"themes/indigo/.git/objects/f6/8fb0261da5635cc0e32ca682449e529825163b","hash":"d001aab351d35508173947fc39d95e56d5cd97ae","modified":1550478894268},{"_id":"themes/indigo/.git/objects/f8/cac25a95424753cdb105e48cbb79270137c0ef","hash":"e469be01e02a6d02dd5b4fb448aded5e66e4d474","modified":1550478893409},{"_id":"themes/indigo/.git/objects/pack/pack-d50b6ddcc7755b7558f88f3d7daf3aaaf3d9380d.idx","hash":"0f1bdf8e163330359946deb4bb54918503b87f1b","modified":1540036370326},{"_id":"themes/indigo/.git/refs/heads/1.0.0","hash":"484dfa35ff9eb7a589991d8ca81ef961cd2a4ea6","modified":1550482508349},{"_id":"themes/indigo/.git/refs/heads/card","hash":"484dfa35ff9eb7a589991d8ca81ef961cd2a4ea6","modified":1540036370916},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/gitalk.ejs","hash":"bcf792a5633151fd999319fd91cf477e6860ae9c","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1550483913607},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"b1a6984e19d3493fb327383ee76e09fdee090426","modified":1550483913609},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1548348052000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1548348052000},{"_id":"themes/indigo/node_modules/ajv/lib/.DS_Store","hash":"4c4049697a9e44ce978346a520369c4347ee93fc","modified":1541937537000},{"_id":"themes/indigo/node_modules/ajv/lib/ajv.d.ts","hash":"b5006f46b83b718410b02e542d4c76ea666b6732","modified":1546547713000},{"_id":"themes/indigo/node_modules/ajv/lib/ajv.js","hash":"56cbe2bafece0a77e64a5bab57e5dd73f1d69434","modified":1549712799000},{"_id":"themes/indigo/node_modules/ajv/lib/cache.js","hash":"ca2c2b8d327699c615a231ce5b3d2ea2207ca558","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/data.js","hash":"37b38a682fde67b977191568b2ec8c1629df504a","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/keyword.js","hash":"0b36c2d1b34727fbb2e3e5e8aec25b4a54f4d7d1","modified":1549787831000},{"_id":"themes/indigo/node_modules/ajv/scripts/.eslintrc.yml","hash":"a9741a141e6a7184474a2cce07fa3b6651edd8d8","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/scripts/bundle.js","hash":"11eba606302f969b6d27975408a41b622a81f1e2","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/scripts/compile-dots.js","hash":"4d065f52ccb7866d81ebb7fb707348505a9c93f2","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/scripts/info","hash":"a95450a7ad65a96a1c5e6c35cf4b58b765d24753","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/scripts/prepare-tests","hash":"026a06e1e82e631f048ea3e1a92c93f4b21bce8a","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/scripts/publish-built-version","hash":"c68147e86149df70c332c65f41de257452eb45f7","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/scripts/travis-gh-pages","hash":"d4319e13aaa6fab37f07912157029797da9ce24e","modified":1524950955000},{"_id":"themes/indigo/node_modules/asn1/lib/index.js","hash":"6034c7cc87cd727d2979a95eeb432203a3690b79","modified":1532629842000},{"_id":"themes/indigo/node_modules/asynckit/lib/abort.js","hash":"440629b13ff27be58720005cb549f38903d80737","modified":1465585654000},{"_id":"themes/indigo/node_modules/asynckit/lib/async.js","hash":"c5d0ae608872e8fcc47a465d51564b6576c49401","modified":1463755306000},{"_id":"themes/indigo/node_modules/asynckit/lib/defer.js","hash":"751e8dd7ef7b877d05e66eb8782f95ae78351c4b","modified":1463755276000},{"_id":"themes/indigo/node_modules/asynckit/lib/iterate.js","hash":"219e4942b78515ab728825d33473715c246fd081","modified":1465585679000},{"_id":"themes/indigo/node_modules/asynckit/lib/readable_asynckit.js","hash":"6a883852b3639a6c4a7e7e4fdefa2bd08c6ecedf","modified":1465752133000},{"_id":"themes/indigo/node_modules/asynckit/lib/readable_parallel.js","hash":"55538262a65702eb61a29e2ea3a20637490f96d9","modified":1465716911000},{"_id":"themes/indigo/node_modules/asynckit/lib/readable_serial.js","hash":"05bbc69be79b76f58faeb2805697ea9469c60d89","modified":1465715271000},{"_id":"themes/indigo/node_modules/asynckit/lib/readable_serial_ordered.js","hash":"bf2240383cb36d9a191d5ed87abb5d8674ddd8d4","modified":1465859663000},{"_id":"themes/indigo/node_modules/asynckit/lib/state.js","hash":"fa825d1971532d33a039d634de8aed494c09c08a","modified":1465664364000},{"_id":"themes/indigo/node_modules/asynckit/lib/streamify.js","hash":"cad24d3ac61e7d9ad281c5190c5cc4e4ba8e6f3b","modified":1465693502000},{"_id":"themes/indigo/node_modules/asynckit/lib/terminator.js","hash":"1f8a78f42a386e65c9fb5cf621a90a2792dbb63c","modified":1465665521000},{"_id":"themes/indigo/node_modules/combined-stream/lib/combined_stream.js","hash":"90d3d9ce7524d0d4ab781e30bac86a79613ec29a","modified":1518452880000},{"_id":"themes/indigo/node_modules/combined-stream/lib/defer.js","hash":"751e8dd7ef7b877d05e66eb8782f95ae78351c4b","modified":1518452620000},{"_id":"themes/indigo/node_modules/core-util-is/lib/util.js","hash":"7d34435928ee9228995c04eaa7bdcef875c41e65","modified":1447979840000},{"_id":"themes/indigo/node_modules/dashdash/etc/dashdash.bash_completion.in","hash":"749ea2069b183cd2ef4e83f496ca754eef30c3fd","modified":1479854012000},{"_id":"themes/indigo/node_modules/dashdash/lib/dashdash.js","hash":"bcac2fce732aa9b1084e924d9ea49189d20cf60c","modified":1464847153000},{"_id":"themes/indigo/node_modules/delayed-stream/lib/delayed_stream.js","hash":"097ab12e3837896d11d3f1d2c7a891d177b493c4","modified":1430160544000},{"_id":"themes/indigo/node_modules/ecc-jsbn/lib/LICENSE-jsbn","hash":"4f94910918b5e57f3e55c7387f43b0d6293a4319","modified":1532879415000},{"_id":"themes/indigo/node_modules/ecc-jsbn/lib/ec.js","hash":"d9a60c831fe91bd2c62ff3e3c9675b0379ef504c","modified":1532879415000},{"_id":"themes/indigo/node_modules/ecc-jsbn/lib/sec.js","hash":"b1632526290dfddc063f05ac6ed29cc40bd9e221","modified":1532879415000},{"_id":"themes/indigo/node_modules/extsprintf/lib/extsprintf.js","hash":"2331ac9de23b7cc92510c3ead98efa1a8a2de8f8","modified":1425687068000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/benchmark/index.js","hash":"17619f7e28ced52a18ff262b4e16d4dad2105deb","modified":1508860414000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/benchmark/test.json","hash":"9fe75dfdacdf2fa66188890ed112d4da355815f7","modified":1508861235000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/example/key_cmp.js","hash":"9e5797f7e3c351f6bfe5c4c72304b3048d1515c8","modified":1508836326000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/example/nested.js","hash":"1259337a975367c26a59b9d8dfaa91e0f0a612b5","modified":1508836326000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/example/str.js","hash":"9145496a1e5d513eda1a10298b412b3becf68d71","modified":1508836326000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/example/value_cmp.js","hash":"71a64ddc23c9ded23dc156a9a2a7baf55846c1ec","modified":1508836326000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/test/cmp.js","hash":"deff3391b199444278e9cc781fdf41b9ccf5bc98","modified":1508841742000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/test/nested.js","hash":"1d7b098c0ce2bdc5549c083ab09a2d7470734a90","modified":1508841718000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/test/str.js","hash":"1e4807d200cc96dcddbb34ad2777a0b86060661c","modified":1508866010000},{"_id":"themes/indigo/node_modules/fast-json-stable-stringify/test/to-json.js","hash":"2928abc4469f3b1b8af084795138a4eb82d83375","modified":1508841670000},{"_id":"themes/indigo/node_modules/form-data/lib/browser.js","hash":"0ae55bb7ee9e39bd3dda8d9b6e6d6bff3855d121","modified":1478555747000},{"_id":"themes/indigo/node_modules/form-data/lib/form_data.js","hash":"0597bc0beff7f785b19e8be3e7565d183fb642e6","modified":1539761003000},{"_id":"themes/indigo/node_modules/form-data/lib/populate.js","hash":"1808bbf4f1478a79ea4f00b38bf46983e48c0ff3","modified":1472196493000},{"_id":"themes/indigo/node_modules/getpass/lib/index.js","hash":"3e1d47c5742292c6964267fe3b1ef54a5918f419","modified":1493163595000},{"_id":"themes/indigo/node_modules/har-schema/lib/afterRequest.json","hash":"f7f70adc3b0512cc2e04133192ea4f87e0146ab1","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/beforeRequest.json","hash":"0722001e46c933b79fec640cae9cd1ffa39dcca7","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/browser.json","hash":"4db37d46769f3ecf86aa5224c185d04d4c83f56a","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/cache.json","hash":"50bb69d7fdbbb6155f26a04ff72d00551eb36202","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/content.json","hash":"81d4f4003ddd3350eff241826c14c0b9cc6d7444","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/cookie.json","hash":"752404cc8cbd04ce0ac8c1fa32eb2dd8e248826d","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/creator.json","hash":"1b471a27337a94c37d4c5ddc6e15b6ba14b7f422","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/entry.json","hash":"ec3c862d75ce851061e3c9c41dab28e3f7290795","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/har.json","hash":"e91c94dc990dce4a0f4f20f3972fd34d4a40cb76","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/header.json","hash":"751bf4dbbefb43a6f8752ae6c82b1c18be523cee","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/index.js","hash":"1e6ac13e2a43e93530c96896efbf395028e621a1","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/log.json","hash":"39e98d99850119a095f065ab923ac951ef2e55ef","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/page.json","hash":"684677171808e6ca501390734f451eebfc981213","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/pageTimings.json","hash":"2646f23aaf7706b16932e2d0e0f407a685483b90","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/postData.json","hash":"753ec1ce064487fab23fbb0dc8cd3c14fdafc904","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/query.json","hash":"da4c7add90f000ded1e872114ba3630460ccea61","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/request.json","hash":"799df36973dfea0675ee63e187a05e831ee74361","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/response.json","hash":"7a5c6856928f38525919c20e71c8cb10664f240f","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-schema/lib/timings.json","hash":"2f02b1a5200eea10b0171913e032cc4d74f015b1","modified":1492544568000},{"_id":"themes/indigo/node_modules/har-validator/lib/async.js","hash":"a5f651ea4e3c4f4427ad69842c469bbca6f457a8","modified":499162500000},{"_id":"themes/indigo/node_modules/har-validator/lib/error.js","hash":"80e4d7c599adb31f6245d6b79bcc190f6ca061f5","modified":499162500000},{"_id":"themes/indigo/node_modules/har-validator/lib/promise.js","hash":"a27b54732dd98f8d9e9900815e93032f75ad625b","modified":499162500000},{"_id":"themes/indigo/node_modules/http-signature/lib/index.js","hash":"996c8efa1d7896034c980e498bec866824662d52","modified":1503623992000},{"_id":"themes/indigo/node_modules/http-signature/lib/parser.js","hash":"993a592d1b1c86a21b77a66f84e8cdeb7b6b780b","modified":1503689277000},{"_id":"themes/indigo/node_modules/http-signature/lib/signer.js","hash":"65d73fbe8f2c699e36d290e0784ec926d68b06ae","modified":1503624550000},{"_id":"themes/indigo/node_modules/http-signature/lib/utils.js","hash":"dce96d033869c424854178ae71991fe39b7c58b5","modified":1503623992000},{"_id":"themes/indigo/node_modules/http-signature/lib/verify.js","hash":"f0603457d003b72d484d608b266566e771644438","modified":1503623992000},{"_id":"themes/indigo/node_modules/image-size/bin/image-size.js","hash":"8aaaad230d057993e454de7e4f572bceac3a6424","modified":1550480276992},{"_id":"themes/indigo/node_modules/image-size/lib/detector.js","hash":"a0e131e73c03546f0432b2757064006956f6006b","modified":1477387673000},{"_id":"themes/indigo/node_modules/image-size/lib/index.js","hash":"8519bf5422041801d5ae963898c9c86a0dd86eca","modified":1494851256000},{"_id":"themes/indigo/node_modules/image-size/lib/readUInt.js","hash":"db35f80815b22ad6e27eade928c0a12d724f0df2","modified":1477387673000},{"_id":"themes/indigo/node_modules/image-size/lib/types.js","hash":"4683bb4c9298551e5dec7f9301b44efbee3d5d2a","modified":1494844393000},{"_id":"themes/indigo/node_modules/json-schema/draft-00/hyper-schema","hash":"a5972bcc99abc4936ff350f116a69390f8ac99e8","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-00/json-ref","hash":"b5f7e93c3edc2eb501e913441ddfdeef0c04386a","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-00/links","hash":"490c91fb104a16a76290377797a5411d21379614","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-00/schema","hash":"253c4fcfccaf49023c10a1a92d81cc3d21344e8a","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-01/hyper-schema","hash":"51802f7884c813fe2a002776aa97a440c7442d9a","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-01/json-ref","hash":"2132a5a9319f8bf190040b49150e005e0916ed22","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-01/links","hash":"09b2131c15d754a61a1baf1158a8e6c73644287f","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-01/schema","hash":"10942d74811e1e16425e6219b0ba808b493321ab","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-02/hyper-schema","hash":"117eb70efaa120edeb97caa6ca7e53eae8f761e2","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-02/json-ref","hash":"31b76b211e24e56b0ff5ae3ba739835039cd96b8","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-02/links","hash":"f8a835ea08959ceca9682cf1c30df6d5cf9ff033","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-02/schema","hash":"ba84a3e7e9332328db986a1123084f2a6dba57f7","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-03/hyper-schema","hash":"552aaa9921cbeb19c2c9b485e64965f7a98e22fc","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema/draft-03/json-ref","hash":"9f121cedcda14cbdd55e2fd80a96e289d9a1f2f9","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema/draft-03/links","hash":"5f1601142843a6028beb35cef8b851413a4dfa91","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema/draft-03/schema","hash":"4b500e66b7c4a36bc4d3ff6da089d6228c54f94c","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema/draft-04/hyper-schema","hash":"362194bf4c6690db17b848c1a796ef747bf7a6c1","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema/draft-04/links","hash":"92cd269ccdfe3f3bc673205133cb9940afa465c4","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema/draft-04/schema","hash":"7a6839ef21cf49fd6bdc687be7dbfbb92c97ac7c","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema/lib/links.js","hash":"bc70a0d21a6639c78017ad1ab1254d8e1516bc75","modified":1472878014000},{"_id":"themes/indigo/node_modules/json-schema/lib/validate.js","hash":"c336cd87629b485336a56636cd36144220281161","modified":1472877970000},{"_id":"themes/indigo/node_modules/json-schema/test/tests.js","hash":"f3f322d2cec777f57df41b071818a05e97d35f2a","modified":1472871200000},{"_id":"themes/indigo/node_modules/json-schema-traverse/spec/.eslintrc.yml","hash":"d105e036ac5efe87b86bbe2a32afd751f03d9e14","modified":1525807808000},{"_id":"themes/indigo/node_modules/json-schema-traverse/spec/index.spec.js","hash":"06e5616d7577f23f7c7b5989662e1f8f1d93fb0e","modified":1525808085000},{"_id":"themes/indigo/node_modules/json-stringify-safe/test/mocha.opts","hash":"98216b4fbc2e0c1c17ee946b02272a26fcc1f4c1","modified":1431999690000},{"_id":"themes/indigo/node_modules/json-stringify-safe/test/stringify_test.js","hash":"4760401b04513ae7eb79fff0e1239a9947a8af78","modified":1431999690000},{"_id":"themes/indigo/node_modules/jsprim/lib/jsprim.js","hash":"794c578fd13608d65a0469ed74ac30fd3d15ebe3","modified":1494025745000},{"_id":"themes/indigo/node_modules/less/.github/stale.yml","hash":"e156bd69f817d6a5fc4fe86c97094cf10b0da485","modified":499162500000},{"_id":"themes/indigo/node_modules/less/.vscode/launch.json","hash":"78085a1ed2f682ee91f8dae300cd928bd016665e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/bin/lessc","hash":"c23e3c926d8a3cf608cdf815ba83596e8bb2d545","modified":1550480277068},{"_id":"themes/indigo/node_modules/less/test/.eslintrc.json","hash":"05f041001fb6ba6abe259db4b83aa822f7035b56","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/copy-bom.js","hash":"ab07e3814940d1b1f105222b8ddf9b53a528cd91","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/index.js","hash":"eae0732f4d22603ad1c1117980e47bf633423a5a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-test.js","hash":"d0272854e62b9e8243a7c17455c38a110f4a9806","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/modify-vars.js","hash":"103ff6081378ecaf4a474e8420cfa83c50b6a2d6","modified":499162500000},{"_id":"themes/indigo/node_modules/mime/src/build.js","hash":"f37722b22ad17b428b8b4b97b5c09720b4e86a9d","modified":1511569247000},{"_id":"themes/indigo/node_modules/mime/src/test.js","hash":"86d3d2bcf162f3c198ad8315c803fa7f4b928f07","modified":1511569060000},{"_id":"themes/indigo/node_modules/mime-db/db.json","hash":"5146b6ef630dd468efcf7bc6e9c9c3c15dfc6012","modified":499162500000},{"_id":"themes/indigo/node_modules/minimist/example/parse.js","hash":"7684d952ceaa32a8c9e3cd21ba26a62e7ee14387","modified":1372147306000},{"_id":"themes/indigo/node_modules/minimist/test/dash.js","hash":"27fa6e19e26916edd7fd46ccc2d0b2301b3042a3","modified":1389378397000},{"_id":"themes/indigo/node_modules/minimist/test/default_bool.js","hash":"ecdb759c4275fb23bd5d072c3c6a7baa74b407c7","modified":1372147071000},{"_id":"themes/indigo/node_modules/minimist/test/dotted.js","hash":"51664f4efb36d519b2e439f1156e05e917c08bda","modified":1377730679000},{"_id":"themes/indigo/node_modules/minimist/test/long.js","hash":"f0ccd5d55358f78efbc928753264e4a32f7724fc","modified":1372143145000},{"_id":"themes/indigo/node_modules/minimist/test/parse.js","hash":"e240ae50a049d7b4b4b625467df34bcfaef7dceb","modified":1392957961000},{"_id":"themes/indigo/node_modules/minimist/test/parse_modified.js","hash":"5c3cf170e2a2476e0f5bfee9af78556a1958d503","modified":1372145355000},{"_id":"themes/indigo/node_modules/minimist/test/short.js","hash":"2ce00fdfe4906fc504286974c143c4ced6a11b12","modified":1391917546000},{"_id":"themes/indigo/node_modules/minimist/test/whitespace.js","hash":"ea3a87137fa34c00a7d84a4d0350770e8d85ed9c","modified":1372148159000},{"_id":"themes/indigo/node_modules/mkdirp/bin/cmd.js","hash":"0dbed17e23d62e8dc9893f9459768531b300c95c","modified":1550480277016},{"_id":"themes/indigo/node_modules/mkdirp/bin/usage.txt","hash":"682ca66d4def0ba4af814be4e6363eff5fcede0d","modified":1419626841000},{"_id":"themes/indigo/node_modules/mkdirp/examples/pow.js","hash":"6d34dfc0f5f17a971dee0f5ba40eba5219bdd803","modified":1419626841000},{"_id":"themes/indigo/node_modules/mkdirp/test/chmod.js","hash":"ee02690748279a5bad6179dd3feeb66a48d330c8","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/clobber.js","hash":"4d00dc55c23f21600adbceb6760587b3ca861626","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/mkdirp.js","hash":"628f2dbd4137f64e69454708ba513870b85af4c8","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/opts_fs.js","hash":"8dd756971f7443eb340b846acee0c17cbadbcb87","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/opts_fs_sync.js","hash":"0f949a29099c6206e617d6e9e39cb3a41d0daab4","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/perm.js","hash":"11382491d90f70fce17e9d183765c343c7870c3c","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/perm_sync.js","hash":"1759536f89220a608a3987a3038cbaaa0e7458ac","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/race.js","hash":"237f49a5262bc2c668653897e8cc1af8eaa5bd89","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/rel.js","hash":"2488c0b77bc0419a4646c7d0bcfaaef5651995a5","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/return.js","hash":"dc2bf5dd5eff2e6a914fc1f731f50ac887ef9d31","modified":1419626841000},{"_id":"themes/indigo/node_modules/mkdirp/test/return_sync.js","hash":"ef9a789aeb65bafbbb7bceb048dc33ec24a41e3b","modified":1419626841000},{"_id":"themes/indigo/node_modules/mkdirp/test/root.js","hash":"b034b5fdf0da3932263437d9d52b53642a2b40ad","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/sync.js","hash":"22a3775a59d8994c368e5574ba8ffbe19c8b8648","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/umask.js","hash":"d08a2f100ddc37e563e548fd9f7730599009824c","modified":1431568795000},{"_id":"themes/indigo/node_modules/mkdirp/test/umask_sync.js","hash":"917a95e95427eecd9a0cb7807e0ab6ab3c653fcc","modified":1431568795000},{"_id":"themes/indigo/node_modules/performance-now/lib/performance-now.js","hash":"441fe91cf077ba520a22bb82487439a292ed7e2d","modified":1487514525000},{"_id":"themes/indigo/node_modules/performance-now/lib/performance-now.js.map","hash":"50bdd3412d57f86521de00afc24177415ee70f3b","modified":1487514525000},{"_id":"themes/indigo/node_modules/performance-now/src/index.d.ts","hash":"cab5735ccbd2666329124c3284b12c8aaa4a5881","modified":1487513961000},{"_id":"themes/indigo/node_modules/performance-now/src/performance-now.coffee","hash":"1afaa86418105a30940d34c3f84dcbabced93229","modified":1483849977000},{"_id":"themes/indigo/node_modules/performance-now/test/mocha.opts","hash":"bb896e2b4872a971113be6df6cf74bb1ad34cdbf","modified":1483443554000},{"_id":"themes/indigo/node_modules/performance-now/test/performance-now.coffee","hash":"9a86c23591031408a9e2e5b17a9600bc82556f28","modified":1484002078000},{"_id":"themes/indigo/node_modules/performance-now/test/scripts.coffee","hash":"ac50e35ea322260600fe12cfb49af3d37678d77a","modified":1484000743000},{"_id":"themes/indigo/node_modules/promise/domains/core.js","hash":"d857e8507a1a09e230e0c314f9034e9291f68ab3","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/domains/done.js","hash":"e0b9a045f237c3df25c928485a4202a28e0be842","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/domains/es6-extensions.js","hash":"4d2b449839681daf03504f3d3954e2bc61d1bbf1","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/domains/finally.js","hash":"7f59ac5d98d13d4deadd49f03316fc6449148f0b","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/domains/index.js","hash":"a807a5dfe4aeb0ffb2b7b32eef2d99a203bd3055","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/domains/node-extensions.js","hash":"b28daf5dad32d197ac38aa2d56126c63aee3525e","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/domains/rejection-tracking.js","hash":"15cdd66a8efec24606c2ee5f81dbeb109e06c096","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/domains/synchronous.js","hash":"7fb8848a5a0104e14d0baf87909f5ec08b8a78e6","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/lib/core.js","hash":"6f9389cc97af2293723d52ea9d5d994d32544031","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/lib/done.js","hash":"e0b9a045f237c3df25c928485a4202a28e0be842","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/lib/es6-extensions.js","hash":"4d2b449839681daf03504f3d3954e2bc61d1bbf1","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/lib/finally.js","hash":"7f59ac5d98d13d4deadd49f03316fc6449148f0b","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/lib/index.js","hash":"a807a5dfe4aeb0ffb2b7b32eef2d99a203bd3055","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/lib/node-extensions.js","hash":"b28daf5dad32d197ac38aa2d56126c63aee3525e","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/lib/rejection-tracking.js","hash":"15cdd66a8efec24606c2ee5f81dbeb109e06c096","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/lib/synchronous.js","hash":"7fb8848a5a0104e14d0baf87909f5ec08b8a78e6","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/setimmediate/core.js","hash":"b50530a035c0909d5fcd623e5cdbcd613b9c9455","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/setimmediate/done.js","hash":"e0b9a045f237c3df25c928485a4202a28e0be842","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/setimmediate/es6-extensions.js","hash":"4d2b449839681daf03504f3d3954e2bc61d1bbf1","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/setimmediate/finally.js","hash":"7f59ac5d98d13d4deadd49f03316fc6449148f0b","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/setimmediate/index.js","hash":"a807a5dfe4aeb0ffb2b7b32eef2d99a203bd3055","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/setimmediate/node-extensions.js","hash":"7e6db50a04ba7e2b4df4f0b91a90831a9c9108c1","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/setimmediate/rejection-tracking.js","hash":"15cdd66a8efec24606c2ee5f81dbeb109e06c096","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/setimmediate/synchronous.js","hash":"7fb8848a5a0104e14d0baf87909f5ec08b8a78e6","modified":1497910540000},{"_id":"themes/indigo/node_modules/promise/src/core.js","hash":"6485f2208de296d3afc903315c173092064571b2","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/src/done.js","hash":"e0b9a045f237c3df25c928485a4202a28e0be842","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/src/es6-extensions.js","hash":"83d0c519d110316c47346a212b230f139067c575","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/src/finally.js","hash":"7f59ac5d98d13d4deadd49f03316fc6449148f0b","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/src/index.js","hash":"a807a5dfe4aeb0ffb2b7b32eef2d99a203bd3055","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/src/node-extensions.js","hash":"b28daf5dad32d197ac38aa2d56126c63aee3525e","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/src/rejection-tracking.js","hash":"f396f02811ed221a987e18bf6b2d8db7a517fb80","modified":1497560058000},{"_id":"themes/indigo/node_modules/promise/src/synchronous.js","hash":"fd2b7c3c8db978241727ffe131360f66eb950356","modified":1497560058000},{"_id":"themes/indigo/node_modules/psl/yarn.lock","hash":"f5350f6408073b2d45a7d7015f84975728e902e3","modified":499162500000},{"_id":"themes/indigo/node_modules/qs/dist/qs.js","hash":"778cc175ebf3c3c9cfda14994726c9c711b2ad71","modified":1525413963000},{"_id":"themes/indigo/node_modules/qs/lib/formats.js","hash":"268fd11b0d3295eb9e87943e70ef9f1834d573ac","modified":1496129637000},{"_id":"themes/indigo/node_modules/qs/lib/index.js","hash":"9039aef43bebb9c999e4711d367211cc97b710d3","modified":1497471592000},{"_id":"themes/indigo/node_modules/qs/lib/parse.js","hash":"bcbbc2323305b1ce595610a585b916c9662821c6","modified":1504939441000},{"_id":"themes/indigo/node_modules/qs/lib/stringify.js","hash":"f3e93e4a7577328ddcdaed6a4c3fb74d066eea4d","modified":1504939656000},{"_id":"themes/indigo/node_modules/qs/lib/utils.js","hash":"236fcc5250a635993bf6dac33b6024e737a5137d","modified":1525237041000},{"_id":"themes/indigo/node_modules/qs/test/.eslintrc","hash":"19532afcfb2ca609b9687da0d7dd20cdb4ccf7e4","modified":1504939656000},{"_id":"themes/indigo/node_modules/qs/test/index.js","hash":"597801d7cbacf7a83f59b0615ec53af28dd5ab2c","modified":1496129637000},{"_id":"themes/indigo/node_modules/qs/test/parse.js","hash":"c484d2bf4182a9e2271ef85cbb5f9d25b9ca8231","modified":1525237041000},{"_id":"themes/indigo/node_modules/qs/test/stringify.js","hash":"a2f01e48a855accf752c08ea59b5ae5a4d9e522e","modified":1525237041000},{"_id":"themes/indigo/node_modules/qs/test/utils.js","hash":"cd07caa5d78b48f035da3d761e19894911561df5","modified":1497471592000},{"_id":"themes/indigo/node_modules/request/lib/auth.js","hash":"959043ff806795ed9801f509c4bff077231e0fd7","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/cookies.js","hash":"f43e796e4f8388308df04ec93dcb9b5f8b1a36c4","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/getProxyFromURI.js","hash":"9ba23efd9897fa29c71684461903bc935bbf43c4","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/har.js","hash":"62a20877d776f39a5055e0579ffeb04c791d1c53","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/hawk.js","hash":"36f7cd4dbeadd8252506b629e6c7499353d80d52","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/helpers.js","hash":"dde269662f846192111a95dfac3f5c96c7168615","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/multipart.js","hash":"83077c64750f6362c0958d0699b62798c944ec1f","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/oauth.js","hash":"5a9889f3f2b88169257d4a1866779fcddd5d2d3b","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/querystring.js","hash":"47b77094b91220564ab53b30f56cc1f96ac7bcaf","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/redirect.js","hash":"86ac7634a518331071c240093530acd896a61dd8","modified":499162500000},{"_id":"themes/indigo/node_modules/request/lib/tunnel.js","hash":"0bd291728498557a1a489179fcee22006ecc934d","modified":499162500000},{"_id":"themes/indigo/node_modules/source-map/dist/source-map.min.js","hash":"5ef490ae9deea142fb1171323150a652225c57c7","modified":1506695999000},{"_id":"themes/indigo/node_modules/source-map/lib/array-set.js","hash":"ad62f4ee15345ba799a00c59dd226690b4d1d1d2","modified":1496683247000},{"_id":"themes/indigo/node_modules/source-map/lib/base64-vlq.js","hash":"493d3d895198dfaefe88d2b066c272552ea35889","modified":1492467891000},{"_id":"themes/indigo/node_modules/source-map/lib/base64.js","hash":"269e8e4dcb82db12f6e2a6187e7be46bee604ab0","modified":1492467891000},{"_id":"themes/indigo/node_modules/source-map/lib/binary-search.js","hash":"b4333085d02fb4c091361de85d5cb368a3ce7632","modified":1492467891000},{"_id":"themes/indigo/node_modules/source-map/lib/mapping-list.js","hash":"68a9ed5c0a48a384f64efaec04444a464952509d","modified":1492467891000},{"_id":"themes/indigo/node_modules/source-map/lib/quick-sort.js","hash":"e4adf67561f701e7563d7db979e5c9ff8d60267b","modified":1492467891000},{"_id":"themes/indigo/node_modules/source-map/lib/source-map-consumer.js","hash":"f7b2363f0ba6bd65fcaa832bd5a1a8b3ad6b3270","modified":1506695946000},{"_id":"themes/indigo/node_modules/source-map/lib/source-map-generator.js","hash":"38ee40e9489511593f0feb9108700a377021a07b","modified":1506355788000},{"_id":"themes/indigo/node_modules/source-map/lib/source-node.js","hash":"380a1badcbfc18aa40dc5b9ea4cee52dc33ab29c","modified":1506522668000},{"_id":"themes/indigo/node_modules/source-map/lib/util.js","hash":"75608cb748eb9a01273a60a6fcde464831196b7a","modified":1506458279000},{"_id":"themes/indigo/node_modules/sshpk/bin/sshpk-conv","hash":"c870b6d429849b83d74aab97665d0404e1f6f91b","modified":1550480277040},{"_id":"themes/indigo/node_modules/sshpk/bin/sshpk-sign","hash":"75271a4b0392b5549555f50085b991e8d9a3bd0c","modified":1550480277039},{"_id":"themes/indigo/node_modules/sshpk/bin/sshpk-verify","hash":"bed5d9cc90700090b09d785d84f985b7815e55f8","modified":1550480277039},{"_id":"themes/indigo/node_modules/sshpk/lib/algs.js","hash":"456cb47c5dbad4853a16580bf5a119fdcd3961ab","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/certificate.js","hash":"509a53f51324443625e3d3ab1f498f0225f191c0","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/dhe.js","hash":"de90c735bc5770277c01bc139b1864df4390b09d","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/ed-compat.js","hash":"cb351f4afbc015683a402c837482dfd407b0aa75","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/errors.js","hash":"b1492a5f7867af3b22be7135c44764a6e9176d3c","modified":1488421315000},{"_id":"themes/indigo/node_modules/sshpk/lib/fingerprint.js","hash":"fcb020da5f1afb0b272a7c44aad85523fba919f6","modified":1545357205000},{"_id":"themes/indigo/node_modules/sshpk/lib/identity.js","hash":"862587437d1261cac39bc43633e2010e7181c175","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/index.js","hash":"4c77cad52af4a117559e8d040e7e5fcd54e0cd04","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/key.js","hash":"3b017fb74988c51f2f84fec9f8d3d42d51a34029","modified":1545357205000},{"_id":"themes/indigo/node_modules/sshpk/lib/private-key.js","hash":"c6f41d2fec4eae6b9cb878471d944ae2a7541db4","modified":1545357205000},{"_id":"themes/indigo/node_modules/sshpk/lib/signature.js","hash":"549617f1491c572a55d31a0f1e57a8ac79af795d","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/ssh-buffer.js","hash":"d4f6c446907021e26f507ce40f9f54adf7031d78","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/utils.js","hash":"8e77a9209a981e54ba236dfff3322bb8d265539d","modified":1545357205000},{"_id":"themes/indigo/node_modules/tough-cookie/lib/cookie.js","hash":"5a589e00d94e808c426464e57c3982468eacd717","modified":499162500000},{"_id":"themes/indigo/node_modules/tough-cookie/lib/memstore.js","hash":"36e9a243ca6edea4975a77cb4637da999d37dd18","modified":499162500000},{"_id":"themes/indigo/node_modules/tough-cookie/lib/pathMatch.js","hash":"3d403b8aad536db9e97eef4915eb01ef53405323","modified":499162500000},{"_id":"themes/indigo/node_modules/tough-cookie/lib/permuteDomain.js","hash":"d028d9ac2af6241ebc40810eaa1c1d886d922451","modified":499162500000},{"_id":"themes/indigo/node_modules/tough-cookie/lib/pubsuffix-psl.js","hash":"e6f44577dc69725e632107a5f710de480e178eac","modified":499162500000},{"_id":"themes/indigo/node_modules/tough-cookie/lib/store.js","hash":"bcce2205e56bb588b4e6cfcd48a34610a5eccf82","modified":499162500000},{"_id":"themes/indigo/node_modules/uri-js/src/index.ts","hash":"04b3098c3bac270f145ac11ec9d23a5abbf61571","modified":1522461171000},{"_id":"themes/indigo/node_modules/uri-js/src/punycode.d.ts","hash":"958a000735610b62e4495cf34db3d3eeb9b7dad4","modified":1525380349000},{"_id":"themes/indigo/node_modules/uri-js/src/regexps-iri.ts","hash":"f6c7430cf3daaa4e8911dcd715839dcf7b0635d7","modified":1490368148000},{"_id":"themes/indigo/node_modules/uri-js/src/regexps-uri.ts","hash":"5f788850613b451c4d0400b0d9d67b22320ec63b","modified":1522550340000},{"_id":"themes/indigo/node_modules/uri-js/src/uri.ts","hash":"bfe94370e136360032c9519a30ef84c4cb4eb11b","modified":1525380349000},{"_id":"themes/indigo/node_modules/uri-js/src/util.ts","hash":"8231602d00fb0702205e6b80492c26b63d2ac31d","modified":1523374525000},{"_id":"themes/indigo/node_modules/uri-js/tests/qunit.css","hash":"1a2a1d5fa27a1c2c27f619313ebb75b7d27cb7e7","modified":1287256133000},{"_id":"themes/indigo/node_modules/uri-js/tests/qunit.js","hash":"f66f00e5d6e690001827c737a6dc666ef6c6a4d0","modified":1456807931000},{"_id":"themes/indigo/node_modules/uri-js/tests/test-es5-min.html","hash":"12cc04e102a4b50926c5000b8c6d1268c5464ef9","modified":1490368148000},{"_id":"themes/indigo/node_modules/uri-js/tests/test-es5.html","hash":"9292bfa92ba9cc500cb860497cb87dec8873bece","modified":1490368148000},{"_id":"themes/indigo/node_modules/uri-js/tests/tests.js","hash":"a73aa104c22f2ad20d294b61079bda4170df675e","modified":1523369966000},{"_id":"themes/indigo/node_modules/uuid/bin/uuid","hash":"c5b3ec4d8a8f620420aa52a8f3a7cfdff1197667","modified":1550480277058},{"_id":"themes/indigo/node_modules/uuid/lib/bytesToUuid.js","hash":"21f3fe1411c266f0c539291ec70f90fdc50a0151","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/lib/md5-browser.js","hash":"6e2bef8a5892014d27b026e93c00abcba28a173f","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/lib/md5.js","hash":"ec146c8bbb3628e50110ce5fb2e8c5c44eeb175c","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/lib/rng-browser.js","hash":"7886d07e07d82af17c52b5b5debddac5f38484e7","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/lib/rng.js","hash":"be0888747039b095cfc50d0fb6c82105d78ab40e","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/lib/sha1-browser.js","hash":"b5419bcb23bc32a79ac898b5e6b11b27d486ccb0","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/lib/sha1.js","hash":"4f039ea8cae56dc7ed50a2e4595cbe22d7259438","modified":499162500000},{"_id":"themes/indigo/node_modules/uuid/lib/v35.js","hash":"db09248b7cef34de5673a2ea24f8780e9bda27ca","modified":499162500000},{"_id":"themes/indigo/node_modules/verror/lib/verror.js","hash":"ac944c003b5f5bb7bda3bf12b6f2496c573291ab","modified":1493743176000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1548348052000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1548348052000},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1548348052000},{"_id":"themes/indigo/node_modules/ajv/dist/ajv.min.js","hash":"89f2d8dfc5313035ff35a1fb4abc81937fd5722c","modified":1549788145000},{"_id":"themes/indigo/node_modules/less/test/css/empty.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/no-output.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/empty.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/indigo/node_modules/psl/data/rules.json","hash":"cd9ee7ad2c870cfffc88b1da7a907caaf8c9d2f0","modified":499162500000},{"_id":"themes/indigo/node_modules/psl/dist/psl.min.js","hash":"c882d3be3cef3df3e5b62059abc09d73719ad364","modified":499162500000},{"_id":"themes/indigo/node_modules/source-map/dist/source-map.js","hash":"243c68411ad8390b7becabaf7f76d06a32c49c3b","modified":1506695999000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1548348052000},{"_id":"themes/indigo/.git/logs/refs/heads/1.0.0","hash":"86e60ccd5ef9ee76a37afbc28b6a8cc659ef3113","modified":1550482508350},{"_id":"themes/indigo/.git/logs/refs/heads/card","hash":"ee67c3b94bb599d7dbde31724cb95fea246ddbb7","modified":1540036370917},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1540036370911},{"_id":"themes/indigo/.git/refs/remotes/origin/card","hash":"215cf3cc5ee9a6265fb8b0259977357fe8d4fdd0","modified":1550478895210},{"_id":"themes/indigo/node_modules/ajv/dist/ajv.min.js.map","hash":"77cbb2bc1a5db81759e3998d030389f40fed4c42","modified":1549788145000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/async.js","hash":"b92fd01f77b6173d30b61f50a1558e4b7a5e8901","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/equal.js","hash":"c7ede80246da381027e076806d365f59d707eeed","modified":1546470630000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/error_classes.js","hash":"e5d1be01d1186282d7084b0b1635b25c9de0edd3","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/formats.js","hash":"cbc34eb98002090696a7fff0b69967156c41813b","modified":1541366994000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/index.js","hash":"bc8336fc0bea81579271dc06e804a17bd98799db","modified":1549744494000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/resolve.js","hash":"2ec459f3b4e593fe59f7059e153d27c6373ce3ce","modified":1530382120000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/rules.js","hash":"9e44352a307b6b52b69665fb1e13debbc2927186","modified":1549712730000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/ucs2length.js","hash":"d9c7a635a1729fd3c961c2cc40303b88fdca0f31","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/schema_obj.js","hash":"2ab2f6d0a3cf8f771cfda8884b2e674902a91205","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/compile/util.js","hash":"89522aa5ec88d49b1adeb1aea99fdbdf16070afe","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/_limit.jst","hash":"6d458a410022561395ed03e3fe6e685b6160f5da","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/_limitItems.jst","hash":"a5f08855d0b2a882c4b3341122bc5aa07cc0d38b","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/_limitLength.jst","hash":"15a0514666e349800af264c9f6e9ee8c45b92a62","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/_limitProperties.jst","hash":"9dd3a6a07f75c6bc7cdd46feda6a096e0bbf430d","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/allOf.jst","hash":"49ff68e885014484926de4e250c62086a0902abb","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/anyOf.jst","hash":"29416f6f53c67cc8c8161e6cf822572fa6de929c","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/coerce.def","hash":"f0a517b2dd8e31da0c6b808bcc8d7904cf1648fa","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/comment.jst","hash":"930de86311e5800b0d21ee60311e4c75a74d6574","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/const.jst","hash":"65cac846e3a2e69328d396c9dc4ee67d527fbaa2","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/contains.jst","hash":"36e37f3bd5a76e2f0c73a58885aaa2148adfd0db","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/custom.jst","hash":"f517c326ef04765265fa6d5acf4f173e8b830c6b","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/defaults.def","hash":"61a2d3d36b7cac44d1c34400e4cdb8ae322fab42","modified":1546552065000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/definitions.def","hash":"dbac6273765dfc96bcf84436081fdc99db06c125","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/dependencies.jst","hash":"22925e478bd2a4dac309963f2723193676d2c91e","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/enum.jst","hash":"37e8b49379577599a005a7894ed0c18c5db174eb","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/errors.def","hash":"0875027f34a53ade9094d4a40f89e05d473f8df2","modified":1537698056000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/format.jst","hash":"5092f81395ac19ad8dc31b4f26e3ab01b7cbf110","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/if.jst","hash":"5a8ba0af02d9cc2a8bcd454b392b267842376f62","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/items.jst","hash":"d92f27b253b011a601e2e3e905d3a1102b3cce23","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/missing.def","hash":"2b26bb3614903b676ae185b6c21e50b755efacb8","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/multipleOf.jst","hash":"f459196cc2232c4b5213281398d98a3045b37584","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/not.jst","hash":"d56a4d3eb89d13805d9d034f9f06f738c70db267","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/oneOf.jst","hash":"f723d7e025fbb1a77b8269b60063b57c74a71898","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/pattern.jst","hash":"e58b96f12768261e83c1358ca9b32b0fb7c28a31","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/properties.jst","hash":"1905d51b0b54df7c847efcce4a3ec5be4d5bb04c","modified":1546547057000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/propertyNames.jst","hash":"36498e8c7d9c46dd6a82edcec1d0d564107bee1c","modified":1537699721000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/ref.jst","hash":"9e3023769566658e18608eed8fac87103a723a96","modified":1537699674000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/required.jst","hash":"03476ddfca57724405f9a0add4078c5b373a1193","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/uniqueItems.jst","hash":"4fda787abf34112f08ccbb7a6840dd0c169ab671","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dot/validate.jst","hash":"5c027757e4486f83d2634f78fb033670712c96f2","modified":1541882422000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/README.md","hash":"0c215e65e288a0fff457173582f2fc5909c4b30b","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/_limit.js","hash":"29a7e7b7ac1bd3fdf668a89099c1a6d85a8c6057","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/_limitItems.js","hash":"84065362fde2facc8ec61445ca5f8a33de4271c7","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/_limitLength.js","hash":"edd42a334c6d62277032ba3c4ec1258125af9f38","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/_limitProperties.js","hash":"fe68f0ca4c0c262288b8c8c4f9938ccde0b24d21","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/allOf.js","hash":"1c7139787ac3cdf172085f3a1338d62da73b7cd0","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/anyOf.js","hash":"57a3ada629dfaefc438aea656f1396ed142ec2a3","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/comment.js","hash":"f66436b86d39f7957ae1620dc6622a035c326652","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/const.js","hash":"bd1497e489a5705f94f54c163290ca0ad9f3efa9","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/contains.js","hash":"446812e874695a63210fdf6a9f488b2d02d89e42","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/custom.js","hash":"3caee52d9b3a90a66868be0f94caa11f90fcc9b1","modified":1549788142000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/dependencies.js","hash":"4869dacf3739699e56c362c060b07600e482c669","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/enum.js","hash":"0d78a4241b424975a4ebf46ebe0c6cf5670843b1","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/format.js","hash":"277c829939db5d6b085c087477d3a322e8c64b41","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/if.js","hash":"63104379f9495ed10c0f7154df1ce9f9119b33d9","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/index.js","hash":"ed26a5156bd9f684f3617c3700ea5ba3cc8ce6aa","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/items.js","hash":"72f07a942bcb1772c6ace6f29b14d8c3578d6d9c","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/multipleOf.js","hash":"35a8669773a17aea549749b4b1a2068c0b8f367b","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/not.js","hash":"17bc8bd7ba54e44e2e33094c58165e5e204fefe7","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/oneOf.js","hash":"856bc3e06e7a3cff4e3f06dd468c19c6e3ecb1d0","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/pattern.js","hash":"7147321be498be8d610a675c896c3f5b6c5480ad","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/properties.js","hash":"5a5e9b8793b95b8264d8b8708e11846c8d2bf935","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/propertyNames.js","hash":"c71f0dd7b29d3cee01f59d3bb8c58c0d33c2a331","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/ref.js","hash":"92878f3ac42b3d9e4c0a331ae4837c6f357d53fd","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/required.js","hash":"f0fde2ca3dddfc18a3430b69ab868986197238fa","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/uniqueItems.js","hash":"bc8d2ffa2224dde169405c7b27f0349981bf80c4","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/dotjs/validate.js","hash":"651d3468c858bbbff2b1d17b473a1d645d9a4b7d","modified":1549788143000},{"_id":"themes/indigo/node_modules/ajv/lib/refs/data.json","hash":"2e29c1cb400f7f4e02165ae4d898bab103f23ded","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/refs/json-schema-draft-04.json","hash":"495a9cb5d013ccfd70753dce5c4aff98a96b8c2c","modified":1544991699000},{"_id":"themes/indigo/node_modules/ajv/lib/refs/json-schema-draft-06.json","hash":"1096d2305c0f7173cc25027a20e48085b19f3cae","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/refs/json-schema-draft-07.json","hash":"177b34219475baf7616d881ecb5742f0c8b91435","modified":1524950955000},{"_id":"themes/indigo/node_modules/ajv/lib/refs/json-schema-secure.json","hash":"e1decba35a40a39c40de1183f8415cf6a3fc782a","modified":1549136722000},{"_id":"themes/indigo/node_modules/asn1/lib/ber/errors.js","hash":"d12f2ffed9bce548fe961a440ba0bf3af1003bd1","modified":1532987578000},{"_id":"themes/indigo/node_modules/asn1/lib/ber/index.js","hash":"e1a2a7e3cc467b39253564334361ca647b922e08","modified":1532629842000},{"_id":"themes/indigo/node_modules/asn1/lib/ber/reader.js","hash":"4dec016f17c4bd3ec055f0b8154524d2349f93f2","modified":1532629842000},{"_id":"themes/indigo/node_modules/asn1/lib/ber/types.js","hash":"8a41886747dc1f7cde7e4e5cb60e1a3b8a4c813c","modified":1518292051000},{"_id":"themes/indigo/node_modules/asn1/lib/ber/writer.js","hash":"d3b17b8bb9e7404ed0fa11465a565883583a2e4e","modified":1532652160000},{"_id":"themes/indigo/node_modules/image-size/lib/types/dds.js","hash":"cbf841fccd2b6500e101e10cefa706885fb89be6","modified":1494844393000},{"_id":"themes/indigo/node_modules/image-size/lib/types/bmp.js","hash":"b03b5013a1b7603e8075e59c45ed514fd6166993","modified":1494841096000},{"_id":"themes/indigo/node_modules/image-size/lib/types/gif.js","hash":"70b0dbc22c5284795b4aa1cdd11a0e3fd35f1a1d","modified":1497255499000},{"_id":"themes/indigo/node_modules/image-size/lib/types/jpg.js","hash":"ea1582bbdd4dfed0f3e0f0490f56bab1f9459c71","modified":1494851259000},{"_id":"themes/indigo/node_modules/image-size/lib/types/png.js","hash":"e7c325ee6eb482a332b8135024e5a454c5736af5","modified":1494841096000},{"_id":"themes/indigo/node_modules/image-size/lib/types/psd.js","hash":"79f29c37b6ffb29a9b242340d2b614ce199aef9c","modified":1477387673000},{"_id":"themes/indigo/node_modules/image-size/lib/types/svg.js","hash":"4f59596b9a0f83ef17fe77c0f222e48438d19f17","modified":1494844323000},{"_id":"themes/indigo/node_modules/image-size/lib/types/tiff.js","hash":"25cef33acc6529588eaba83bf11141f2d38b278b","modified":1494841096000},{"_id":"themes/indigo/node_modules/image-size/lib/types/webp.js","hash":"ce7094ab05b922e48280b0ca3908a04ac4fd8cf8","modified":1494841096000},{"_id":"themes/indigo/node_modules/json-schema/draft-03/examples/calendar","hash":"3e53cb296ba1799f39c5a00bc4627fa10e26e165","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-03/examples/address","hash":"b6e70440f5faf725b978da4e92f6f39100377674","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-03/examples/card","hash":"c1405e471f81bbb4eea94c2ef85fa07195a8ad80","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-03/examples/geo","hash":"74d8c66f1ba74c6cd330b8acd5948efb5f2879e4","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema/draft-03/examples/interfaces","hash":"9666b12a3d05e526886aa2650f0439d32b25f0dd","modified":1289526444000},{"_id":"themes/indigo/node_modules/json-schema-traverse/spec/fixtures/schema.js","hash":"a900ee83c77812d766a338c77661982a3e232eac","modified":1525807808000},{"_id":"themes/indigo/node_modules/less/dist/less.min.js","hash":"e37c6c4cd00a636c7f03a2dd509ecaee2f19cec9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/constants.js","hash":"463d1aabaaf1084ed875b920e11a36c96e7e15f2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/contexts.js","hash":"8050a5080421726116365755bc73525d23feed5c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/default-options.js","hash":"385e06a387ed68439248d44cebe9bb1650bf41c1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/import-manager.js","hash":"acada9cd9e0df115f1e496a3f55000b999c779ff","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/index.js","hash":"c977ff712148ba27e62ddeb1568e7882627ad815","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/less-error.js","hash":"a7576b09999676273bba07ad022e881d007690af","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/logger.js","hash":"6d1d0b738bdd35bb6a52162d9fad06ceb17dd90a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/parse-tree.js","hash":"370afd99f60e23d6ed165b6e61c0527ff64f1797","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/parse.js","hash":"6c01a09ddfd3dbda53cba4c08b41ea43e1a2ad22","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/plugin-manager.js","hash":"a5575c75cb4bf24eda394256710479ab88d701ae","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/render.js","hash":"0d3e7f6219a6097adf504c733250428f310db487","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/source-map-builder.js","hash":"f59e5ea8847ddcabd9045014192f85a07e7baa54","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/source-map-output.js","hash":"610503a7e3a87a477902c9956a4f0a70e1d62d00","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/transform-tree.js","hash":"9e2ddad6cf8282acc10b147e3d0be8108365d46f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/utils.js","hash":"6704bfcb03da5fdc131b84861b412662b70f2969","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/add-default-options.js","hash":"2cedf7f4cf8803209475f449403052fd1a6b8752","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/bootstrap.js","hash":"e9c4759f01d8f3b259b941d0cd3210a33440dd9e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/browser.js","hash":"133fa4bb07acd717916d4e54dc49d64776a0c854","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/cache.js","hash":"a1b2398abf4940c310dd5816e0e8d1e21dca9c6d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/error-reporting.js","hash":"554efa504d99f8daae5c38bd3a71af265d96fe13","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/file-manager.js","hash":"9402232dcde002f1c122e5260ba478d7a980c437","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/image-size.js","hash":"ae7a1111c4dac094805a02c93d52340a51eb1fde","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/index.js","hash":"80b7d97070fea7f7afa78daf5fe963bda0926b8a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/log-listener.js","hash":"754dccab42d010c818e3f71068eb9b9e7ddc99cb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/plugin-loader.js","hash":"3ff8665b42fb67e6e88358d39eed1d1f3987367e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-browser/utils.js","hash":"875af2662eb80478d7ab204537d180f35c6a47f8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-node/environment.js","hash":"ad43bd8c2f91594e6be074ca2267035b5bfded2a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-node/file-manager.js","hash":"ba1f10fc4cc9355af66ee2cb0d0d0789f57e1e52","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-node/fs.js","hash":"a924d00e6f6dc8121c8bed2dfbb2ba1b972a2fd4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-node/image-size.js","hash":"baf6c2d2fa547b936a509cade7e36abf3e9255af","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-node/index.js","hash":"de0221144859063e8b424bd4682eac8538e77c12","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-node/lessc-helper.js","hash":"f82caaf2e71c84ed12b1fb50813f21df43029581","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-node/plugin-loader.js","hash":"9affab1cbfe3cd3edd14394f6d9299c75c42475a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less-node/url-file-manager.js","hash":"3d7475cabc3ce1d399eb6da5ce8695a2524cc2c3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/source-map/source-map-footer.js","hash":"1dbe2d8fc00b1b1a17eb24417f871befdf4956ff","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/source-map/source-map-header.js","hash":"1cd2cb55848da89f4f84a1041ed5697bbe2778a2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/common.js","hash":"b25ecf60b74a34d84d32a2e9d71863b80e6f21f5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/jasmine-jsreporter.js","hash":"da66ed6187cff2bdf8599724fd45de85efecfc9d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-VisitorPlugin-options.js","hash":"69754bee761531475b0e7de267b9d3f886e66f0d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-VisitorPlugin.js","hash":"08b2133eca31adb90f467c4e310bb411133fb6fe","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-browser-options.js","hash":"8e527870e8866afba16a4d4d57927bd6f2873ef7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-browser-spec.js","hash":"1d0f1a423599623a5a66eb420f1cbb4839db7920","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-console-errors.js","hash":"6a61edcc28ca091b2a4c8f52a146072798e6095f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-errors-options.js","hash":"25a91d3081b41576e694a961bdc0ad188ad02165","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-errors-spec.js","hash":"008a7b0a83c5bd457f93c18710055de285f8b5cb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-filemanagerPlugin-options.js","hash":"975ecbfefc61f7c004dcfc16bc48a76b2f969f29","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-filemanagerPlugin.js","hash":"72b01913e7fd58c575794a0af7347bc0c79ae95d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-global-vars-options.js","hash":"196901f460b4e0f72a55b27fa3c4b8f3836ee007","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-global-vars-spec.js","hash":"0b71286d45da2bc4b13eb44c0a55113438cabdd6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-legacy-options.js","hash":"ff52ce6527b90f6e4320f95974184338e8499760","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-legacy-spec.js","hash":"356c42952b6992ada0da4ee65edb361649de9082","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-main-options.js","hash":"0c27d143fe043f924978bd366b168cc065f9aae8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-main-spec.js","hash":"7fdd9b23a0f9f087034aaf575fb6ffb31eabb973","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-modify-vars-options.js","hash":"e01e084e1203a591f9a94428aa9925b022a2e438","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-modify-vars-spec.js","hash":"c0f67f7212abd5d71a0961f622750256d8db1ed3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-no-js-errors-options.js","hash":"e05214274b6323d787b5c8e4e460a0bf597d063b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-no-js-errors-spec.js","hash":"20975aa081439b13bb4a24bed7f5188ea6bf1f2a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-postProcessorPlugin-options.js","hash":"35e13a9f9cb821831430b055323ac9888079faaa","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-postProcessorPlugin.js","hash":"70d05880b28b4f9d245cf7d4b171361108f26833","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-preProcessorPlugin-options.js","hash":"0be1d8a0538950ac68bf9732169eb51c0cc0ce91","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-preProcessorPlugin.js","hash":"d1c09f0d353cfee3163008260ed27251a51c4301","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-production-options.js","hash":"1c1d67d50250c170eebbd9b59ebbe1edba706197","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-production-spec.js","hash":"4e4f2f985f1c583416ec3c659683dddca38b340a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-relative-urls-options.js","hash":"3353431ac7f4e211ebec567bdb3c5fc5e927dfcc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-relative-urls-spec.js","hash":"a07a298d0e08524cd28efb2f1e182281ef18dc26","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-rewrite-urls-options.js","hash":"51943ffed16d978b04e3412ed766a6e4cc514b5a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-rewrite-urls-spec.js","hash":"4258cf8a3e171772adc011337e75de35e6b92cfd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-rootpath-options.js","hash":"5e290ee1b6ea57c1922dad824ff120e514ff856d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-rootpath-relative-options.js","hash":"eedbb6b6ccda63d745ceb090e9e31216f34fed86","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-rootpath-relative-spec.js","hash":"fe20d058ab12c3c9e929f49c2bcc11407ebcfce4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-rootpath-rewrite-urls-options.js","hash":"40c6ce7f0169ce424cda65118be3860343fca37d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-rootpath-rewrite-urls-spec.js","hash":"48cd204dc34a0148257c3154b3bfd1ac6050ee8e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-rootpath-spec.js","hash":"9180047c9ce2b1f32b4c5d3b861d41d45c29c20b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-strict-units-options.js","hash":"8cbf0058a5a3be72d3e2be6d7481615f1e1418b4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/runner-strict-units-spec.js","hash":"c494b66d74e3f515dd895ae8b3321c4b93517db1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/test-runner-template.tmpl","hash":"08e6bd37dcbbd0dafb8756cb3e0077b8560c575c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/calc.css","hash":"7810dadaa171b4641b4d6e9d97ded35ce0e1b923","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/charsets.css","hash":"c6a36f4dc3198897a189d638de272733f99e5157","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/colors.css","hash":"f3f4ce05e016e9c27231d07120f66e4d9d7df1d6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/comments.css","hash":"4d7e264e608ee4431d3e9b1cfced5bb49bb2ad68","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/comments2.css","hash":"4e91ccde962b2119753e36709a077f47b8c92e96","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/css-3.css","hash":"ae61125ee7cbe99e1fac39199ad7df2319ad7db9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/css-escapes.css","hash":"26bf2c1ee9380e4eb1192b4a2b879f118d124493","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/css-grid.css","hash":"1cd85c35a90665af9eed7bd358f38c9f8ea8f8c7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/css-guards.css","hash":"9d90b350466ea6c21e7ece0d4b86dc426e8b578f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/detached-rulesets.css","hash":"4d6b9683a62e789e1697858b36bef38458120f95","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/directives-bubling.css","hash":"31642cd21a0e62d75bfd691fe282a4bbdc65a329","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/extend-chaining.css","hash":"e3d59baa67a30965d971eaf540cb309d9f925e1b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/extend-clearfix.css","hash":"9c675cf3ca13a3fb455b5d56577d84ebb173b9cd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/extend-exact.css","hash":"da3acb3fda9b5507e4d14973111811309a415efe","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/extend-media.css","hash":"3dace55e64e873766054ffaae1f7a25ec11c8e75","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/extend-nest.css","hash":"7417dcd5ec934fccff553df38e5ed373ca631e64","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/extend-selector.css","hash":"7f1a919ef7e0334cb36ca05ea310574454b59985","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/extend.css","hash":"3e211992b4562a02f8c2fb5224aba72cbf43bba1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/extract-and-length.css","hash":"2c7cff210b0ae938fd575928520512d5ac3faf1c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/functions-each.css","hash":"30495d60f79f144c02114413486d33c8bdb993df","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/functions.css","hash":"123061f21f1be1207e33506cb41b6c008e7734be","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/ie-filters.css","hash":"df7a5430782caec45f3e2912778771a482c88379","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/import-inline.css","hash":"e89f3d9ffd05e32761a69b84376d4eb1844d3f83","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/import-interpolation.css","hash":"e75918f839ad5e8e5143d076e90f9e38b2ea5518","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/import-module.css","hash":"3f1c6d719cb81ffe7119dd369d4636cb1f18f0d6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/import-once.css","hash":"9698661cf1b28a755dab35ea4c956174cf2c0cab","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/import-reference-issues.css","hash":"ccb992aa6419ae4cc0cb87a3e018c5073f4beb76","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/import-reference.css","hash":"1d29ae9d8f2f34825b9e659b70ba6885dee165cf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/import.css","hash":"4471921179f55565cf3eda33c7096bcec4372579","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/javascript.css","hash":"dc6f0ce4a5bb1152b94001fd8a78cb1b617063de","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/lazy-eval.css","hash":"9006f68994ece9cba7bc10b14e4b6d8370d30aa0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/media.css","hash":"9b62bdd4b767c08e7080ef4d89a01205e897af4d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/merge.css","hash":"e6fb9f81977c977ae57f57aaed63d69a10abc653","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/mixins-closure.css","hash":"f90aed3073368266a98469d0202f0b3eac22a0e7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/mixins-guards-default-func.css","hash":"04f73a80e444bb1742688a8e79fcd64b2fe814a0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/mixins-guards.css","hash":"10fc6f744a686e7f0f01ed7bdec0028531f897b6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/mixins-important.css","hash":"52ee9738e1fbd278fcb80de9506cbdad9d9eb260","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/mixins-interpolated.css","hash":"316137ab4211067dbbcbef0587f70578e110f33d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/mixins-named-args.css","hash":"ea9f1f9b340f90fe703d2cbe230ce7fb38cd45f0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/mixins-nested.css","hash":"7c9cb8d80744189e82dd2899da91d57f53e58e94","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/mixins-pattern.css","hash":"b2dbb2d0ae811d050db2738b439f7cc60b948c85","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/mixins.css","hash":"f59d3e210f1cb1ad6c8ab2b6a27d28fe2a734940","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/operations.css","hash":"18d1002a78f9e97a4a5326765d3e72364d4714e2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/parse-interpolation.css","hash":"9cae93ac0a1185d359998a53718d93b4bc3e39b1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/permissive-parse.css","hash":"00d63f79543b94fcdc218e2320b634a13479c034","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/plugin-module.css","hash":"c2ff9bb1aa6551efdc7b782b46130e6509f05f9c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/plugin-preeval.css","hash":"d8bd99eb5dea405279cc4340aa04d2f6977f8db9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/plugin.css","hash":"c35a842be2d616294410b079814eced16feead79","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/property-accessors.css","hash":"a3d908fddcfa43067d3dc18ba2e0f163e423a75a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/property-name-interp.css","hash":"6f3df5b1d707431d73330c94f858ad0c5e0f8d4d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/rulesets.css","hash":"acd1e5faa6252e5f2822111e443111ac5cfc5aa7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/scope.css","hash":"d3cda8e0ae1f74dec262a75c877c96a5209ab92c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/selectors.css","hash":"11ac0ea709c0032cec0103a078f3463bbdd1584a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/strings.css","hash":"6404282aa849e5f4e8e2d245c199226c1902cb9c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/variables-in-at-rules.css","hash":"1c52c89f590729d0f5badc20e2189ec54f5a2860","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/variables.css","hash":"ae4a0693db0575c073a43b3116e6f929be22fb76","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/whitespace.css","hash":"1ac527e7b98941dc644b70c254634484d52ba836","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/data/data-uri-fail.png","hash":"45dc5ed2196779f9e270e447e91949ec2a47f304","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/data/image.jpg","hash":"a5e36c3e37dd9939272248c7694f05494379b446","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/data/image.svg","hash":"39b71342e51ce3c5c17d96356f2a524652c1fabf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/data/page.html","hash":"8b7068057c89cb72652406b7814053711e56a13c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/import-module/package.json","hash":"c853d0f9c59fc68352a4a370d0c81bac4f619b11","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/calc.less","hash":"d8e149d6cdd936e0568016adc8bfeecdf778d5a2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/charsets.less","hash":"c91176665b82bb449ef7aa40b7102c36457131e1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/colors.less","hash":"1670b35277f21986ff799b449d49d6844b6c7d52","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/comments.less","hash":"95150164a4d41a22130494313273757ea9aa7f9e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/comments2.less","hash":"c27e244bb3708b8605097ccf98b237eb25d6453f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/css-3.less","hash":"6d8c78f4772222921032be76e4b9a9126c187efb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/css-escapes.less","hash":"93ca91d05dc118287ec8693a62b3748c3bb0288f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/css-grid.less","hash":"c8594f2a403ba5a601ddb01572e2693753fb5e3e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/css-guards.less","hash":"6deedccd0e808a6bdb3b5eedca311b750d5c7f6f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/detached-rulesets.less","hash":"ca3a59b8669d8bcc3888475b2d6e2dbe664cb147","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/directives-bubling.less","hash":"ad07a2c9f772d0c750a83afb06631473c94cc811","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/extend-chaining.less","hash":"f073f00c83292a7fedf0d41f1650c33956babc13","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/extend-clearfix.less","hash":"367ae542275273b445784c025edd11495e074e89","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/extend-exact.less","hash":"28bbd596d09d15b4c7866c0f80407a16dd6797eb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/extend-media.less","hash":"1493021219847ae7d85f6097cd85726928f0a0e0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/extend-nest.less","hash":"8e187ee519b7a623b8f356bec7526aea49925889","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/extend-selector.less","hash":"a21c5e1bbef490e43c5ac1492b646dc890cc82b2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/extend.less","hash":"505d11c0d6e1d650010b40839cdad9fa30f5b1dc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/extract-and-length.less","hash":"b2b369ba5ddc4ab5a8dbca96b61beaa406041ab5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/functions-each.less","hash":"5c6ff9b512b6fd073197eba0d15f6866a44143d0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/functions.less","hash":"56522da2dbea66fcbeefcbe0821be99a2b1265d5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/ie-filters.less","hash":"632bd65d56ce64ed1084f63508a46b39581ae75c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-inline.less","hash":"20401c1c2ce90354d297510797e3d910d2414c1a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-interpolation.less","hash":"77b01e9621b1af077516998eb2a1947e0a5aad4c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-module.less","hash":"098866fbff9c24629c12f99ae1bb2a0bd6671299","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-once.less","hash":"f713e2b03a763d25edb11ebbe2f89f79389824e5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference-issues.less","hash":"dba7b8ae747676e0338dc34100c72ee4dccb0609","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference.less","hash":"332a7a8c13bb5b6cbf8b5a57ee825b2ebfe562d0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import.less","hash":"9d9c4610f46cf60440bfdc5e79814c44792ad78a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/javascript.less","hash":"51f179a01c27e725d74c0d96772def7e25f9f978","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/lazy-eval.less","hash":"a1183a0ee4dad1310856dcd1f52363204ecbdde5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/media.less","hash":"897b10d94a0f56b9ff0d1db5321cc33bca9844b6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/merge.less","hash":"c66e5c4cec790c23b85a85c3195552bc54e6ee88","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/mixins-closure.less","hash":"61cbbd586b7ce74082600d529e738480b99fc1e8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/mixins-guards-default-func.less","hash":"0ddad558280f0ed7934e35190f0cd9c30a745c50","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/mixins-guards.less","hash":"bb7ccbb67b53d2e980fe49e567cdea5caf1ec29b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/mixins-important.less","hash":"8ae965b44e4f1e6c786553b7e3d3b370864a273d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/mixins-interpolated.less","hash":"847fbd633d4cb0b8f4688f6a66cf407268ee71df","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/mixins-named-args.less","hash":"2866415bbfb3efa711b51460ed873e8a77f89839","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/mixins-nested.less","hash":"a7a40b7c720d2e9610a6ced8cc7bc36edbeec0c8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/mixins-pattern.less","hash":"bf64fbdd35f9e9a2fdd34b359c7046e916ba711e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/mixins.less","hash":"b19194a2e492f7e3147cae6cb9c8c145785dd777","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/no-output.less","hash":"5c5d2f708cbc698e5649c4bbd5f17ea57e6b6b8f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/operations.less","hash":"d44d54d16dc93e33985dda5c86411814a7254ace","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/parse-interpolation.less","hash":"a08d2f977c6942812c9e0264e1fc730b6f759154","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/permissive-parse.less","hash":"6f28d4e03a4de5c3ff4db0ac84186b7ca87240fa","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin-module.less","hash":"3cca57f2a9d7dd4ed97f4b7bd4e418adfd710a1a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin-preeval.less","hash":"3c382634d327dd3dae6f8747f8192122a42ae8ba","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin.less","hash":"da13c016c590fedc0698e637feaf5c5d3f5b92a2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/property-accessors.less","hash":"dbbd3cb0a1eb579a7ff2fca28279d4517fc9f81b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/property-name-interp.less","hash":"508c85554b0fc38df9f652836b2e00445a3f5188","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/rulesets.less","hash":"7fe1a3a96c03b234ab7ddd33de96f3102132c29a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/scope.less","hash":"511668649552b13b2f1e7af12d6b0c248d5b57e4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/selectors.less","hash":"7ae42d3059524e51fe5f9436cf7c8a8fd462c4fa","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/strings.less","hash":"65831fe8ce502680877eba885b6fc66ef17fdce5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/urls.less","hash":"5580f35e301ecabd94a9d22e7e52cb5a095ae3d0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/variables-in-at-rules.less","hash":"b135d5328b4bd57624b863bb96ceff1937b7f419","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/variables.less","hash":"cf91f2b9754e6f600bce3f463c4994e3fa20d61d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/whitespace.less","hash":"5bb6c228c7d90adfa138f3bcb6ebac409ce6f5b4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/calc.less","hash":"1056c3cd4b0b181ecb9378960030b8da810c380f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/charsets.less","hash":"0af20e3ff60da37652ae382ac4b403cfb7b2d8ac","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/colors.less","hash":"363c53c82c5c3a15db9b4fe8e11e1d0e9013a0ca","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/comments.less","hash":"e26ad3d45f21396f3c1f71c8bda56a775bb508e9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/comments2.less","hash":"bfbaba97242b35eab080bc83f7d37c2d269a6c5e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/css-3.less","hash":"5efe2798d66ee4cdd38d99b1695342f2649c2f29","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/css-escapes.less","hash":"dec53f6062a3716a8a7af10156c4b68fb91adbcf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/css-grid.less","hash":"d31d95b5c9571aa8c71a083d1a67dc27e76cdb4f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/css-guards.less","hash":"2b3e6ec3ee191c7a17ae0fc81972ed2798279e81","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/detached-rulesets.less","hash":"94ca427d0d13b462c35576ca455eb31238e52091","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/directives-bubling.less","hash":"0a0dc68204eff6e5edfddbcefff62fa932920833","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/empty.less","hash":"57218c316b6921e2cd61027a2387edc31a2d9471","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/extend-chaining.less","hash":"32498db68fe861c8aaa6f11d1c281af57982ca36","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/extend-clearfix.less","hash":"7a4a228857f16e6419387213abd4a77dd2cb9d78","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/extend-exact.less","hash":"d33b138c423637ce1c728c57fc949c1620a354b6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/extend-media.less","hash":"b25e9ff82484422d9f52e7dd2da23718eadc2a2d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/extend-nest.less","hash":"7034f1a51e9a4048f53f982eb8efa1421e03cf03","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/extend-selector.less","hash":"a0d8abc9b2af491c1a208b5a4d2a0ef6e1835af1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/extend.less","hash":"d24a50798f2f37dc4d7354032da885f2c605bf68","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/extract-and-length.less","hash":"50e64a02e36be5d52a3aae0bfec0b69f12c2d6fb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/functions-each.less","hash":"0de60ef2760b9ccf5644de4b9b17a22c4eff54af","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/functions.less","hash":"73ba7ab804226f4c257ade73a2a50ccc8b07e7b9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/ie-filters.less","hash":"737942e4305b3f08ab148eb93f1b7271653c19a8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-inline.less","hash":"f24287ed0c8e6755bfe541e1632f6f0bbb693b62","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-interpolation.less","hash":"97df182146eb2a07e02d288baf87e8cac8862d36","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-module.less","hash":"1b7413dfcd5b2dfa8b3caeb6099de70a3ef454cf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-once.less","hash":"60a407aed7b5198364eb2400f9cfd98a4478e34d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference-issues.less","hash":"eb460e8b4219a91d4f1399461070047008be1b36","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference.less","hash":"8961aa5efb712cb4b474c83a261ea8f2ee8b4f6f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import.less","hash":"c85e37c91157c223ed4c32f4b746f6c89750b061","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/javascript.less","hash":"4b088fcbf612a64f82220a042b201922629fd7cc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/lazy-eval.less","hash":"2415f18ae0e4a31456613993c84bdb9d60131542","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/media.less","hash":"399c4102ee145c1485073f0ea08022eba6b4875c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/merge.less","hash":"c2d8eca400525ddb1283dda3c5743c3c641f0f22","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/mixins-closure.less","hash":"1092793870c1b33a4cf800ea77db78dc69574245","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/mixins-guards-default-func.less","hash":"4edda415eb02d2f02f465c12f16acfb4bc410ff8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/mixins-guards.less","hash":"f9e8601ea3797e9bfabfe46544a4dc38633f781e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/mixins-important.less","hash":"9b15ad68f3ef35c5f9bc146e628b519549d3b7bb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/mixins-interpolated.less","hash":"720282eea055cdca9ac5ea73bc5c9a3e666b6e07","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/mixins-named-args.less","hash":"136567810ad6931796ca4ae05c7574243fe416d1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/mixins-nested.less","hash":"f5ccafce5363ef032693df67b7149c3bd42e0266","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/mixins-pattern.less","hash":"1df90a2f7205d87d9814e34edc83c24f1b1a36f8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/mixins.less","hash":"72b521ae93c2e995ffc10696b4711f55f366044b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/no-output.less","hash":"327a98089ad6e6371df63cf066f265cd902c8880","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/operations.less","hash":"5b737497d41457389b842921c5adcc4b271858e6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/parse-interpolation.less","hash":"40b08fb21aec6c84cb57bf472969dfbf22dbd8a5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/permissive-parse.less","hash":"685001c4a672c383402336be4f7b175ac2272d4b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin-module.less","hash":"2dcc39892742dcf536da474bf04f1e572f6dd0c9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin-preeval.less","hash":"88860d180b84c3b33c2516f93e3b2f56ad729f09","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin.less","hash":"d5258bdbebcb224b3f0f19d59304072fa7207733","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/property-accessors.less","hash":"f3c57763865bd58816e411cfc8a760958d838c1f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/property-name-interp.less","hash":"29b1292cbd198460a69013139485a8af0c3ec6bf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/rulesets.less","hash":"eaa4e7582f623a009eb38ecb02753e6451b18c45","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/scope.less","hash":"6fcd8f07ebfc29c59dc5425a8dfedac99cea3308","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/selectors.less","hash":"b5f95e3a1c1d2bbd2be469adfb4bc470e64e7aad","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/strings.less","hash":"8d07b77a3a4bc5bc5d03496365525a04bc39e163","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/urls.less","hash":"c382704ceeef02e119267051698009c15bb19968","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/variables-in-at-rules.less","hash":"2d1502c109aca97b236bd40d34021bc0e314ad28","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/variables.less","hash":"5dc49234073f91267455d3df17532a23676f86b0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/whitespace.less","hash":"d10ee1792e4cdf08e3577b8f50287f13a987ff52","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/sourcemaps/basic.json","hash":"1a1b8202ae414f5c158a6767c8047b69091dda03","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/sourcemaps/custom-props.json","hash":"9ddb173b9e0f513485878bb3fb8de3a15740782d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/sourcemaps/index.html","hash":"329972ca4f7d7fe5bf8f0ece18f66779fb98e4c1","modified":499162500000},{"_id":"themes/indigo/node_modules/performance-now/test/scripts/delayed-call.coffee","hash":"e4f912e6ef8cd309316302052de85110e44059f3","modified":1484000812000},{"_id":"themes/indigo/node_modules/performance-now/test/scripts/delayed-require.coffee","hash":"d7dede6d953440f6ff3c71e3a5676d5d00f523cf","modified":1484000809000},{"_id":"themes/indigo/node_modules/performance-now/test/scripts/difference.coffee","hash":"4a22bfede1f6f6ab3224c20db5132f957c2a12bc","modified":1483841832000},{"_id":"themes/indigo/node_modules/performance-now/test/scripts/initial-value.coffee","hash":"c71cfd6cb07e088440755a867c2082a40276cef4","modified":1484000674000},{"_id":"themes/indigo/node_modules/psl/dist/psl.js","hash":"c82f4c129ec0650150b864656595959e6ca4b008","modified":499162500000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/dnssec.js","hash":"a1fe32a1c83ca6a7ff22f3e33dd3dc5db25efcbe","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/auto.js","hash":"8abe6e50315b25fb98f72db675d5b85d9a4be5ff","modified":1545357205000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/openssh-cert.js","hash":"1c64265f089e7324b7bd21aee5ae150e60e5363c","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/pem.js","hash":"d48582f351bf4e3c8d998b0ed530c335a9d6c53a","modified":1545357205000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/pkcs1.js","hash":"2c3c0d6eaec70316d822066319bf5b304e28c84b","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/pkcs8.js","hash":"e371c7335004e81013eeb161ccbee0c09d948496","modified":1548279249000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/putty.js","hash":"409bea5049f08db667a1ec6279d8cd745d88cc7a","modified":1545357205000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/rfc4253.js","hash":"f9cf4a4a600db418c97b91a788253936373e1996","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/ssh-private.js","hash":"81059e3cc027b55923d1742ff195f6a81ca5b808","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/ssh.js","hash":"c8966077b15dd7244605704070c2807d74abc180","modified":1539302377000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/x509-pem.js","hash":"649d1fed517cac91a479b027afc5012fb5d2d89b","modified":1545357205000},{"_id":"themes/indigo/node_modules/sshpk/lib/formats/x509.js","hash":"5f049035a7f9b8b799dc817e769ef6d01cf23423","modified":1548279249000},{"_id":"themes/indigo/node_modules/sshpk/man/man1/sshpk-conv.1","hash":"a64a4769ca648e2047d255bf5237ce051f6af15a","modified":1452565517000},{"_id":"themes/indigo/node_modules/sshpk/man/man1/sshpk-sign.1","hash":"742f5bb2986ad635eb081bad695573cd6826c96b","modified":1452565517000},{"_id":"themes/indigo/node_modules/sshpk/man/man1/sshpk-verify.1","hash":"a5c70f82de5313ee103ba9bf3cfb9774465de370","modified":1452565517000},{"_id":"themes/indigo/node_modules/tough-cookie/node_modules/punycode/LICENSE-MIT.txt","hash":"d7384cd3ed0c9614f87dde0f86568017f369814c","modified":1408532732000},{"_id":"themes/indigo/node_modules/tough-cookie/node_modules/punycode/README.md","hash":"c332a96ebde88c232159d794e4d417a6d834e1e1","modified":1424815497000},{"_id":"themes/indigo/node_modules/tough-cookie/node_modules/punycode/package.json","hash":"3dacf2db94d918abbcb97f907e9d043a4d3bcf9b","modified":1550480276394},{"_id":"themes/indigo/node_modules/tough-cookie/node_modules/punycode/punycode.js","hash":"cc7535a3f0235f4b3ad0030b16f418eb2abf454c","modified":1458437195000},{"_id":"themes/indigo/node_modules/uri-js/dist/es5/uri.all.d.ts","hash":"d4324455b07945e1532bcfa34bae846af6c4415c","modified":1525378838000},{"_id":"themes/indigo/node_modules/uri-js/dist/es5/uri.all.js","hash":"faef07b7550055eb3db406ebb523941308156663","modified":1525380350000},{"_id":"themes/indigo/node_modules/uri-js/dist/es5/uri.all.min.d.ts","hash":"d4324455b07945e1532bcfa34bae846af6c4415c","modified":1525378842000},{"_id":"themes/indigo/node_modules/uri-js/dist/es5/uri.all.min.js","hash":"5d1c8363b0b1eafb671506adfab85e92daa4b404","modified":1525380350000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/index.d.ts","hash":"b1ba4e83c7b85c425348e42afbdd6623d58ec116","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/index.js","hash":"a0d37347c70b264ed70e333f6970c39f9621d2ef","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/index.js.map","hash":"4a43fd520e4c81e0ef4a7840289d99b097e0596a","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/regexps-iri.d.ts","hash":"6655ab97cac00bd3d0c52793653bd39a96939093","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/regexps-iri.js","hash":"02cfa793d18c0a40d35f39b9e1897b9797121d0e","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/regexps-iri.js.map","hash":"523cf639bad4c664cfd93f9f084b7458128f341c","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/regexps-uri.d.ts","hash":"eba9707106c4287ad5b00db8477f23b9930c1ab5","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/regexps-uri.js","hash":"5b1d3ca1d46a19b0bf3b64d2f3c4376d20557e53","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/regexps-uri.js.map","hash":"c5d6f4a6fde82cf5c364f718626020b8e82ee971","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/uri.d.ts","hash":"d4324455b07945e1532bcfa34bae846af6c4415c","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/uri.js","hash":"8ef3aa2bf904853b749f93453f448bd8a5d42ae4","modified":1525380350000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/uri.js.map","hash":"cf3a3e6bee6836b6b0a8246a150597718fc067ec","modified":1525380350000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/util.d.ts","hash":"6e78858714bb05d182a73cf5eb5e6f109a197c48","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/util.js","hash":"7a005e716e192efae74e9fb59e6e5e95c61ffb02","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/util.js.map","hash":"3ff2f3e25c2ee01972ea660cdb920f666bdbae51","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/src/schemes/http.ts","hash":"0677c6506506fd7cd4787006a271a72bef32bc15","modified":1522462102000},{"_id":"themes/indigo/node_modules/uri-js/src/schemes/https.ts","hash":"7d2cce6fbbb3f4cdf198a7f16ead6d74c11f5ce3","modified":1522462102000},{"_id":"themes/indigo/node_modules/uri-js/src/schemes/mailto.ts","hash":"c2e5f71d53c48abf356e7eae2142342dd7c9fa44","modified":1525380349000},{"_id":"themes/indigo/node_modules/uri-js/src/schemes/urn-uuid.ts","hash":"da56bdbb6354e8661ebbe44513bf5875c70b6589","modified":1522462037000},{"_id":"themes/indigo/node_modules/uri-js/src/schemes/urn.ts","hash":"84542997f2b0f5df1ef20b0e1659b44c1a703471","modified":1522461415000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1548348052000},{"_id":"themes/indigo/node_modules/less/lib/source-map/source-map-0.1.31.js","hash":"a83b4c9a14c85d0a9b7188b78ce4b19df7d81dc6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/urls.css","hash":"b6952dbc926ee5548904c6649082e33b799953e2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/sourcemaps-empty/empty.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/indigo/node_modules/source-map/dist/source-map.min.js.map","hash":"b6ed18620ecc607f89fd710546f53935d189485c","modified":1506695999000},{"_id":"themes/indigo/node_modules/uri-js/dist/es5/uri.all.js.map","hash":"f265088db905ae5cc183e982c5a2fdeb400ac5d1","modified":1525380350000},{"_id":"themes/indigo/node_modules/uri-js/dist/es5/uri.all.min.js.map","hash":"41917e25135dffb916236131ee738f6b23c2c43b","modified":1525380350000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1548348052000},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"ee67c3b94bb599d7dbde31724cb95fea246ddbb7","modified":1540036370911},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/card","hash":"7ae517dbbf189f103b6d806cf240e8a6ac30d19d","modified":1550478895226},{"_id":"themes/indigo/node_modules/ajv/dist/ajv.bundle.js","hash":"cebb2cee9b9170fe7f473e9304e7d5602fff1a97","modified":1549788145000},{"_id":"themes/indigo/node_modules/less/lib/less/data/colors.js","hash":"6148adda35519cc76d6820f417e8de96872a7e22","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/data/index.js","hash":"7be3c78df577f194b6e81de1aa19637112ea8e73","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/data/unit-conversions.js","hash":"f4a00411da0cef9b8565f3c0ed6192c0bae07a93","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/environment/abstract-file-manager.js","hash":"764ca7485040a9bf340078e45528bb0b8e1102ea","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/environment/abstract-plugin-loader.js","hash":"50b824ab66c34dfc1bfa9014e9b17a6ca1c62361","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/environment/environment-api.js","hash":"9600ab2874b71e2a93a6af1acfe90bfface2ee19","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/environment/environment.js","hash":"23db5a64931cbdecda3efa61e4024fd531e1cd06","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/environment/file-manager-api.js","hash":"ca6b902f0c9095ca2429b643823a498854d2fbaf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/boolean.js","hash":"3b818179d9b6ca9ab54642263f88e4a95758bbe6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/color-blending.js","hash":"e1a9ba0ba490e063d341f2f139842c2752a08a62","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/color.js","hash":"5c9eca31cb0269a67cb69febfb3568b0a85e632e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/data-uri.js","hash":"53e0c8375485cee32741c70bc944df5af91322e0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/default.js","hash":"117919bda102a537411bc72c60ba87cf76696299","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/function-caller.js","hash":"4cd951a32910c4036a3172305c463c777eb393b1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/function-registry.js","hash":"f0c4a12e54c077b1a3ea96b4a4b4165b4f0b9e69","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/index.js","hash":"737d10bdf71a8cd138214b1d19070ef11a0237e0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/list.js","hash":"b04485ef840f4bae4a6d5f03f6e58a976ada6f58","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/math-helper.js","hash":"8d6fe762abf1c8f94f3fb9aa498ff5990d6e7773","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/math.js","hash":"5a3259e1cea92f18b4ad2f42d11198e7578e05b0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/number.js","hash":"75e3bc6664cb37769592c0b8c01092799cf85879","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/string.js","hash":"82cf51503e720370f622ff7ab5deeb68393c3adb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/svg.js","hash":"8966e3b46ae18a28df3c7a03225fd6c7dd2bc1ef","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/functions/types.js","hash":"3234e90ae6b5c8f323fa4bfe6c8bd2e426ef2f25","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/parser/chunker.js","hash":"3572fa3d76d9d752766213fa6d9e6507060da3da","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/parser/parser-input.js","hash":"f33158a2b35a3fdf865358b2964adfd31b0e5442","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/anonymous.js","hash":"40e18b05af9f6959a82d1747a248a0d49c7a03e8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/assignment.js","hash":"3450a53b95acd7601b09e4cc6234c65a6c1cfcc2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/atrule.js","hash":"a68dcea87022a1bad51cc9200ddabab6a643ded5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/attribute.js","hash":"682edd9a7ec9dbd5114d165e058b9e480bec03bf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/call.js","hash":"2dd52c7ae27bf1afa179f04f8e7fbb6d6e7d9668","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/color.js","hash":"a6c902f8fcfd0cf89f93e3c1c6227d5250b3393c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/combinator.js","hash":"08d8766f3b48885657470cec91f4b4566e1ec986","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/comment.js","hash":"05758c8cb8cf28853ef58f886415454cfc70a8c3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/condition.js","hash":"5ac9bbc46027f8d7b8921e1f1a2e60073dedd680","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/debug-info.js","hash":"eafbd87e2ab1bc51bc96e2971ad98a3bcaa07411","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/declaration.js","hash":"bdcb20a7220c60a5a33985b946caba8d9675cdff","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/detached-ruleset.js","hash":"6af363623c5cbdd035e41f0caf38d1b3627434e2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/dimension.js","hash":"f948d8cb3ba7d5ec63832563a14d004f8562bd1c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/element.js","hash":"43b8d3fae05d356731579211aa98b2abfab29b4e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/expression.js","hash":"ffad73eeffb1eb8a70183ff1cae017c50c41a7ae","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/extend.js","hash":"faa78afb09d62bdb912a72f87f6aabe211885fa8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/import.js","hash":"5273c95387bc5078de627d9d91f9d4310c114ddd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/index.js","hash":"d9d1c59813d1b5b7d5da0157d3c618986d3577ef","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/javascript.js","hash":"87628777404342dd484ba8569864c28c1f2324e3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/js-eval-node.js","hash":"83193d54e9951b9f3284e39c49ac3abaad816c4a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/keyword.js","hash":"df9311759e96db8affe3d254f9a3519244ef6423","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/media.js","hash":"6dbd5d16b58cf2263993ffbc456cab8011bc08f5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/mixin-call.js","hash":"b46ad71a1b9c5f432cd23fb5a95bfda910c3ea36","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/mixin-definition.js","hash":"21e6c72b6a97f7c36749745da948fbbd5fe54de7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/namespace-value.js","hash":"e91d1ceb6e81f3360126e01fb5e89f97b4e7a6b5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/negative.js","hash":"c82e393e6ea1f27ad02d90416f465ca8b30d75db","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/node.js","hash":"b1af2249008050eee1dd36fef2c86b250d401cfd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/operation.js","hash":"9061c178cbd0cb88927cf7cfc2fd86f25d08344c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/paren.js","hash":"25d607aaaf28b5dcd9dcba07548a302264edc2a8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/property.js","hash":"97560d10c232f0f26c214073980887006815dabb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/quoted.js","hash":"6a30f55aa89027fbd77c9e4274d61c123f5d6bd1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/ruleset.js","hash":"a496b1bcb3ee13864d87af556ab860df3527c435","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/selector.js","hash":"b0e50f9e4849eafc5ea37e6aff52817552754e13","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/unicode-descriptor.js","hash":"8f4ffb6920f5a69d35292110e0fb787e2e157cdc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/unit.js","hash":"eec59fa6cb0e311698daf4ef12d95fa155bad1f4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/url.js","hash":"ce42726f886d61fe5f41637a80a0a01b5b2e618e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/value.js","hash":"ea2fec3bd17d17344b513b7d1939799996692510","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/variable-call.js","hash":"971ba68074ef30eca35e8f7415f6e9b1239e3edb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/tree/variable.js","hash":"ac4fbbb71b8f17f4c918fcc0220004b5709d2ecb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/visitors/extend-visitor.js","hash":"b46efd54fb3346422a29e5be1610cb30917ba349","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/visitors/import-sequencer.js","hash":"9eaf87700ed0e806590e9d0783b387585c00bb6f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/visitors/import-visitor.js","hash":"b7f3a516c1e8e053a5b900de4852a06b8033dc97","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/visitors/index.js","hash":"dd4f70ec3ede552af2fe73b9c1a861f739c2eb2f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/visitors/join-selector-visitor.js","hash":"14150149e72b6447f40463f18aa258065e7dfab0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/visitors/set-tree-visibility-visitor.js","hash":"5618dc3f1c9ed92bc2c45e375d289a86d0729a8c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/visitors/to-css-visitor.js","hash":"4612345f9f64bc7378890bd59b40e89f84df9380","modified":499162500000},{"_id":"themes/indigo/node_modules/less/lib/less/visitors/visitor.js","hash":"6be19b955acde9b078fbe864d296a939ea2a5732","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/urls.css","hash":"fa3e63f849edf65e6003d142f04d1074899b18e2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/urls.less","hash":"e5ad357c45321b182a0eaeec93e4afe0d3c3f2d6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/vendor/promise.js","hash":"dca40232073467300005b0740a0101d53dcc8f9b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/compression/compression.css","hash":"f70a874c7d8797a686f1de9d35a56370ef0122cf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/debug/linenumbers-all.css","hash":"192905631ba6c399f47697a5f7cec49683f07118","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/debug/linenumbers-comments.css","hash":"1d340cc592e209cd85fb3c3047305c452fa88f80","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/debug/linenumbers-mediaquery.css","hash":"dd0018f50995f6fee900bd7428897b6cfb279465","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/filemanagerPlugin/filemanager.css","hash":"8cd29cc1ae951419d065ed8fc327fcf8f08bee5e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/globalVars/extended.css","hash":"578fb9dbd35a02272911db677b6b5aeb6e1362cd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/globalVars/simple.css","hash":"ea442377e7815ba32e96953b5e009e74c6ff4c9b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/include-path/include-path.css","hash":"c3362838da4bcfa304aeaf1c0eaaa50738802b6a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/include-path-string/include-path-string.css","hash":"0da2ad4ee8deac86507dfaa88302f7b9374844f4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/legacy/legacy.css","hash":"aa39f3973f2e352b77594285831b60fcac13dcba","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/modifyVars/extended.css","hash":"8dc2184271a8d60cf86e1b402614cdfb0975db7f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-1.css","hash":"7bf1075a7d5e64c8935eae8ce89facbeca6ac7e5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-2.css","hash":"887f9e453af6a044a76763924e7f4937f4552ad6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-3.css","hash":"38911e18d7f53c8d7d17791fdf000b24b90800ce","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-4.css","hash":"fcbff942531f5a1a7e96b0ad9250b16eb6ef6c28","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-5.css","hash":"1595e4d7dfa65b5447f387e157fc21e1f489c64f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-6.css","hash":"efbfa27e61498074f9cb2ce87c90ab24240d32ec","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-7.css","hash":"d89cb076464cf136c2a2909f648e17d68dceb6eb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-functions.css","hash":"21c2707f84a8a5ee9fe171ee74457323b5dfdb18","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-media.css","hash":"388724f151e80c293ff3b659fe80a8995afd2d52","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/namespacing/namespacing-operations.css","hash":"1e0a069e638b51f0d820e4899840d6adb070f9ed","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/no-strict-math/mixins-guards.css","hash":"0c39212aa442b088789ef606b2be8b66be23e249","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/no-strict-math/no-sm-operations.css","hash":"a1f5f6550ba8bf817a2a7396a327060d475ff88c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/postProcessorPlugin/postProcessor.css","hash":"2a266471bc7adfcc21e9c4f162e80a0d3ad4bd29","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/preProcessorPlugin/preProcessor.css","hash":"8cd29cc1ae951419d065ed8fc327fcf8f08bee5e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/rewrite-urls-local/rewrite-urls-local.css","hash":"bc195ad38432120692e9de5cca46b9794417848e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/rewrite-urls-all/rewrite-urls-all.css","hash":"822c7a384c6c9d884c0ef45045c4550416a35b13","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/rootpath-rewrite-urls-all/rootpath-rewrite-urls-all.css","hash":"653776b45e7a825ac934fbcb2099ce448ee65c89","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/rootpath-rewrite-urls-local/rootpath-rewrite-urls-local.css","hash":"f47b25bfe661aca35d50ac1b7c541330b760487b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/static-urls/urls.css","hash":"67b1476e0287cfdddb7f97a02124c0e5c0fae13e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/strict-units/strict-units.css","hash":"418b16236ef8a01a0fedaf91be69c1e813249766","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/url-args/urls.css","hash":"33ade453da8dcfe8195f11d727e0b890c3a8bde7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/visitorPlugin/visitor.css","hash":"8cd29cc1ae951419d065ed8fc327fcf8f08bee5e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/import-module/one/1.less","hash":"3f8c3964a62dd3d253f82d54bc1b81f127548d30","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/3rd-party/bootstrap4.less","hash":"9735588b960bbe678bcee5568698d9eaee684ae0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/3rd-party/uikit.less","hash":"a1adfda2b11c5f3b0af2befc5ca41f0d0c84ba0c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/compression/compression.less","hash":"4c8bd3ebf4e529218f3843afe780eb5894742940","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/debug/linenumbers.less","hash":"8c7249a353f2c340ad7b07bdb300d7f61c079bbb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/add-mixed-units.less","hash":"3e938e85155c144f0580bd9c15a1d0c40bf6f240","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/add-mixed-units.txt","hash":"d9fd1ec00810e654760c2bdec2132a96aba60a76","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/add-mixed-units2.less","hash":"1513ef560fbee5a289b479e291e2dd677f7c03a0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/add-mixed-units2.txt","hash":"f786525accbab83d1fa109a89ceabcaeac273b02","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/at-rules-undefined-var.less","hash":"e74089f92f8d4a587b0ca6c56e8e9986203875c6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/at-rules-undefined-var.txt","hash":"5ab67fdf316ac79db815a8e20239797273121b22","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/at-rules-unmatching-block.less","hash":"ec422063fb627047b4418dd0729d26bb79f50007","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/at-rules-unmatching-block.txt","hash":"54329961087756e5712d131784c8e736ebedce87","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/bad-variable-declaration1.less","hash":"aa1a1ddacda4559c7782d4fb08289763f14ec887","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/bad-variable-declaration1.txt","hash":"dc1d605be1a90f73063ddb7a38e9c254be3684bd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/color-func-invalid-color.less","hash":"8f760201775bdcc7f2445da2206ea32dd921dc23","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/color-func-invalid-color.txt","hash":"84e3026aa718496f2efb6f9baf3ce318b05b8b31","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/css-guard-default-func.less","hash":"2792a17a2406c7e7914975c42f3bcbff29e46057","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/css-guard-default-func.txt","hash":"0c265d9c0b733adcf7116ea4a195dc0ec2dea571","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/custom-property-unmatched-block-1.less","hash":"88dd1ca6b8606388e6809db4b60855a81da98002","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/custom-property-unmatched-block-1.txt","hash":"91bd24d4cc36c9c7ace327ebfcd0c404a605977b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/custom-property-unmatched-block-2.less","hash":"e116db7d3de24b575120e39c6505b0541ace80f2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/custom-property-unmatched-block-2.txt","hash":"afb431b18c2b229f35e7525f686ec7b40315cbae","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/custom-property-unmatched-block-3.less","hash":"21818503d49d047848fcff9c0db23b45c4914960","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/custom-property-unmatched-block-3.txt","hash":"4a1b9555d3a2f3b7ea620d5de70cf65ae85cb74c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-1.less","hash":"a1e34074cb8fa4b69a688c24e9a0ade1bf02cbd8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-1.txt","hash":"43e10868fbe6a7c6cf7cac53b8e6ea2de4438882","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-2.less","hash":"14aa8a6d3e7574d1e00afb9fb68fd9c84e2207f8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-2.txt","hash":"507f6de3b74c04a0211213211e05bc0a020e1d4f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-3.less","hash":"aea7fbcf8916ba525026a57813059e58a1be4fca","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-3.txt","hash":"c0d8f80fe408b37a9bdeac0b032e4f39ecb0c03f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-5.less","hash":"b14c56eeb24fcb6fc152ce22dd0605aec8d89f1a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-5.txt","hash":"b4be463c14b46e76aa1ff5e1289574c48341efa0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-6.less","hash":"f585a572c17e90f2981cff719a8c0b6692d8408d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/detached-ruleset-6.txt","hash":"c785dd39d9a9718dc7a2f89044be4aceffe05e5d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/divide-mixed-units.less","hash":"6db22e0a3d9029cc5642621fd68771a56e9d0ed7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/divide-mixed-units.txt","hash":"c86abe7bebf6ab182089644f4fd29b837d8ca328","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/extend-no-selector.less","hash":"3ce2fbda9c07064386db098e805e00cb7b799c28","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/extend-no-selector.txt","hash":"c294544ffb8f8db5228fe9757e44f202115a7734","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/extend-not-at-end.less","hash":"a085f21ad0b9fe8ddbb5c46580e05457219bbe93","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/extend-not-at-end.txt","hash":"6e39979f1940bf2219da9c40638ad5fafe6c59a8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-1.less","hash":"6af410a7b5d581a3fafe4cb27ac78a4853458bd8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-1.txt","hash":"a717d283e545a5ced62e45fe61d4939aa9e2a2bd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-10-keyword.less","hash":"d68d9785edefd9009ed8ff1a0880c161465cf206","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-10-keyword.txt","hash":"991d2041bec2538ca2e1d1a65bd915c4168900bb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-11-operation.less","hash":"146bb60060e7c89653f658d1dc918ac381582369","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-11-operation.txt","hash":"bbeee082fcd5d8425f9df8529732aedd63076cde","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-12-quoted.less","hash":"63fe0fba66d48ea28de859419d81bf8ed9087a82","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-12-quoted.txt","hash":"2264471bca28eb52ce7364b97bd7edf7c4244648","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-13-selector.less","hash":"5cae107a3ebe8f6378fa7b1d653579568fafc368","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-13-selector.txt","hash":"bc4460b4545a568600f8b62de187d938b5443bec","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-14-url.less","hash":"911d388a5a0315aa04188890bd3ae68cef73042f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-14-url.txt","hash":"bf4137a13f03f3cd701037798c9876a3070586cd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-15-value.less","hash":"97669d147aecb52b471902b1c48a720a1b78d580","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-15-value.txt","hash":"e0cd7bb06dea4e2391d4b5eed0cdf6bc7f8c5d70","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-3-assignment.less","hash":"8735aaef637298325bed91d22e996a482d7d6997","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-3-assignment.txt","hash":"6f57cfb64360cf14a52c168aaa5e17e371c62900","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-4-call.less","hash":"58627522787813555fed1232556752cc4e0c2da2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-4-call.txt","hash":"3da0fa8b2df36d973432c7e8d4dd583d27fb3faf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-5-color-2.less","hash":"f41a6b98b7df101f0a8df66c83e1a2150b54688f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-5-color.txt","hash":"8a70c423452187ecaf0043a274205a966204d069","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-5-color-2.txt","hash":"5b90db2ef125583cc7df6f525ee6231a2954bfd2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-6-condition.less","hash":"a36b0f6f733de4f4ce38e0e55be55af6e218178e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-6-condition.txt","hash":"e1b29f1177cbd03cdbd96e1d55f5fad105378197","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-5-color.less","hash":"5af02be683acfebe0115b05ca6732123766af44b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-7-dimension.less","hash":"540a2102f9c56f58c33c633ffb70a35beda1e3b5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-8-element.less","hash":"6c25c39bd81d127badc4f958b72b4626e16f6a9a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-7-dimension.txt","hash":"dc216bc4873f2022f353c3d63a4450a23deaca32","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-8-element.txt","hash":"88b4a0b87f2a34aa7795025d36107f2fc2848c93","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-9-expression.less","hash":"b9a06d27b3b9285dd04161aa8ed9e73b28e90d01","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-malformed.less","hash":"aaf85cac1c1385e1474b2853df6dd27d7dacb297","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/functions-9-expression.txt","hash":"2428dbd4362086d72f184ea9e86352b7a03b45ed","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-malformed.txt","hash":"277dd392db61d3c07a36b817c9e683289ec126fd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-missing.less","hash":"3b7850b07a78e7ab89b20bb2d6093cc1bd7d944d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-missing.txt","hash":"2c9defbfb5f2d7205cd14e42b7488c9d42f97a56","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-no-semi.txt","hash":"feec9ee668b896fe77949f8e8cb618419a3907e0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-no-semi.less","hash":"1f738f5f53542fd453a30b9ee0ccb508eeb0f7f5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-subfolder1.less","hash":"d1bb3caa4df3849394a98590dac24cba4d31aede","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-subfolder2.less","hash":"db0198f790863490b1dab35d963af9b534b1b9a2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-subfolder1.txt","hash":"0bbbd46adf5c8fbe4a4257744d6d1f0e681c8a67","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/import-subfolder2.txt","hash":"2193edb5c032d8781672e1eb29ee5fb599ce2156","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/javascript-error.less","hash":"313fabec432123c5e88c080751acaf4292325312","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/javascript-error.txt","hash":"d51e7bbbc7837efb820645a1d020a38b3b8367cf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/javascript-undefined-var.less","hash":"edddb9aafd435b36042240f77fe27bd2dfcc9e6b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/javascript-undefined-var.txt","hash":"91b31bd6a9bab549e24be4ad08a85ab130709143","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixed-mixin-definition-args-1.less","hash":"4d0e52bb6efc924bc99f6b48aaabdd42aa5294ea","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixed-mixin-definition-args-1.txt","hash":"b37e787baa8af9be08fef54cfd023fd2f60b2e34","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixed-mixin-definition-args-2.less","hash":"e6d5022f060b6d4ac9b598f17526fb688ca7f0fa","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixed-mixin-definition-args-2.txt","hash":"d0b19a1d6d3a693f8802c721818498d80903bf15","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-defined-2.txt","hash":"5cab8433a0152355ed39dcd4581a1ae1372d808f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-defined.less","hash":"bdd55e292b0e9b24bb3cb616bce34ab2398fa025","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-defined-2.less","hash":"3e4993fe301fda33d71abf2060c00f1e664f6d7b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-defined.txt","hash":"0bbbd46adf5c8fbe4a4257744d6d1f0e681c8a67","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-matched.less","hash":"961a8caaf2a5c7c374d1594f51fc79cc81576ccd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-matched2.less","hash":"312a87fbdb9efb14c06bcd16f7683423571b1102","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-matched2.txt","hash":"77c7d712011c96934bd32174e8898e1324f5dfc3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-matched.txt","hash":"10e665f74bc65628b5bbf3c1bbd469690c98fef6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-visible-in-scope-1.less","hash":"7a007979a8787c89a5211709b8a08c2aaa8cd9ba","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixin-not-visible-in-scope-1.txt","hash":"5ae2e5c680d8e9fb45097eaa4a7fadf06437b0d0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixins-guards-cond-expected.txt","hash":"e29c5082b5e7fd00610674993c227fc825a6bc17","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixins-guards-cond-expected.less","hash":"4132b1e7f92472838515b5fd38a5d9240e47169e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixins-guards-default-func-1.less","hash":"b10d3771c930712420c11cb8baa37ca9051b36e6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixins-guards-default-func-1.txt","hash":"8244549514fa2b1fc55ef48f1fcdfd5a4ac32a19","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixins-guards-default-func-2.txt","hash":"6f16c30442e386c1826598f654558930b4cfd791","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixins-guards-default-func-2.less","hash":"86affb8a37dd9314d967ec8a5bc815151bb0d2ef","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixins-guards-default-func-3.less","hash":"0d4e7f05c91413d7ada27191db7fdb73373edfc3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/mixins-guards-default-func-3.txt","hash":"057aaa7c2e2b31356278d834cf6e324811563944","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/multiple-guards-on-css-selectors.txt","hash":"a8e1ef7787da332f11460971b272f88b61f281f6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/multiple-guards-on-css-selectors2.less","hash":"64272849ff79a1473b378e5a5a29cb7cfbbfe340","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/multiple-guards-on-css-selectors.less","hash":"75b4d9aefa9c629a2cf5208a5858f6d06e934940","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/multiple-guards-on-css-selectors2.txt","hash":"224d8124c23d9c2e9379e962123c8da360797a59","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/multiply-mixed-units.less","hash":"b84ed49772152b10868433daa30ba6eabf1817ef","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/namespacing-2.less","hash":"4d523c7101204e29171e757897688e8cbf45f44d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/multiply-mixed-units.txt","hash":"da75b3e87f0c38cb9ad402c696087d54be291db6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/namespacing-2.txt","hash":"d99d8659a319290c19e76d3e487bf01e60a74987","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/namespacing-3.less","hash":"f7970921cbfe60e1326a3c582b8692748c3e1361","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/namespacing-3.txt","hash":"cb9d420e907891beb5c03505b668ed6d5ff2d459","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/namespacing-4.txt","hash":"26ef8f9675e25e6d7a8a25b445926fb0d68e6651","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parens-error-1.less","hash":"3e47031cc561207eab5f0cae6f39ec5ddf4b1ab8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/namespacing-4.less","hash":"b14a84e51daa5fe012d55ba02fbdb332f13d7bfb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parens-error-2.less","hash":"942a9b98b45197a9e29e0c6f72c253d65666fbea","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parens-error-2.txt","hash":"9189da8a791356f2829ac8771b08954e7c6b56a8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parens-error-1.txt","hash":"86df419759a187eefa47e20c004a0e0429f04826","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parens-error-3.less","hash":"60e6b5f46735f6d29f4dcc8472072e739ef56752","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parens-error-3.txt","hash":"3d40379c72e4071a9d14083572bb23e48254a19b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-curly-bracket.less","hash":"48a1801e385066a599b52cf2090882b5d25f12f6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-curly-bracket.txt","hash":"2193edb5c032d8781672e1eb29ee5fb599ce2156","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-media-no-block-1.less","hash":"348b9289ada63d6c445e0acaeac38180035ee134","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-media-no-block-1.txt","hash":"7bca9bd93a50f4e7a57c4346e7d4a7ac279054e1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-media-no-block-2.txt","hash":"7dc92561571b6b9387ed6862d7580edcc35b774c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-media-no-block-3.less","hash":"32d282ac228ff15db8e16f840d9dd973a97d5f00","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-media-no-block-2.less","hash":"26e7f449aa5500e350b4c089e62efadfeb0ec524","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-missing-bracket.less","hash":"8471aeee7c80d220705529ed4e7086778e592089","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-media-no-block-3.txt","hash":"4c60e01cca13e1806c334776e8eca5d451ae0ccb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-missing-parens.txt","hash":"6b86ea8c6f00cc7a4be91fb9916745f0b8346dca","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-missing-parens.less","hash":"a2efab004b4bec128b11acbdbef8f8abeab19acf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-missing-bracket.txt","hash":"0aa91850f0fff6c0f4d5b8938e20a755b743e28b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-with-import.less","hash":"d462c5894aea0b9d84d589e776d1e92d5b80680f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/percentage-missing-space.less","hash":"44209122f8292d620a17b56080198f7432a304f1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/parse-error-with-import.txt","hash":"3b683e384b54f6bd6a8a65fae7fd9e54689e0bd7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/percentage-missing-space.txt","hash":"141055a7351b33763e260b6f6d082c3daecd3eaa","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/percentage-non-number-argument.less","hash":"dd2aa29aa4ade64c9e416a8a4074819002474783","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/percentage-non-number-argument.txt","hash":"975042c171963ed8059026d661acfa8385546eab","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/plugin-1.less","hash":"23b3793fc834fbcd54007290817dca0670bdfd0a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/plugin-1.txt","hash":"be41257df452866598970250bf77788adbfceafc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/plugin-2.less","hash":"f82764909633aeba59894dba4a026b49ea346152","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/plugin-2.txt","hash":"922b6ee9376691bda22eb6114b854a6ca83f4dc4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/plugin-3.less","hash":"3fcb17f7230985f855e2b9afe3b80511b52a76db","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/plugin-3.txt","hash":"459dad82088a380034634b30f5ba2fa4d61a422e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-asterisk-only-name.less","hash":"50b768b960f91a3bc42c360855906992e0cb2aef","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-asterisk-only-name.txt","hash":"67c2fe9b33ad14f40a962fe850238c90e869a90f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-ie5-hack.less","hash":"b5d09a4ecf17d51a63a8115286dda32cfc494edb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-ie5-hack.txt","hash":"c5314f620c4dbb3dfdf4472564f2b7524a5b6a56","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-in-root.txt","hash":"ff7817c235397e9eb6db97e761c69f2975cdc4f4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-in-root.less","hash":"a804eb55d1dcb053427fb00ddb02e448a80a719c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-in-root2.less","hash":"bcd67744e778275df3c18d526b1de6b55a9865a9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-in-root2.txt","hash":"ff7817c235397e9eb6db97e761c69f2975cdc4f4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-in-root3.less","hash":"309316522e718545326c42f47205b01f51bbe4f6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-in-root3.txt","hash":"92b438af2ec9929a355f33555e794b8e24b6df07","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-interp-not-defined.less","hash":"6b94883e79295c124559e602e5abebf8473b0029","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/property-interp-not-defined.txt","hash":"a4dfd100f4290ad6e79bc674d66ccdff9cc5461d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/recursive-variable.less","hash":"9ad1da5f7ff5029141e030c30481ca185eea6362","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/recursive-variable.txt","hash":"8bfd253a16e6a25bb697d62fa569f25183af1b0a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/root-func-undefined-1.less","hash":"e0f41fa6947f72724bb3d6cb3a2d90e2949003d1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/root-func-undefined-1.txt","hash":"975c849cfeb24f88eb1ab0b3686cddae10b81a41","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/root-func-undefined-2.less","hash":"3f3dab444f2378d9f772e0080e75a8ff54031e8d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/root-func-undefined-2.txt","hash":"5b225687e41dac25ba37be7fc8e8f9ac6efca084","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/single-character.less","hash":"11f6ad8ec52a2984abaafd7c3b516503785c2072","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/single-character.txt","hash":"83897f94f1f02403636b83ebf7ed190059c985fe","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient1.less","hash":"9147bbaf75067c10e36eccbd64858c9532dc1e9a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient1.txt","hash":"e1de9d35dc8b55a140d00f79ec5a3bb9215ec057","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient2.less","hash":"d0f692730eb086073242cace465ddd781f473a1e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient2.txt","hash":"a4ef2c8ea84b461ac3c01514c6e582842e9e6b21","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient3.less","hash":"53cf3378a2edb8faab114c208cd09a88f14937a0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient3.txt","hash":"dd0e880d4c4c934397f9c9f3d27cfdf186afe8d8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient4.less","hash":"09a0a8118cadb502705eff677ea729a21ace149b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient4.txt","hash":"c1e53f36ec2baeb873324bbebf03d1d7d86802d5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient5.less","hash":"92359868aa82ce213c9119f2fed03cdca64f8234","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient5.txt","hash":"f78a5a3e377e789336069874a58d0e0859fac731","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient6.less","hash":"1b1ebebad5778b24dfcc793637993dcdc2dbc943","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/svg-gradient6.txt","hash":"f7bfaea2293b32d9af9502a5851b3938bd423e9b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/unit-function.less","hash":"cd49bf03a2fa0bc96395778e3534d454183830f4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/unit-function.txt","hash":"d00cec6cd72410ef75fd597b11de39cba7fe2d36","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/filemanagerPlugin/colors.test","hash":"83702ef5533463d66f2385e0cb7346ba0ec5ed6a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/filemanagerPlugin/filemanager.less","hash":"e2a28f67a09f6a35131db48e35ac8df975d77aec","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/globalVars/extended.json","hash":"2789646d339e1fbbd563e0b12d0e1abb0bf7a595","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/globalVars/extended.less","hash":"f75c25e9cda6426abed906e34b92585662b251f4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/globalVars/simple.json","hash":"2f0395458f688ff0669a0161a40d18435c22c434","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/globalVars/simple.less","hash":"ca00d67ed7b378b2fe75218bc72a74c863c96aab","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/css-import.less","hash":"6cd92c45a877941f659ea53a763a4cdb28411e16","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-and-relative-paths-test.less","hash":"ca881f2946c469e4ad98cc63176f179c525d4ceb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-charset-test.less","hash":"fdbe5add29ff0bf3948a0210896b09e91da11a48","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-inline-invalid-css.less","hash":"a12cf75c93dbe07f32db91540be79e70499281f1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-interpolation.less","hash":"29e812dbe36047dbaac4b9fb7370a8252a680bee","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-interpolation2.less","hash":"de7eefceed1a15416657b26bcffbdbee4a878532","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-once-test-c.less","hash":"9371023a01b0d61944570d1dfde39a9eb8b31202","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-reference.less","hash":"e1f19b9d1f5f7c48b7fb419059a0141c0f77e72c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-test-a.less","hash":"08bb5c58df3d0483bb5cf804863d91ea10a76678","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-test-b.less","hash":"437da753294ed96de5cdad93711e1bc52c2993c4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-test-c.less","hash":"9371023a01b0d61944570d1dfde39a9eb8b31202","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-test-d.css","hash":"aabab6e7c5d6d68bc4fc89daf2679ad0d0fe96bb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-test-e.less","hash":"2adb41e1fa29ef50076b49d37d1294bff64d660a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/import-test-f.less","hash":"5452b329d025625017a9ab94072b443fd5bfbe3b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/interpolation-vars.less","hash":"d94b5ea55cbdd50fee492a96215807ef3d602836","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/invalid-css.less","hash":"dbfbaf4542f6a63a5c3b8a4a40f640b81a4a9cd1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/urls.less","hash":"b97a43b0ee2a06b1108a0c401874c51d58a7b3ae","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference-issues/appender-reference-1968.less","hash":"a7f4fd829f94849f33daf6daad73c89191f2114a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference-issues/global-scope-import.less","hash":"59e9e9fe252ae297e103f0bc15c581380c8df5e6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference-issues/global-scope-nested.less","hash":"a6a14600d69b64ac13edbb543072073a28b2e8a8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference-issues/mixin-1968.less","hash":"d1d43c000268b91762be00104e1140139c87fed4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference-issues/multiple-import-nested.less","hash":"774b970a6819c5b3cc42756ce61119301a77aebe","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference-issues/multiple-import.less","hash":"1b3e0d0ab7f647a2971d988b98aa15be6b91b939","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference-issues/simple-mixin.css","hash":"50fb755b4bda4320e373add52a8bb61786c0254c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import-reference-issues/simple-ruleset-2162.less","hash":"adc59b1543eb74aaeade21f501b3bc13ed8939fc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/include-path/include-path.less","hash":"d1774b158323acae7e03c2c4a9b5efdae295b2ec","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/include-path-string/include-path-string.less","hash":"93b21f32005372450045766650bdf039e33e917f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/legacy/legacy.less","hash":"5e41de453ab308e3230d86edd79b93bf9df87b07","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/modifyVars/extended.json","hash":"2789646d339e1fbbd563e0b12d0e1abb0bf7a595","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/modifyVars/extended.less","hash":"1c006ff316e844ddeca61a19b9694a053d157a57","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-1.less","hash":"e779fb045c928ea254f700d802f93c5c20cb576c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-2.less","hash":"8c4bde08ee0eed11b2f1ecd8286d248f4345a390","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-3.less","hash":"7a72a637546f8973a1b09907d4610deb98734d0d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-4.less","hash":"e05e6cfd40b133364b784002656b2e921cf493c9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-5.less","hash":"f2935405bb6a30e99c3b37f04af9baf72c295791","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-6.less","hash":"a9363c0e86173c0d06d463c62cbc1445d8cc4ae9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-7.less","hash":"0e4aee36e0913753f2dd944af5a47e9137e20666","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-functions.less","hash":"4530bd94622abde77793c1923a9ecb4c41ff1e54","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-media.less","hash":"28c5b4ef5c9c0dc7bd749a486b544be665bb8679","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/namespacing-operations.less","hash":"d44405f6e4b17782c5f9cd2195bf4acf3f7a1836","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/nested-gradient-with-svg-gradient/mixin-consumer.less","hash":"17502d8942d07b7a804ab881d7245a488e4c174e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/nested-gradient-with-svg-gradient/svg-gradient-mixin.less","hash":"ccb0fcae83779410ab484274ed5911e570e9a130","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/no-js-errors/no-js-errors.less","hash":"b7ec72790bd439348e68fab4fe7499a08091f640","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/no-js-errors/no-js-errors.txt","hash":"d10f5f64a0194d5ed4d93656f162469aa2114337","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/no-strict-math/mixins-guards.less","hash":"2ae3d851577758880e63ae82d5b74148482b88f9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/no-strict-math/no-sm-operations.less","hash":"dd114104248a6c04b90fd9d90a06d99ed438cea8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-collection.js","hash":"5af29601f8a3ce0337bea21d4375853afdb46e09","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-global.js","hash":"e911103eb3d27e090e291260e186e68f1794f102","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-local.js","hash":"a9fa9f363e956501949f2c00691d146afba4d47e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-preeval.js","hash":"b8ca0371d8df0b8863c9286f29d9a0b5a8c99c1d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-scope1.js","hash":"fcc03424d7cf87e8d3234b647f2b19995529dc8b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-scope2.js","hash":"3a7947c300643942643025685bfe056a69939e35","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-set-options-v2.js","hash":"f28ad954a9f8fdebd5f740638903816d7282e5b9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-set-options-v3.js","hash":"edbd3a9aba0ed9ba0d40ae7df563107a21f85714","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-set-options.js","hash":"8d11012e5b17e36359f4368a967f38dab0a8ecd1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-simple.js","hash":"c1f9110768dbee028cee74097cec10c835fe3c94","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-transitive.js","hash":"c3194282e4ca3b89ad487cf3ffbdae5c765194b6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-transitive.less","hash":"fe0fe73c3250f0a345e2fb19329e8de178f2b130","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/plugin/plugin-tree-nodes.js","hash":"60645b789096f98888a7235f7cdd43ccbb1dbd8a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/postProcessorPlugin/postProcessor.less","hash":"13fd213e6b40d4e3e132e07572b3016bc0895c00","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/preProcessorPlugin/preProcessor.less","hash":"ceb8f2f504ce85add25a3634e91c2b2598af8767","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/rewrite-urls-all/rewrite-urls-all.less","hash":"3c5390b5892facaeed951c2d0370b82526dd0d5f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/rewrite-urls-local/rewrite-urls-local.less","hash":"4c582570c51d4e50874b4b7cde3709c5445783be","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/root-registry/file.less","hash":"766247e88acb85dec87e0e53050ee010f3445ba1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/root-registry/root.less","hash":"fcaf914002138cdd9dbfdea4d2e5d1301cfaf281","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/rootpath-rewrite-urls-all/rootpath-rewrite-urls-all.less","hash":"a452810f43a1234818ef112368e55519d1a45f33","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/rootpath-rewrite-urls-local/rootpath-rewrite-urls-local.less","hash":"84787179b6ed7be1a5d53498b903c8427039ee61","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/sourcemaps/basic.json","hash":"2f0395458f688ff0669a0161a40d18435c22c434","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/sourcemaps/basic.less","hash":"e72b99edf248e9872d1e56f2ea9504298ba32c75","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/sourcemaps/custom-props.less","hash":"817619154037c035eaaeb0542ee9bfd05541e6aa","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/sourcemaps/imported.css","hash":"a7be16f082583fdffa79ac66a36883f8bbbab3c3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/sourcemaps-empty/var-defs.less","hash":"8e8133b72617b1705f0c667cab59bd1bc548ef89","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/static-urls/urls.less","hash":"846eedad6745440d4fb13f49a641e263de010552","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/strict-units/strict-units.less","hash":"d5412724e1a596dc4be158b29856023e3a5e8ea6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/url-args/urls.less","hash":"53eb9c4ccf5457def268ccab8ed16720d0ea7585","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/visitorPlugin/visitor.less","hash":"6c76cebf43f982754c10bbd3d1cd9856c27238cb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/3rd-party/bootstrap4.less","hash":"130e2da5d2df98e112b09ed3aa7dfdd86545d371","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/3rd-party/uikit.less","hash":"4342034cf5dafbd57918ca621a1c1e637116df6f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/compression/compression.less","hash":"684b41e47dde3773e74cee512a64b7c80719008d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/debug/linenumbers.less","hash":"27c5b695c295bf2f7329f3681f1abf22a6d154f3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/add-mixed-units.less","hash":"11a870a5c944891b85a9a86d222ea17815a87064","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/add-mixed-units.txt","hash":"d9fd1ec00810e654760c2bdec2132a96aba60a76","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/add-mixed-units2.less","hash":"867f9a67f2b4aad578e4c41f35d56a0d2f59558c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/add-mixed-units2.txt","hash":"f786525accbab83d1fa109a89ceabcaeac273b02","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/at-rules-undefined-var.less","hash":"c425eb66fd35d333ce4ff9f9eb38143bdb3173f9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/at-rules-undefined-var.txt","hash":"5ab67fdf316ac79db815a8e20239797273121b22","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/at-rules-unmatching-block.less","hash":"fdcad3a7cd4ac55eea1d7e0338a47968ddc85b20","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/at-rules-unmatching-block.txt","hash":"54329961087756e5712d131784c8e736ebedce87","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/bad-variable-declaration1.less","hash":"d0cae80de2cf1db8df4b146959d4e32ab77930a7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/bad-variable-declaration1.txt","hash":"dc1d605be1a90f73063ddb7a38e9c254be3684bd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/color-func-invalid-color.less","hash":"c1a239b323821a4b0bb9bb039b600c209b040684","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/color-func-invalid-color.txt","hash":"84e3026aa718496f2efb6f9baf3ce318b05b8b31","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/css-guard-default-func.less","hash":"9de33c59063188461617519a3e0e5222ef008bd6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/css-guard-default-func.txt","hash":"0c265d9c0b733adcf7116ea4a195dc0ec2dea571","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/custom-property-unmatched-block-1.less","hash":"27075f0e9ea5f0be7b5dc6582ea99b7b499e3894","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/custom-property-unmatched-block-1.txt","hash":"91bd24d4cc36c9c7ace327ebfcd0c404a605977b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/custom-property-unmatched-block-2.less","hash":"ee0778805e291697ef4491306ad6b6a176f765eb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/custom-property-unmatched-block-2.txt","hash":"afb431b18c2b229f35e7525f686ec7b40315cbae","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/custom-property-unmatched-block-3.less","hash":"ecd0f136a58109b23e89d9c636c4ec9c33c71d49","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/custom-property-unmatched-block-3.txt","hash":"4a1b9555d3a2f3b7ea620d5de70cf65ae85cb74c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-1.less","hash":"be067f68a715cf6e36a888682f59ec7ae9a3d85d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-1.txt","hash":"43e10868fbe6a7c6cf7cac53b8e6ea2de4438882","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-2.less","hash":"36c034026987ce6b01661222db9e05c49796a161","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-2.txt","hash":"507f6de3b74c04a0211213211e05bc0a020e1d4f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-3.less","hash":"30e1f70015d39815cadf0061ffda204abc358124","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-3.txt","hash":"c0d8f80fe408b37a9bdeac0b032e4f39ecb0c03f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-5.less","hash":"f1b5b3d3c9afb6fdcb4c7cd6bb34717b9cc31c15","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-5.txt","hash":"b4be463c14b46e76aa1ff5e1289574c48341efa0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-6.less","hash":"78354b114c2b035cbdde6c9863157e0f6681579c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/detached-ruleset-6.txt","hash":"c785dd39d9a9718dc7a2f89044be4aceffe05e5d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/divide-mixed-units.less","hash":"62777aca08b4a46cef7092b40bc5012475c73a8a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/divide-mixed-units.txt","hash":"c86abe7bebf6ab182089644f4fd29b837d8ca328","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/extend-no-selector.less","hash":"3f8da997c305a67158a099c8a2e599ba1734db16","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/extend-no-selector.txt","hash":"c294544ffb8f8db5228fe9757e44f202115a7734","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/extend-not-at-end.less","hash":"789efb595ca9ec767c4fa1320a0a04c5dd42f5f9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/extend-not-at-end.txt","hash":"6e39979f1940bf2219da9c40638ad5fafe6c59a8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-1.less","hash":"9116799eeeae0ed77e2b24b57ba890f56fe0678e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-1.txt","hash":"a717d283e545a5ced62e45fe61d4939aa9e2a2bd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-10-keyword.less","hash":"a598de1f27f77778a67f073c874e90684fbf156a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-10-keyword.txt","hash":"991d2041bec2538ca2e1d1a65bd915c4168900bb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-11-operation.less","hash":"cc96ff9cc3e42e820d465ada9cc22f4090b41134","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-11-operation.txt","hash":"bbeee082fcd5d8425f9df8529732aedd63076cde","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-12-quoted.less","hash":"6f51bb18998a0208d6e0b6eb4259754703c78271","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-12-quoted.txt","hash":"2264471bca28eb52ce7364b97bd7edf7c4244648","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-13-selector.less","hash":"e32ba5685b8937342768b5c993ea6be442a49911","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-14-url.less","hash":"a1cd3960d1266c15f380c2634d024042ca065421","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-13-selector.txt","hash":"bc4460b4545a568600f8b62de187d938b5443bec","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-14-url.txt","hash":"bf4137a13f03f3cd701037798c9876a3070586cd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-15-value.less","hash":"d889e1ba69a7a4ee57e827e6dc8edfb297909f62","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-15-value.txt","hash":"e0cd7bb06dea4e2391d4b5eed0cdf6bc7f8c5d70","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-3-assignment.less","hash":"0df21d3af3d5e9765f5c26b55dfecc5741d9e9f8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-3-assignment.txt","hash":"6f57cfb64360cf14a52c168aaa5e17e371c62900","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-4-call.less","hash":"f64715e4630a641239f24490b7398625e04f01e8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-4-call.txt","hash":"3da0fa8b2df36d973432c7e8d4dd583d27fb3faf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-5-color-2.less","hash":"347e7b6b2ce152c0556b20e2236d76923904d93b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-5-color-2.txt","hash":"5b90db2ef125583cc7df6f525ee6231a2954bfd2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-5-color.less","hash":"21aa64aa8883b662fbf3d51ff099f8f43f22a254","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-5-color.txt","hash":"8a70c423452187ecaf0043a274205a966204d069","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-6-condition.less","hash":"0fe5e649efd8e3c38e0c49b3d8462de23e5e7e49","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-6-condition.txt","hash":"e1b29f1177cbd03cdbd96e1d55f5fad105378197","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-7-dimension.less","hash":"65ff9b087a3cb168b5d298ca41978a780a170ca7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-7-dimension.txt","hash":"dc216bc4873f2022f353c3d63a4450a23deaca32","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-8-element.less","hash":"7b28497cba4ea16286732960c5aaca4a6620af5f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-8-element.txt","hash":"88b4a0b87f2a34aa7795025d36107f2fc2848c93","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-9-expression.less","hash":"eb32937742c42e3d567bda5d18f38cee1e1bf0d9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/functions-9-expression.txt","hash":"2428dbd4362086d72f184ea9e86352b7a03b45ed","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-malformed.less","hash":"3c6c051d4a478c493fa1c333db7d8a1a29f641f5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-malformed.txt","hash":"277dd392db61d3c07a36b817c9e683289ec126fd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-missing.less","hash":"60ae4a424e3bb387d6188d8564814cdd320f1bc7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-missing.txt","hash":"2c9defbfb5f2d7205cd14e42b7488c9d42f97a56","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-no-semi.less","hash":"c26c4379930c7953f960301a0d5974223173624b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-no-semi.txt","hash":"feec9ee668b896fe77949f8e8cb618419a3907e0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-subfolder1.less","hash":"62b82f15270d2ccbda05c62120b4ca95b7827d72","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-subfolder1.txt","hash":"0bbbd46adf5c8fbe4a4257744d6d1f0e681c8a67","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-subfolder2.less","hash":"61f2f335bc0e6c6ea94a392d24b9134d3f1c411e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/import-subfolder2.txt","hash":"2193edb5c032d8781672e1eb29ee5fb599ce2156","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/javascript-error.less","hash":"ec4d0332104555abb0dd70c9e0faba3eb6cd8cba","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/javascript-error.txt","hash":"d51e7bbbc7837efb820645a1d020a38b3b8367cf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/javascript-undefined-var.less","hash":"952e7264db17ea66ca9da1a7ef6363a4b262d785","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/javascript-undefined-var.txt","hash":"91b31bd6a9bab549e24be4ad08a85ab130709143","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixed-mixin-definition-args-1.less","hash":"7cce9cded404c7075cda7fae6697dad1db48a9a0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixed-mixin-definition-args-1.txt","hash":"b37e787baa8af9be08fef54cfd023fd2f60b2e34","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixed-mixin-definition-args-2.less","hash":"69c3cc4b9ccc904170b1ff288f66fe5961dc5210","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixed-mixin-definition-args-2.txt","hash":"d0b19a1d6d3a693f8802c721818498d80903bf15","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-defined-2.less","hash":"3852afb504a037951a181568da4fc1c6e83cb0a3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-defined-2.txt","hash":"5cab8433a0152355ed39dcd4581a1ae1372d808f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-defined.less","hash":"a1f4635e90c4bfcd4fb043e7ce1a973dd193c632","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-defined.txt","hash":"0bbbd46adf5c8fbe4a4257744d6d1f0e681c8a67","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-matched.less","hash":"b3089c01c12460ffd905fee4dbfa5c90b77e6cdc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-matched.txt","hash":"10e665f74bc65628b5bbf3c1bbd469690c98fef6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-matched2.less","hash":"3d5899ca31b22c6232e75cb1b137c8df8b4c55ae","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-matched2.txt","hash":"77c7d712011c96934bd32174e8898e1324f5dfc3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-visible-in-scope-1.less","hash":"c5c7d28e0e3116b52ffbcb3b68243056f929a47b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixin-not-visible-in-scope-1.txt","hash":"5ae2e5c680d8e9fb45097eaa4a7fadf06437b0d0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixins-guards-cond-expected.less","hash":"acce095199359d45fb3ea5b07048be7913e0ac49","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixins-guards-cond-expected.txt","hash":"e29c5082b5e7fd00610674993c227fc825a6bc17","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixins-guards-default-func-1.less","hash":"ab1ac1757b7b99587dabd5080dcbf49eb2357f01","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixins-guards-default-func-1.txt","hash":"8244549514fa2b1fc55ef48f1fcdfd5a4ac32a19","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixins-guards-default-func-2.less","hash":"6aed5732cbba43a312eca71bef4072836a5de516","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixins-guards-default-func-2.txt","hash":"6f16c30442e386c1826598f654558930b4cfd791","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixins-guards-default-func-3.less","hash":"ca67218860498efa8e626b5a7dd293e1f7d91e32","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/mixins-guards-default-func-3.txt","hash":"057aaa7c2e2b31356278d834cf6e324811563944","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/multiple-guards-on-css-selectors.less","hash":"810b0d4b434dc195a65ce3f47d61252424e6eb4b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/multiple-guards-on-css-selectors.txt","hash":"a8e1ef7787da332f11460971b272f88b61f281f6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/multiple-guards-on-css-selectors2.less","hash":"793b83f45fb28fdbc0b15d0d5bd2c00e0a632be9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/multiple-guards-on-css-selectors2.txt","hash":"224d8124c23d9c2e9379e962123c8da360797a59","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/multiply-mixed-units.less","hash":"c60f2616be38b9adbcd65ed070ecf3687f1ae529","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/multiply-mixed-units.txt","hash":"da75b3e87f0c38cb9ad402c696087d54be291db6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/namespacing-2.less","hash":"61fe5de84e0ec1284b3ec1b09c832b486d305238","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/namespacing-2.txt","hash":"d99d8659a319290c19e76d3e487bf01e60a74987","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/namespacing-3.less","hash":"efe7a7484af78b286af21338bb49dadc96173214","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/namespacing-3.txt","hash":"cb9d420e907891beb5c03505b668ed6d5ff2d459","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/namespacing-4.less","hash":"e6c355c3e249a94deeafd10719cd6b9ebaf0f475","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/namespacing-4.txt","hash":"26ef8f9675e25e6d7a8a25b445926fb0d68e6651","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parens-error-1.less","hash":"ddd50170b42b9b672875c1aeba5aad6b1fa51eb9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parens-error-1.txt","hash":"86df419759a187eefa47e20c004a0e0429f04826","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parens-error-2.less","hash":"d380f9593d5490a59aef472fe59e692bf6d89db0","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parens-error-2.txt","hash":"9189da8a791356f2829ac8771b08954e7c6b56a8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parens-error-3.less","hash":"e97699bea2ff625398233c07b39f2cae525b01aa","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parens-error-3.txt","hash":"3d40379c72e4071a9d14083572bb23e48254a19b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-curly-bracket.less","hash":"eb0b449cc72a687699ad94e54ab9d3ee0b5479c7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-curly-bracket.txt","hash":"2193edb5c032d8781672e1eb29ee5fb599ce2156","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-media-no-block-1.less","hash":"43ecc261ab7b582b04b26df05cdbcd9b03838822","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-media-no-block-1.txt","hash":"7bca9bd93a50f4e7a57c4346e7d4a7ac279054e1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-media-no-block-2.less","hash":"b1c14ea8fbf110db7e9c962e3dcd683b11c1d6e2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-media-no-block-2.txt","hash":"7dc92561571b6b9387ed6862d7580edcc35b774c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-media-no-block-3.less","hash":"a4b7287a33e03327ea30f8e8366afac42974a1cc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-media-no-block-3.txt","hash":"4c60e01cca13e1806c334776e8eca5d451ae0ccb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-missing-bracket.less","hash":"ea49b133cf9257a268947dbe072da5b24a61a906","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-missing-bracket.txt","hash":"0aa91850f0fff6c0f4d5b8938e20a755b743e28b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-missing-parens.less","hash":"ed5dd07d98372a38b2111fc2a2b1698061ec3882","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-missing-parens.txt","hash":"6b86ea8c6f00cc7a4be91fb9916745f0b8346dca","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-with-import.less","hash":"e35ffef603e18f5103dc6a6851e1116188d5130e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/parse-error-with-import.txt","hash":"3b683e384b54f6bd6a8a65fae7fd9e54689e0bd7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/percentage-missing-space.less","hash":"44472da4d36edd3960ef52dd9290320caa097410","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/percentage-missing-space.txt","hash":"141055a7351b33763e260b6f6d082c3daecd3eaa","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/percentage-non-number-argument.less","hash":"6ac65fe18f891e59bec7ff8071ed510558410acc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/percentage-non-number-argument.txt","hash":"975042c171963ed8059026d661acfa8385546eab","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/plugin-1.less","hash":"e6797b77dfd28b60f36dc6a3cb7660cce55ed97d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/plugin-1.txt","hash":"be41257df452866598970250bf77788adbfceafc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/plugin-2.less","hash":"47fdb4b7fec5c33cec4ca4dc8d587b98af7ec5c1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/plugin-2.txt","hash":"922b6ee9376691bda22eb6114b854a6ca83f4dc4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/plugin-3.less","hash":"9f8a977fe7aa4052428c996e2d561daac0c4e239","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/plugin-3.txt","hash":"459dad82088a380034634b30f5ba2fa4d61a422e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-asterisk-only-name.less","hash":"7b5095dc9a34f05eb98c953e2a14bdcf649fc629","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-asterisk-only-name.txt","hash":"67c2fe9b33ad14f40a962fe850238c90e869a90f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-ie5-hack.less","hash":"b0f0a9fdab9632171e06f52a20c7927803dc7684","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-ie5-hack.txt","hash":"c5314f620c4dbb3dfdf4472564f2b7524a5b6a56","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-in-root.less","hash":"45b339345e788638f0362ae4496cab933e930a55","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-in-root.txt","hash":"ff7817c235397e9eb6db97e761c69f2975cdc4f4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-in-root2.less","hash":"06a72465e27c4b3e8ab63059e3b6e4a97a1db6d2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-in-root2.txt","hash":"ff7817c235397e9eb6db97e761c69f2975cdc4f4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-in-root3.less","hash":"4d43c04fcb0642ab30082d9e5e5ae35bdd5dac8c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-in-root3.txt","hash":"92b438af2ec9929a355f33555e794b8e24b6df07","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-interp-not-defined.less","hash":"9dcb156aca76446359f056b22e744f4c27420889","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/property-interp-not-defined.txt","hash":"a4dfd100f4290ad6e79bc674d66ccdff9cc5461d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/recursive-variable.less","hash":"b2f779ebd8969f05722d155397e0c2d4b058dd03","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/recursive-variable.txt","hash":"8bfd253a16e6a25bb697d62fa569f25183af1b0a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/root-func-undefined-1.less","hash":"056931303c3b603d651d0d93cc12d13ac02de511","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/root-func-undefined-1.txt","hash":"975c849cfeb24f88eb1ab0b3686cddae10b81a41","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/root-func-undefined-2.less","hash":"e411fc8f5dca887b67e55c012386f48496643783","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/root-func-undefined-2.txt","hash":"5b225687e41dac25ba37be7fc8e8f9ac6efca084","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/single-character.less","hash":"7eb6399f01caf75a139011c251079188b0175d51","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/single-character.txt","hash":"83897f94f1f02403636b83ebf7ed190059c985fe","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient1.less","hash":"2950f8fba926ad9668a06b34853e4ddfa92446b4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient1.txt","hash":"e1de9d35dc8b55a140d00f79ec5a3bb9215ec057","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient2.less","hash":"50f58ed13e44ea9f08661e6f1b5cdff6897b31ba","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient2.txt","hash":"a4ef2c8ea84b461ac3c01514c6e582842e9e6b21","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient3.less","hash":"72e54623e5ebe64bab6226359a158e4e29ed2691","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient3.txt","hash":"dd0e880d4c4c934397f9c9f3d27cfdf186afe8d8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient4.less","hash":"55f9adda2b97d91af7171f74728260b895233efe","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient4.txt","hash":"c1e53f36ec2baeb873324bbebf03d1d7d86802d5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient5.less","hash":"f5e54d0213178344c1dbd47b31e4226022b9686c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient5.txt","hash":"f78a5a3e377e789336069874a58d0e0859fac731","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient6.less","hash":"ac446916a9c107d7fa11149ed015d39ac0358c5b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/svg-gradient6.txt","hash":"f7bfaea2293b32d9af9502a5851b3938bd423e9b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/unit-function.less","hash":"b3b2e8fc37d8f9be6f7a82e2cb63d2b2f59ae3bf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/unit-function.txt","hash":"d00cec6cd72410ef75fd597b11de39cba7fe2d36","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/filemanagerPlugin/colors.test","hash":"83702ef5533463d66f2385e0cb7346ba0ec5ed6a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/filemanagerPlugin/filemanager.less","hash":"62ef154eaf79b314a82fce371086e5e92d063b9c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/globalVars/extended.json","hash":"2789646d339e1fbbd563e0b12d0e1abb0bf7a595","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/globalVars/extended.less","hash":"f994cec3430fa07dfe3b15597ee7afabc6235cab","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/globalVars/simple.json","hash":"2f0395458f688ff0669a0161a40d18435c22c434","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/globalVars/simple.less","hash":"2a881d16d0809d3c9d46f3b21c0617a7da9b700a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/css-import.less","hash":"685be59c252362b30bf28ad4c79187a55cc9df02","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-and-relative-paths-test.less","hash":"12d5b6dc726887de801d9f916052c568bdb46859","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-charset-test.less","hash":"0745b537259ad6ca5628e09b6551bb2630c299ff","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-inline-invalid-css.less","hash":"be6d2bb06afef2afa2168669b51483025c47f11d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-interpolation.less","hash":"58ee658fc4a72e0b7e67fe835c59821462609ae3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-interpolation2.less","hash":"f6388fedceeae98de29ea2dc585c84a43b2e095a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-once-test-c.less","hash":"b849a8a5e7ab7c50639f08e7e30d5d152a106454","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-reference.less","hash":"8c57ba8a012eef857e0442b86f620d25bf34b665","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-test-a.less","hash":"0fcfd89f75a514cb1eea6b018499c9f98dea0359","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-test-b.less","hash":"525727eb235ed5d70215c87976e3313c65c69c0b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-test-c.less","hash":"b849a8a5e7ab7c50639f08e7e30d5d152a106454","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-test-d.css","hash":"ddf18fd6eb539ae992c36b64dcdefc23e0698f9b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-test-e.less","hash":"dff42ad9127d70f1d5df4ff5a355168e3e3e20d7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/import-test-f.less","hash":"1023a51a84597dc692428742ae2d007120d1e55e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/interpolation-vars.less","hash":"ef5c18d7eabd5e2ee0c265bc0ae6cfc66822e32f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/invalid-css.less","hash":"e5ac72e8c857fd4841d81cd39ddd63835cc26352","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/urls.less","hash":"5ffcf19d586fd66d964fd64ff6b94eb419eca3c5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference-issues/appender-reference-1968.less","hash":"3d24c8d9f432f68ecfed4164e4b0bd0cb506090a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference-issues/global-scope-import.less","hash":"24ee45c365e0c97fa7b6073942deb0226ce4d903","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference-issues/global-scope-nested.less","hash":"3e074ac1ebf216122355b9c6353f8cfe220bbfd1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference-issues/mixin-1968.less","hash":"408491afeac8a2cd6b38d9793444a6c63c7bd491","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference-issues/multiple-import.less","hash":"9a76efacfa88114d4a0823df57aac2bd11530ef9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference-issues/simple-mixin.css","hash":"bb9f5d05b4c20d109d8408ad8ca405fe414755cb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference-issues/simple-ruleset-2162.less","hash":"f0a46e83e43610f0b3a0674d2ff69a6210da6563","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import-reference-issues/multiple-import-nested.less","hash":"d43ca0638136fd57fe13d057103599a9c7729f8a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/include-path/include-path.less","hash":"b4ea364b635df65395973a529d837ccc1f75a74e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/include-path-string/include-path-string.less","hash":"c2fb411124a458a70ea32d40a24250fa6de7a420","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/legacy/legacy.less","hash":"0fe4e44bf99c75ef2026121f70d003e8afe06c7b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/modifyVars/extended.json","hash":"2789646d339e1fbbd563e0b12d0e1abb0bf7a595","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/modifyVars/extended.less","hash":"fd61e13418718df79ed1b2e22c89933a65355e05","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-1.less","hash":"649678fc44d3da3ad2132f78b179c1740adf0d19","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-2.less","hash":"adb141a5fa9e00815668dfe5cd13c4c4ade4fd4b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-3.less","hash":"c664f259bad48b0884c40fe8870f88763c80a34c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-4.less","hash":"496ce00bd6b658b19ff422f1614b3cda4372d83a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-5.less","hash":"ca0f57599425222a1cf0007fd6c76d400476982b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-6.less","hash":"7c81a9bf4f0fe50f634f95074e80abf11f2e51b3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-7.less","hash":"9067ae4ebd3e85230d778e99c948d353978c4237","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-functions.less","hash":"ff99ebc56fb493a7ee61c108ec7df9a85e73b062","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-media.less","hash":"9937c6f55342c0a5c10bb7839ced7e74d1c21b70","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/namespacing-operations.less","hash":"23c66e0a78acd507bc2557d2dd48bcdb66a65251","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/nested-gradient-with-svg-gradient/mixin-consumer.less","hash":"4bc739f2f4384e3ab8e2e4503b60e0f18e0a4636","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/nested-gradient-with-svg-gradient/svg-gradient-mixin.less","hash":"f99c3eca29cbdb7cfcfee00477258d3c0a4d495f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/no-js-errors/no-js-errors.less","hash":"bd17a64a4492da6b483389065b7c0163caa8f071","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/no-js-errors/no-js-errors.txt","hash":"d10f5f64a0194d5ed4d93656f162469aa2114337","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/no-strict-math/mixins-guards.less","hash":"082ec8ceb74bf4aa7d14dfddecde7ce82e3a3e8b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/no-strict-math/no-sm-operations.less","hash":"3242fef3f4d84fd3b3b93d67b84376183ea24a0e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-collection.js","hash":"5af29601f8a3ce0337bea21d4375853afdb46e09","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-global.js","hash":"e911103eb3d27e090e291260e186e68f1794f102","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-local.js","hash":"a9fa9f363e956501949f2c00691d146afba4d47e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-preeval.js","hash":"b8ca0371d8df0b8863c9286f29d9a0b5a8c99c1d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-scope1.js","hash":"fcc03424d7cf87e8d3234b647f2b19995529dc8b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-scope2.js","hash":"3a7947c300643942643025685bfe056a69939e35","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-set-options-v2.js","hash":"f28ad954a9f8fdebd5f740638903816d7282e5b9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-set-options-v3.js","hash":"edbd3a9aba0ed9ba0d40ae7df563107a21f85714","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-set-options.js","hash":"8d11012e5b17e36359f4368a967f38dab0a8ecd1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-simple.js","hash":"c1f9110768dbee028cee74097cec10c835fe3c94","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-transitive.js","hash":"c3194282e4ca3b89ad487cf3ffbdae5c765194b6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-transitive.less","hash":"48eb119287699cc6d9b04ca2b3491af086acfacb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/plugin/plugin-tree-nodes.js","hash":"60645b789096f98888a7235f7cdd43ccbb1dbd8a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/postProcessorPlugin/postProcessor.less","hash":"9cd2a06ffd59c724b06b7121a55a7ed9c78ce533","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/preProcessorPlugin/preProcessor.less","hash":"3a001c359d783e0fd0661d6bc1be0590619bfb97","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/rewrite-urls-all/rewrite-urls-all.less","hash":"9b621e2b0391ce2a013536e62c62a69bbcdb5a55","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/rewrite-urls-local/rewrite-urls-local.less","hash":"8c0d1c95ad0daa8fe9044a0fad4ec378230414fd","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/root-registry/file.less","hash":"093dcc13f0c958fd6e025f5767843082a4d62c1b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/root-registry/root.less","hash":"ae47a0bdc968109c28730de227daa2f50c76c0bf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/rootpath-rewrite-urls-all/rootpath-rewrite-urls-all.less","hash":"c14a65a67df3a8d841a61a86d918ff05c7e6bbe6","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/rootpath-rewrite-urls-local/rootpath-rewrite-urls-local.less","hash":"930715c1b46c6e0691622bfce32f28fabe68c430","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/sourcemaps/basic.json","hash":"2f0395458f688ff0669a0161a40d18435c22c434","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/sourcemaps/basic.less","hash":"24c211d7ddd264b91356717c4305968262fbf01e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/sourcemaps/custom-props.less","hash":"b279f97c2fed08f9388b898b86b85581f55327b9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/sourcemaps/imported.css","hash":"bea13071623191d8f8c06f714602f453f8087362","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/sourcemaps-empty/empty.less","hash":"57218c316b6921e2cd61027a2387edc31a2d9471","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/sourcemaps-empty/var-defs.less","hash":"aa41718b39c149f4a60f4b59017df01bcd889b52","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/static-urls/urls.less","hash":"6928f5ef1a6109bf14e9033e6d7f21fedff4c556","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/strict-units/strict-units.less","hash":"6e3383464984fe4f17efd0c52961eee899f83ab7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/url-args/urls.less","hash":"4dbad401ada9b5d4c94028d428c42156f8645a07","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/visitorPlugin/visitor.less","hash":"c59c60e94ab8c070dbf0be4eee5663b2cfc7594b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/plugins/filemanager/index.js","hash":"d401b79edb55b204f23ff4dd100b59e0cce176c3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/plugins/postprocess/index.js","hash":"aa4b32a4aed1f70662c673bfef964d10078444d1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/plugins/preprocess/index.js","hash":"6e0b33c08d7a4940a80a38607f12717cc2261d39","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/plugins/visitor/index.js","hash":"9b1b8d2d56c36705c634cc6dfae89e7ad1c7a3e4","modified":499162500000},{"_id":"themes/indigo/node_modules/source-map/dist/source-map.debug.js","hash":"a6bfe62f20aae6db6d91a21cd26493ec318050d4","modified":1506695999000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/http.d.ts","hash":"f06607d56875f60a1881072276649478b370937d","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/http.js","hash":"0ad5a305a7fcfcd629a256e86cd300538ffacec7","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/http.js.map","hash":"d390843750c21e54a387d0c8983ba957fda77acf","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/https.d.ts","hash":"f06607d56875f60a1881072276649478b370937d","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/https.js","hash":"497cb25d5d58f625f5f3744bfa61324e53c29ebc","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/https.js.map","hash":"8117bf180143107503255bf7c8f42bb4a62e393b","modified":1525378824000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/mailto.d.ts","hash":"a69bf0e11fa925926186999e7316f86a6d2d7e29","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/mailto.js","hash":"1b770da12297ddd4dd6382c7960513f189f1b599","modified":1525380350000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/mailto.js.map","hash":"fbd2785adbd9b3fcbfbf8232d855964b391594dd","modified":1525380350000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/urn-uuid.d.ts","hash":"43c5d0581b1088bafe9da4070bcdec4befda911c","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/urn-uuid.js","hash":"54e26134ab217bf898b18e87a247eaf87f7f880f","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/urn-uuid.js.map","hash":"0dbc4c2eb8eec044d25ff6c97e7b5908d940fcb4","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/urn.d.ts","hash":"24a9ea3b1cca29b3423ae7103c66f8cb183135c5","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/urn.js","hash":"47cd5fdba7dd474dc8eea658cdf0598f411696ad","modified":1525378825000},{"_id":"themes/indigo/node_modules/uri-js/dist/esnext/schemes/urn.js.map","hash":"28cd13de1b465d39e7ba73110a03cc86b6c8302d","modified":1525378825000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548348052000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548348052000},{"_id":"themes/indigo/node_modules/less/lib/less/parser/parser.js","hash":"54e81a5e7e479498d0eaf82620145ba6a69bd561","modified":499162500000},{"_id":"themes/indigo/node_modules/less/dist/less.js","hash":"2a3f20c95b896e19c409503ed4a6bb604fdbefb5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/global-vars/simple.css","hash":"8cd29cc1ae951419d065ed8fc327fcf8f08bee5e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/modify-vars/simple.css","hash":"e26f4993fdd3517bb95a109534947683f8a2d8cf","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/plugin/plugin.css","hash":"a715971ba366d2e10edf304888ae2ab26b0c3d46","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/postProcessor/postProcessor.css","hash":"2a266471bc7adfcc21e9c4f162e80a0d3ad4bd29","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/relative-urls/urls.css","hash":"a2c640afb8591055bc888c84cb3a73a079e889d9","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/rewrite-urls/urls.css","hash":"d5d46aa8518289ee0bf24b994a2d1b8d51f38a67","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/rootpath/urls.css","hash":"1f552321e95cf5ee10b5b1ec0f02d00c52f44460","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/rootpath-relative/urls.css","hash":"c08821833092dba0079e461a1e1ac3d8e6685829","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/css/rootpath-rewrite-urls/urls.css","hash":"c08821833092dba0079e461a1e1ac3d8e6685829","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/console-errors/test-error.less","hash":"176e1e61d99f5b531b9ae8c2dea332ae95678071","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/console-errors/test-error.txt","hash":"3baa0433d0a1521ef2449d10f9f6e6881c9ee291","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/errors/image-height-error.less","hash":"c2d9383f3c2d7422a6b317304f40307f53a3236f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/errors/image-height-error.txt","hash":"06fa9e63d4942d079cb356e68c6875f0dc02010b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/errors/image-size-error.less","hash":"4e535538dbe9e1c449b1fd43bf5b1d917daa626b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/errors/image-size-error.txt","hash":"07171fef9b9aaccb156b1b0c4a246b6988f8a94c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/errors/image-width-error.less","hash":"5ccf4a6687a2ec8c72a9a6844e8747661abc1cf3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/errors/image-width-error.txt","hash":"ee6fa60f30c5cc85a35061879e0370c95bad8ab8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/global-vars/simple.less","hash":"91f1b9c754f09708795aa8abc4bc19cd0bf90a9d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/imports/urls.less","hash":"99963ed4e3c1563bcc0e6cd89637ec7863316f53","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/imports/urls2.less","hash":"49c68e0420fe5c4baf783fd96e13952873bb380a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/modify-vars/simple.less","hash":"eed064d7d49f965273feffe45298f2727e3e4a08","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/nested-gradient-with-svg-gradient/mixin-consumer.less","hash":"17502d8942d07b7a804ab881d7245a488e4c174e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/nested-gradient-with-svg-gradient/svg-gradient-mixin.less","hash":"ccb0fcae83779410ab484274ed5911e570e9a130","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/plugin/plugin.js","hash":"10c0c16b63a63217845684c7c401acd5f1ab83bb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/plugin/plugin.less","hash":"a22339f64e024fa0f29f8d8c2eb890f400e2cd5a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/postProcessor/postProcessor.less","hash":"13fd213e6b40d4e3e132e07572b3016bc0895c00","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/relative-urls/urls.less","hash":"29e6a21123a6131a361f7aa82dbd885b3e695e4c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/rewrite-urls/urls.less","hash":"29e6a21123a6131a361f7aa82dbd885b3e695e4c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/rootpath/urls.less","hash":"0290d19d94d56323716167846fd0b2893ecf0c5f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/rootpath-relative/urls.less","hash":"0290d19d94d56323716167846fd0b2893ecf0c5f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/rootpath-rewrite-urls/urls.less","hash":"0290d19d94d56323716167846fd0b2893ecf0c5f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/3rd-party/bootstrap4.css","hash":"598bb9fa229b3c2cbbf048a3f7d4123409f62b9c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/3rd-party/uikit.css","hash":"533be3465fd1be4f2907c1430cf884b2585ce5a3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/parens-division/media-math.css","hash":"1bb3d1f1018367edd83a36ab6e0a84320d38ddaa","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/parens-division/new-division.css","hash":"b43af7e504cc3ec35460702657e6fe6cdf5d5e8b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/parens-division/mixins-args.css","hash":"7e6e4149aa7fc3863c578fef98b6b1047ee9eaf5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/parens-division/parens.css","hash":"ab25f9fca86a4794213bb5d196291ec600afd7c4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/strict/css.css","hash":"4dfe2c5eb75e8a022a8204e612e10f845aae4e5d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/strict/media-math.css","hash":"f3b8fb001b8f9b026ece6859a45724348a381e3d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/strict/mixins-args.css","hash":"408d30674c790496585f35c79a3647cef6603196","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/strict/parens.css","hash":"8e81e9d36ca97a5f6616db74c63323868ecfc500","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/strict-legacy/css.css","hash":"4dfe2c5eb75e8a022a8204e612e10f845aae4e5d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/strict-legacy/media-math.css","hash":"f3b8fb001b8f9b026ece6859a45724348a381e3d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/strict-legacy/mixins-args.css","hash":"017352cbcc9ee069730f54a61310137b19314b80","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/css/math/strict-legacy/parens.css","hash":"b2356d2f6105d21cb3356cf400bdf8a417d42958","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/import-module/one/two/2.less","hash":"a1bcd8f0894da4d606206f04ccb6847cac41692c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/debug/import/test.less","hash":"346d954eb216b6620f3ea37fcaed1b67add140f4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/imports/import-subfolder1.less","hash":"60199994ad29bfd60138d0ed9cb26f56af2dc5b5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/imports/import-subfolder2.less","hash":"889253ff7940b64cd30d8d54bf9fbde5a0062291","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/imports/import-test.less","hash":"357f68a93921422dc4f4156cf7c70b137046fa40","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/plugin/plugin-error-3.js","hash":"188980d454ea7bd345107815665be9e85d8e3e11","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/plugin/plugin-error.js","hash":"f1501de229afb037fcca816e4920dcf9766504c2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/plugin/plugin-error-2.js","hash":"1283a259d782d88d54b7ae0dc6b969c07e8ac010","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/deeper/import-once-test-a.less","hash":"59b8e4b77e347e7c90b76f5a166c880eed280626","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/deeper/url-import.less","hash":"56d21438a8bb9f31d3f0e44cfbec49e60cf67572","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/imports/font.less","hash":"46a7a4d2d372443bdecee340ec874132ce111a79","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/imports/logo.less","hash":"6475fb421912305401e5ea8385ae921c810047e8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/parens-division/media-math.less","hash":"cf71f2c51c618b7e1b54619f5cf52aeb1fd7f7d3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/parens-division/mixins-args.less","hash":"3f0c6df8430e21a9c586cca9b8dfa8668967242d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/parens-division/new-division.less","hash":"62caf6baf7df51795607307d91f28bebf546021e","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/parens-division/parens.less","hash":"eb6610c8c05c945bdfd43c8785d30119fc3bb1ee","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/strict/css.less","hash":"c5f48c9d9ddc14fc212e3687be830c5ba04c4fd3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/strict/media-math.less","hash":"cf71f2c51c618b7e1b54619f5cf52aeb1fd7f7d3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/strict/mixins-args.less","hash":"3f0c6df8430e21a9c586cca9b8dfa8668967242d","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/strict/parens.less","hash":"eb6610c8c05c945bdfd43c8785d30119fc3bb1ee","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/strict-legacy/css.less","hash":"c5f48c9d9ddc14fc212e3687be830c5ba04c4fd3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/strict-legacy/media-math.less","hash":"cf71f2c51c618b7e1b54619f5cf52aeb1fd7f7d3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/strict-legacy/mixins-args.less","hash":"440daebd17c1d3d99065ec52e3962b96332f1a4f","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/math/strict-legacy/parens.less","hash":"6ae57f6c7e437ecfda46255948e7235185b633cc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/imports/a-better-bootstrap.less","hash":"e16a62d20199ee05c7ade7e1c1eb913522a0efb8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/namespacing/imports/library.less","hash":"20fc9679b6c28a14c8cfb938e7af5f56dc0a2bc3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/rewrite-urls-all/folder/file.less","hash":"cd2210bc8ed0541072a2f4dcb39ae0486b331bf4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/rewrite-urls-local/folder/file.less","hash":"cd2210bc8ed0541072a2f4dcb39ae0486b331bf4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/rootpath-rewrite-urls-all/folder/file.less","hash":"cd2210bc8ed0541072a2f4dcb39ae0486b331bf4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/rootpath-rewrite-urls-local/folder/file.less","hash":"cd2210bc8ed0541072a2f4dcb39ae0486b331bf4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/debug/import/test.less","hash":"8a39eecbd62a8240620950b0dd659ef469e4a612","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/imports/import-subfolder1.less","hash":"45e33f0a84aed48f239fea28df7b3bd2b5af348a","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/imports/import-subfolder2.less","hash":"6549f8a7aeab4c6440064bd4904007973fa8fbe2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/imports/import-test.less","hash":"f87bb5eaea33f2c12bf392ae7cadee1c0d15b6eb","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/plugin/plugin-error-2.js","hash":"1283a259d782d88d54b7ae0dc6b969c07e8ac010","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/plugin/plugin-error-3.js","hash":"188980d454ea7bd345107815665be9e85d8e3e11","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/plugin/plugin-error.js","hash":"f1501de229afb037fcca816e4920dcf9766504c2","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/deeper/import-once-test-a.less","hash":"b965b5919457d8ed52fb7e77fab4e3affad0f336","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/deeper/url-import.less","hash":"d9c83ab0b69b8431704d71361c2b1e8b756ea978","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/imports/font.less","hash":"137e82553bf603cbdb3d4dffe8a0ae193b8c2390","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/imports/logo.less","hash":"26fe4246d60d0f8b20d8b18bb1dde35f16ef1829","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/parens-division/media-math.less","hash":"7be931d109a4ccb1ddc3e0e49bae87f1b1680c09","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/parens-division/mixins-args.less","hash":"26301ac6f2cd474fe8f6cdd327e16f4972bdaab4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/parens-division/new-division.less","hash":"27560f3dec0430768bb3413abbd59388da3c36d5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/parens-division/parens.less","hash":"760070253213f99dd90ba59413f56eacc961e164","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/strict/css.less","hash":"6a05006f6aceaee6e489dc8424acaf617549452c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/strict/media-math.less","hash":"7be931d109a4ccb1ddc3e0e49bae87f1b1680c09","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/strict/mixins-args.less","hash":"26301ac6f2cd474fe8f6cdd327e16f4972bdaab4","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/strict/parens.less","hash":"760070253213f99dd90ba59413f56eacc961e164","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/strict-legacy/css.less","hash":"6a05006f6aceaee6e489dc8424acaf617549452c","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/strict-legacy/media-math.less","hash":"7be931d109a4ccb1ddc3e0e49bae87f1b1680c09","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/strict-legacy/mixins-args.less","hash":"c61c54477127787df22c68febe070acd713d92a8","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/math/strict-legacy/parens.less","hash":"dac45b0046523be33e24f2541b28b183bc4cd2b1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/imports/a-better-bootstrap.less","hash":"8a5599a9e2c89fbe0da59c4c235005005df79538","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/namespacing/imports/library.less","hash":"02874cfeb0b744f6d03c9f3fd35a7f4737432b02","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/rewrite-urls-all/folder/file.less","hash":"ca4c732786e1c160dcf875acbc297ee9f1e326c7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/rewrite-urls-local/folder/file.less","hash":"ca4c732786e1c160dcf875acbc297ee9f1e326c7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/rootpath-rewrite-urls-all/folder/file.less","hash":"ca4c732786e1c160dcf875acbc297ee9f1e326c7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/rootpath-rewrite-urls-local/folder/file.less","hash":"ca4c732786e1c160dcf875acbc297ee9f1e326c7","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less/modify-vars/imports/simple2.less","hash":"10c66a18dac38bb35028143fecbe13257da373af","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/browser/less.js","hash":"2a3f20c95b896e19c409503ed4a6bb604fdbefb5","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/import-module/one/two/three/3.less","hash":"963900e6d196296800d846da6b1bad9718d7c090","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/imports/subfolder/mixin-not-defined.less","hash":"1d80ee525934532cf402db7ed0e1f2b932a4bc1b","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/errors/imports/subfolder/parse-error-curly-bracket.less","hash":"7bb7ef0973e8a6a89187a7dc8543d09ae4bb5191","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/deeper/deeper-2/url-import-2.less","hash":"982285d22fa822451cdfbd76e72c57d957cea9e3","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less/import/deeper/deeper-2/url-import.less","hash":"c0a8477ffc1c192d1a00c2513f4cd4219323e257","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/imports/subfolder/mixin-not-defined.less","hash":"0d1f8d6fc8ac9af12f3217fdee35c8ead692cc84","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/errors/imports/subfolder/parse-error-curly-bracket.less","hash":"6d91017563ddb4c707ec8e8ce46e720b4fcc3ebc","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/deeper/deeper-2/url-import-2.less","hash":"c9543abc932ee05340631a5201ccb6d5c71954c1","modified":499162500000},{"_id":"themes/indigo/node_modules/less/test/less-bom/import/deeper/deeper-2/url-import.less","hash":"b411cf895d1baceaa9918e6fa819e7b904e00901","modified":499162500000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1548348052000},{"_id":"themes/indigo/.git/objects/pack/pack-d50b6ddcc7755b7558f88f3d7daf3aaaf3d9380d.pack","hash":"fbba49d82130acc7656acf2228b2f71e69b14086","modified":1550479542000},{"_id":"public/archives/index.html","hash":"25a898f5c917c12aea1d67f22cd5eda9d2c5bdc3","modified":1552615183457},{"_id":"public/2019/03/15/shiro-笔记（一）/index.html","hash":"d63059ef006508d0dc793abc77c6a961aae399be","modified":1552615183457},{"_id":"public/archives/2019/index.html","hash":"5329d2c211364c1048af72f883ce35c2e70931f0","modified":1552615183853},{"_id":"public/archives/2019/02/page/2/index.html","hash":"a05a429a6344a744c030ed23bccac9ff7c98e1e6","modified":1552615183853},{"_id":"public/archives/2019/03/index.html","hash":"3dc823bf2807bc7f66fad5fd4a8759cbdad3e1bc","modified":1552615183859},{"_id":"public/tags/Lambda-表达式/index.html","hash":"a3fd23c484fd16e62be7269604b23fb4734f404f","modified":1552615183859},{"_id":"public/tags/java/index.html","hash":"3cc4ca7961f258516a0b39ce97d341ff90cf04b0","modified":1552615183859},{"_id":"public/tags/动态代理/index.html","hash":"9d2450d20e280f731028cf7b4e680dfca0e9b057","modified":1552615183859},{"_id":"public/tags/http/index.html","hash":"113640824356a33c9f4cb5cd2128e5b4ffe8a05a","modified":1552615183859},{"_id":"public/tags/网络安全/index.html","hash":"425f5e5e929e6f62636e27638dce1b3109ae22cb","modified":1552615183859},{"_id":"public/tags/springMvc/index.html","hash":"12b8e18b168cce75599fec82d34b8f37e85c4f6d","modified":1552615183859},{"_id":"public/tags/字符编码/index.html","hash":"8012cc97f72b3951b61a11c5d7db1b76977175c1","modified":1552615183860},{"_id":"public/tags/github/index.html","hash":"0b7b2f705fc7a8afba817b3382222354db65281a","modified":1552615183860},{"_id":"public/tags/linux/index.html","hash":"4e9bb11e89264e467c705c0782d0f5c5113f2846","modified":1552615183860},{"_id":"public/tags/CentOS/index.html","hash":"42a8c5288124c88f133e3041282fd04cc22f0a2c","modified":1552615183860},{"_id":"public/tags/反射机制/index.html","hash":"f345755843b8a5db6dcbb1b84f289c317d9f53b2","modified":1552615183860},{"_id":"public/tags/JavaScript/index.html","hash":"c09c96a13f6cbeebfece262bcab68c17bdb9b1e4","modified":1552615183860},{"_id":"public/tags/浏览器兼容性/index.html","hash":"11e15c8dec540e237c6e6eaa1514fa8c47538242","modified":1552615183860},{"_id":"public/tags/markdown/index.html","hash":"ea25cff0f5ad6a70825467ef69baa977751f845e","modified":1552615183860},{"_id":"public/tags/硬件/index.html","hash":"54f32b2e758245b8440dd6db9491cd3992788cb5","modified":1552615183860},{"_id":"public/tags/内存/index.html","hash":"0f8d18049027531ac5d8e89a41194ac10edabe2a","modified":1552615183860},{"_id":"public/tags/index.html","hash":"e0adab2dbab27deca687a429f7b45d760d35f3a0","modified":1552615183860},{"_id":"public/2019/03/15/了解Java中的代理/index.html","hash":"ab6c4cc9049cf8797607ad0bd7d8be29ae10aec3","modified":1552615183861},{"_id":"public/2019/03/15/Java-动态代理为啥需要接口？？？/index.html","hash":"59f548ab5d30f1a41c10bfa226d402fa15a3fe95","modified":1552615183861},{"_id":"public/2019/02/26/markdown的使用笔记/index.html","hash":"244cb743d870eeebd6a0bd31b67a58662f3c9cb2","modified":1552615183861},{"_id":"public/2019/02/26/双通道存储器技术/index.html","hash":"cc1ac59f6b4d3e71bb6527e550aa328b5419aa1a","modified":1552615183861},{"_id":"public/2019/02/26/cookie-和-session-的区别/index.html","hash":"c36739a477ba8290d44c0352a22c16d32fbacd37","modified":1552615183861},{"_id":"public/2019/02/22/JAVA-8的新特性-1/index.html","hash":"be33c787b1307468c166c4d677dfa7a1b23ff0b4","modified":1552615183861},{"_id":"public/2019/02/22/gitLab-搭建/index.html","hash":"ca64c0b3640270f2523f96c4e00074ceceee9311","modified":1552615183861},{"_id":"public/2019/02/22/js实现粘贴板功能/index.html","hash":"218d83ae47e5eae1a9774bfca83280bff81e0747","modified":1552615183861},{"_id":"public/2019/02/22/get-请求中文乱码问题/index.html","hash":"8b57de4e2486c8de9c3bc88f558bdd0b874803d8","modified":1552615183861},{"_id":"public/2019/02/20/java-反射笔记/index.html","hash":"db2cddf15eb3ff278153fc593ca72f20a7ec1aae","modified":1552615183862},{"_id":"public/2019/02/19/JAVA-笔记/index.html","hash":"39dee9766c4b822699af426b71fd0d63e7b234d3","modified":1552615183862},{"_id":"public/2019/02/19/spring-boot-如何创建和使用freemaker自定义标签/index.html","hash":"880d8c8c350194513f5e48be90c7cd2214c39b65","modified":1552615183862},{"_id":"public/2019/02/19/spring-mvc-RequestBody-和-RequestParam-比较/index.html","hash":"74a955e5660b07f6869c67c0c825b883890e070f","modified":1552615183862},{"_id":"public/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/index.html","hash":"a8c376ccc5e69a5d94aa7d4d7d896a7b0c0c5d22","modified":1552615183862},{"_id":"public/2019/02/18/spring boot 学习笔记/index.html","hash":"daf027f1a1ba3597778647009848e54e67bc0810","modified":1552615183862},{"_id":"public/2019/02/18/Linux下项目自动部署脚本/index.html","hash":"6e020e3f0582ef2f947aa52bdbeb61477c450254","modified":1552615183862},{"_id":"public/archives/page/2/index.html","hash":"5f27366438db8eb848a53e42c0d8cd5d09809af5","modified":1552615183862},{"_id":"public/archives/2019/page/2/index.html","hash":"c6fa081bd8112a7e378fa69c6272ac5069086940","modified":1552615183862},{"_id":"public/archives/2019/02/index.html","hash":"e7d8c9142127cf5286155ab9aac789d6171241b5","modified":1552615183862},{"_id":"public/index.html","hash":"f5a110ba98937aedd6189121a49b0f89aba62249","modified":1552615183863},{"_id":"public/page/2/index.html","hash":"73c0a6f5c8f418998004c7f6159980cac75b3751","modified":1552615183863},{"_id":"public/tags/JAVA/index.html","hash":"6a48f6ab7a2635c37916c6ddaa0ebeddd7018859","modified":1552615183863},{"_id":"public/archives/page/3/index.html","hash":"bebfe04bef9d6581218246783120cba8df17ac2e","modified":1552615183880},{"_id":"public/archives/2019/page/3/index.html","hash":"33577d87b6f05a32d15cc2341369b4e5de5249e3","modified":1552615183880},{"_id":"public/archives/2019/03/page/2/index.html","hash":"a83ea25213aa6d53873ff192dd146d66c9b07324","modified":1552615183880},{"_id":"public/page/3/index.html","hash":"9784a271196061dcedfb0b2793a6e9649bdd4d9c","modified":1552615183880},{"_id":"public/tags/JVM/index.html","hash":"705ea3df6ee13546a45d9635e8e0e041baf4ee0f","modified":1552615183880},{"_id":"public/tags/spring/index.html","hash":"fa5c5153a7174a55951f2b9516927aedb63dcee1","modified":1552615183881},{"_id":"public/tags/HTML/index.html","hash":"be7e7d7cf79ce5c9383c7b4399d55df70c854bda","modified":1552615183881},{"_id":"public/tags/多线程/index.html","hash":"41a6c1e69eec7b7df145d73d668c7c34ac613b45","modified":1552615183881},{"_id":"public/tags/并发/index.html","hash":"dae67908ef8642199e98d172111776ecdc3748af","modified":1552615183881},{"_id":"public/tags/JAVA-8/index.html","hash":"e927506886884a7f0a886728bd97d48199356008","modified":1552615183881},{"_id":"public/2019/03/15/使用iframe遇到的问题/index.html","hash":"2a8ee5cd46df9746983eabc7e7bf8a2a0e44bfe7","modified":1552615183881},{"_id":"public/2019/03/15/Java-集合/index.html","hash":"539df0acf3e0a419e370806623a3e540a90b55c3","modified":1552615183881},{"_id":"public/2019/03/15/理解-linux-cpu-负载/index.html","hash":"bb425c5300e7e7aee0b4a396b2eb1efd81249207","modified":1552615183881},{"_id":"public/2019/03/15/关于Volatile的那点事/index.html","hash":"6a634ff1629766a5877dbf2d3a5c78af24034e60","modified":1552615183881},{"_id":"public/2019/03/15/如何使用flatMap/index.html","hash":"bf10a46abbfe8db0538229bf05c7c33069ace1ac","modified":1552615183882},{"_id":"public/2019/03/15/spring-bean的作用域/index.html","hash":"66eb14f84abfebba4cbb1d0fa2882014aa4a996b","modified":1552615183882},{"_id":"public/2019/03/15/关于executeUpdate方法返回的值问题/index.html","hash":"06f8e764373aa38d1e19fb47a06f6ea8b77c3306","modified":1552615183882},{"_id":"public/2019/03/15/jvm-面试问题总结-一/index.html","hash":"69d2e8e53e8b886c645ebaeec47f8c8984335673","modified":1552615183882},{"_id":"public/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1552615183895},{"_id":"public/img/avatar.jpg","hash":"515e1d16256ed4492847f861cdf1f0b4ae43d70e","modified":1552615183895},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1552615183895},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1552615183895},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1552615183895},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1552615183896},{"_id":"public/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1552615183896},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1552615183896},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1552615183896},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1552615183896},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1552615183897},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1552615183897},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1552615183897},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1552615183897},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1552615183897},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1552615183897},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1552615183897},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1552615183898},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1552615183898},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1552615183898},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1552615183898},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1552615183898},{"_id":"public/2019/02/22/JAVA-8的新特性-1/1550828240.jpg","hash":"12e9302c8111196359e1c12a0a6bca16d4d4b964","modified":1552615183899},{"_id":"public/2019/02/22/gitLab-搭建/1550803434.jpg","hash":"3041441c7226d4517978a35fee37dd8fe74b12b2","modified":1552615183899},{"_id":"public/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105954917.png","hash":"fe2345c1f9c9e15dff77f252e368b3af8894c666","modified":1552615183899},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1552615183965},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1552615183965},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1552615183966},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1552615183966},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1552615183966},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1552615183967},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1552615183967},{"_id":"public/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/20180627151839209.png","hash":"722d8694c8fa51bd8473b3caf77b2a4350d3d9f0","modified":1552615183968},{"_id":"public/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105206677.png","hash":"c221ae7089106418910b0590ddd18f81fde49324","modified":1552615183968},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1552615183975},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1552615183975},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1552615183975},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1552615183975},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1552615183975},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1552615183975},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1552615183975},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1552615184025},{"_id":"public/css/style.css","hash":"4f59712181405c963fe7e80740071022050bc096","modified":1552615184801}],"Category":[],"Data":[],"Page":[{"title":"archives","date":"2019-02-21T09:42:27.000Z","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-02-21 17:42:27\nlayout: archives\n---\n","updated":"2019-02-21T09:43:07.748Z","path":"archives/index.html","comments":1,"_id":"cjt9ezmcq000138udx46ui5l9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-02-21T09:35:46.000Z","layout":"tags","type":"tags","tags":["JAVA","反射机制"],"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-21 17:35:46\nlayout: tags\ntype: \"tags\"\ntags:\n- JAVA\n- 反射机制\n---\n","updated":"2019-02-21T09:37:47.833Z","path":"tags/index.html","comments":1,"_id":"cjt9ezmcv000338udl519fgbr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JAVA 笔记","date":"2019-02-19T10:22:46.000Z","_content":"1. 面向对象和面向过程的主要区别\n\n      面向过程：性能相对较高\n      \n      面向对象：易扩展性，复用，维护\n2. Java的一点特点\n    \n    跨平台: Java 虚拟机实现平台无关性\n    支持多线程，网络编程\n3. jvm 和 jre\n    \n    Jvm：运行 Java 字节码的虚拟机\n    Java 是编译与解释共存的语言：机器码的运行效率高于 Java 解释器的\n    即时编辑器（JIT）: 优化将字节码转换为机器特定语言的过程相似的字节码\n    热点代码: 经常需要被调用的方法和代码块\n4. hashCode 和 equals\n    \n    对象的hashCode 作用：hashCode是一个整型，提高比较效率\n5. 线程，程序，进程\n    \n    程序: 程序是静态的代码\n    线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。\n    join() 定义在Thread.java中,作用是等待当前线程死亡，然后执行下一步\n    Thread sleep：睡眠，超时后自动回到就绪状态（不会释放对象锁的所有权），等待获取资源cpu\n    Object wait（This method should only be called by a thread that is the owner\n    * of this object's monitor.）：释放对象锁的所有权，线程处于阻塞状态，等待调用notify/notifyall\n    Wait和notify/notifyall 为啥是Object的方法\n    wait等待的是对象monitor，由于Java中的每一个对象都有一个内置的monitor对象，自然所有的类都理应有wait/notify方法\n    Yield（）\n6. 为什么局部变量需要显式设置初始化值 \n    \n    主要原因是执行顺序，对于局部变量而言，其赋值和取值访问顺序是确定的。Javac 不给局部变量设置初始值，主要原因是一种策略决定，一种规范\n\n\n\n\n","source":"_posts/JAVA-笔记.md","raw":"---\ntitle: JAVA 笔记\ndate: 2019-02-19 18:22:46\ntags:\n- JAVA\n---\n1. 面向对象和面向过程的主要区别\n\n      面向过程：性能相对较高\n      \n      面向对象：易扩展性，复用，维护\n2. Java的一点特点\n    \n    跨平台: Java 虚拟机实现平台无关性\n    支持多线程，网络编程\n3. jvm 和 jre\n    \n    Jvm：运行 Java 字节码的虚拟机\n    Java 是编译与解释共存的语言：机器码的运行效率高于 Java 解释器的\n    即时编辑器（JIT）: 优化将字节码转换为机器特定语言的过程相似的字节码\n    热点代码: 经常需要被调用的方法和代码块\n4. hashCode 和 equals\n    \n    对象的hashCode 作用：hashCode是一个整型，提高比较效率\n5. 线程，程序，进程\n    \n    程序: 程序是静态的代码\n    线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。\n    join() 定义在Thread.java中,作用是等待当前线程死亡，然后执行下一步\n    Thread sleep：睡眠，超时后自动回到就绪状态（不会释放对象锁的所有权），等待获取资源cpu\n    Object wait（This method should only be called by a thread that is the owner\n    * of this object's monitor.）：释放对象锁的所有权，线程处于阻塞状态，等待调用notify/notifyall\n    Wait和notify/notifyall 为啥是Object的方法\n    wait等待的是对象monitor，由于Java中的每一个对象都有一个内置的monitor对象，自然所有的类都理应有wait/notify方法\n    Yield（）\n6. 为什么局部变量需要显式设置初始化值 \n    \n    主要原因是执行顺序，对于局部变量而言，其赋值和取值访问顺序是确定的。Javac 不给局部变量设置初始值，主要原因是一种策略决定，一种规范\n\n\n\n\n","slug":"JAVA-笔记","published":1,"updated":"2019-02-21T09:39:59.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmci000038udntzka9mq","content":"<ol>\n<li><p>面向对象和面向过程的主要区别</p>\n<p>   面向过程：性能相对较高</p>\n<p>   面向对象：易扩展性，复用，维护</p>\n</li>\n<li><p>Java的一点特点</p>\n<p> 跨平台: Java 虚拟机实现平台无关性<br> 支持多线程，网络编程</p>\n</li>\n<li><p>jvm 和 jre</p>\n<p> Jvm：运行 Java 字节码的虚拟机<br> Java 是编译与解释共存的语言：机器码的运行效率高于 Java 解释器的<br> 即时编辑器（JIT）: 优化将字节码转换为机器特定语言的过程相似的字节码<br> 热点代码: 经常需要被调用的方法和代码块</p>\n</li>\n<li><p>hashCode 和 equals</p>\n<p> 对象的hashCode 作用：hashCode是一个整型，提高比较效率</p>\n</li>\n<li><p>线程，程序，进程</p>\n<p> 程序: 程序是静态的代码<br> 线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。<br> join() 定义在Thread.java中,作用是等待当前线程死亡，然后执行下一步<br> Thread sleep：睡眠，超时后自动回到就绪状态（不会释放对象锁的所有权），等待获取资源cpu<br> Object wait（This method should only be called by a thread that is the owner</p>\n<ul>\n<li>of this object’s monitor.）：释放对象锁的所有权，线程处于阻塞状态，等待调用notify/notifyall<br>Wait和notify/notifyall 为啥是Object的方法<br>wait等待的是对象monitor，由于Java中的每一个对象都有一个内置的monitor对象，自然所有的类都理应有wait/notify方法<br>Yield（）</li>\n</ul>\n</li>\n<li><p>为什么局部变量需要显式设置初始化值 </p>\n<p> 主要原因是执行顺序，对于局部变量而言，其赋值和取值访问顺序是确定的。Javac 不给局部变量设置初始值，主要原因是一种策略决定，一种规范</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>面向对象和面向过程的主要区别</p>\n<p>   面向过程：性能相对较高</p>\n<p>   面向对象：易扩展性，复用，维护</p>\n</li>\n<li><p>Java的一点特点</p>\n<p> 跨平台: Java 虚拟机实现平台无关性<br> 支持多线程，网络编程</p>\n</li>\n<li><p>jvm 和 jre</p>\n<p> Jvm：运行 Java 字节码的虚拟机<br> Java 是编译与解释共存的语言：机器码的运行效率高于 Java 解释器的<br> 即时编辑器（JIT）: 优化将字节码转换为机器特定语言的过程相似的字节码<br> 热点代码: 经常需要被调用的方法和代码块</p>\n</li>\n<li><p>hashCode 和 equals</p>\n<p> 对象的hashCode 作用：hashCode是一个整型，提高比较效率</p>\n</li>\n<li><p>线程，程序，进程</p>\n<p> 程序: 程序是静态的代码<br> 线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。<br> join() 定义在Thread.java中,作用是等待当前线程死亡，然后执行下一步<br> Thread sleep：睡眠，超时后自动回到就绪状态（不会释放对象锁的所有权），等待获取资源cpu<br> Object wait（This method should only be called by a thread that is the owner</p>\n<ul>\n<li>of this object’s monitor.）：释放对象锁的所有权，线程处于阻塞状态，等待调用notify/notifyall<br>Wait和notify/notifyall 为啥是Object的方法<br>wait等待的是对象monitor，由于Java中的每一个对象都有一个内置的monitor对象，自然所有的类都理应有wait/notify方法<br>Yield（）</li>\n</ul>\n</li>\n<li><p>为什么局部变量需要显式设置初始化值 </p>\n<p> 主要原因是执行顺序，对于局部变量而言，其赋值和取值访问顺序是确定的。Javac 不给局部变量设置初始值，主要原因是一种策略决定，一种规范</p>\n</li>\n</ol>\n"},{"title":"JAVA 8的新特性 - 1","date":"2019-02-22T09:34:48.000Z","_content":"Java 8 相比之前主要变化？\n\n# 1. Lambda 表达式\n\n可传递的一种匿名函数的方式：它没有名称，但是它有参数列表、函数体、返回类型，可能还有一个可抛出的异常列表。下面我们用例子来解释:\n\n* 匿名------我们说匿名，是因为它不像普通的方法那样有一个明确的名称：写得少而想  \n得多！\n\n* 函数------我们说它是函数，是因为Lambda函数不像方法那样属于某个特定的类。但和方法一样， Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。\n\n* 传递------Lambda表达式可以作为参数传递给方法或存储在变量中。\n\n* 简洁------无需像匿名类那样写很多模板代码。\n\n我们通过一段代码来发现Lambda 表达式的简洁之处：\n\n1：找出Person列表中 比传入age 更老的Person 列表，不通过Lambda表达式，写法如下：\n```\n    public static void printPersonsOlderThan(List\\<Person\\> roster, int age){\n        for (Person p : roster) {\n            if (p.getAge() \\>= age) {\n        \n                 p.printPerson();\n            }\n        }\n    }\n```\n2：接下来如果我们使用Lambda 表达式重写上段代码：\n\n```\nroster\n    .stream()\n    .filter(p -> {p.getAge() > age}).forEach(p -> p. p.printPerson());\n```\n使用Lambda 表达式之后让代码更整洁，读起来更清晰\n\nLambda 表达式词法：\n```\n* 在括号中参数列表用逗号分隔\n* 使用 ->\n* 如果有return声明，在Lambda 表达式中， 就必要用花括号来括起语句\n```\np -> {\n    return p. p.printPerson()\n}\n\n然而如果是一个void方法就不必使用{}\n\nemail -> System.out.println(email)\n\n\n# 2. 方法的引用\n\n重复使用现有的方法定义，并像Lambda一样传递它们函数式数据处理。下面就是四种方法的引用：\n\n\n    | **Kind**      | **Example**                          |\n    | 静态方法引用        | ContainingClass::staticMethodName    |\n    | 特定对象的方法引用     | containingObject::instanceMethodName |\n    | 特定类型的任意对象方法引用 | ContainingType::methodName           |\n    | 构造引用          | ClassName::new                       |\n\n下面我们通过代码来解释一下：\n\n```\npublic class Person {\n    public enum Sex {\n\n        MALE, FEMALE\n\n    }\n    String name;\n    LocalDate birthday;\n    Sex gender;\n    String emailAddress;\n    public int getAge() {\n        // ...\n    }\n    \n    public Calendar getBirthday() {\n        return birthday;\n    }    \n\n    public static int compareByAge(Person a, Person b) {\n        return a.birthday.compareTo(b.birthday);\n    }\n\n}\n```\n\n* 静态方法引用\n```\nPerson::compareByAge\n```\n\n* 特定对象的方法引用\n\n跟着一个例子来解释特定对象的方法引用\n\n```\nclass Student {\n\n    public int compareByAge(String a, String b) {\n\n        return a.compareTo(b);\n\n    }\n\n    public static void main(String[] args) {\n\n        Student stu = new Student();\n\n        String[] arr = {\"ABC\",\"abc\",\"sdf\",\"ddddd\",\"rrrttt\"};\n\n        Arrays.sort(arr,(a, b) -> stu.compareByAge(a,b));\n\n        Arrays.stream(arr).forEach(System.out::println);\n\n    }\n\n}\n```\n\n方法接收的是一个String对象\n\n\n* 特定类型的任意对象方法引用\n\n```\nString[] stringArray = { \"Barbara\", \"James\", \"Mary\", \"John\",\n\"Patricia\", \"Robert\", \"Michael\", \"Linda\" };\nArrays.sort(stringArray, String::compareToIgnoreCase);\n```\n这个方法引用将调用a.compareToIgnoreCase(b)方法\n```\n 构造引用\n使用Lambda 表达式 （） -\\> {return new HashMap\\<\\>();}\n```\n使用构造引用 HashSet::new 让Lambda 表达式有了一种快捷的写法\n```\n 特定对象的方法引用 和特定类型的任意对象方法引用的区别\nString::compareToIgnoreCase 中，当你引用对象的方法时，这个对象本身就是一个Lambda表达式的参数Lambda表达式(String s) -\\> s. compareToIgnoreCase ()可以写作String:: compareToIgnoreCase。而特定对象的方法引用则是(a, b) -\\> stu.compareByAge(a,b),等价stu::compareByAge\n```\n![](JAVA-8的新特性-1/1550828240.jpg)\n\n\n\n# 3. 接口的默认方法和静态方法\n\nJava 8 允许在接口中添加默认方法，这个默认方法和之前的抽象方法不一样，主要在于抽象方法实现者必要实现，默认方法实现者都包含，如果需要可以重写这个方法。具体我们通过例子来解释：\n\n创建一个car 接口，声明一个默认方法和一个静态方法\n\n\n```\npublic interface Car {\n\n    default void print() {\n\n        System.out.println(\"default------------\");\n\n    }\n\n    static Car create( Supplier<Car> supplier ) {\n\n        return supplier.get();\n\n    }\n\n}\n```\n实现newCar类\n```\npublic class NewCar implements Car {\n    public static void main(String[] args) {\n\n        Car newCar = Car.create(NewCar::new);\n\n        newCar.print();\n\n    }\n}\n```\n\n覆盖默认方法 OverriddenCar\n\n\n```\npublic class OverriddenCar implements Car {\n\n    @Override\n\n    public void print() {\n\n        System.out.println(\"OverriddenCar------------------\");\n\n    }\n\n    public static void main(String[] args) {\n\n        Car overriddenCar = Car.create(OverriddenCar::new);\n\n        overriddenCar.print();\n\n        Car newCar = Car.create(NewCar::new);\n\n        newCar.print();\n\n    }\n\n}\n```\n打印结果\n```\nOverriddenCar------------------\ndefault------------\n```\n\n在JVM中，默认方法的实现是非常高效的，并且通过字节码指令为方法调用提供了支持。默认方法允许继续使用现有的Java接口，而同时能够保障正常的编译过程。这方面好的例子是大量的方法被添加到java.util.Collection接口中去：stream()，parallelStream()，forEach()，removeIf()，......\n\n\n尽管默认方法非常强大，但是在使用默认方法时我们需要小心注意一个地方：在声明一个默认方法前，请仔细思考是不是真的有必要使用默认方法，因为默认方法会带给程序歧义，并且在复杂的继承体系中容易产生编译错误。\n\n参考文档：\n\n  [Java 8新特性终极指南](http://www.importnew.com/11908.html)\n\n  Java+8 实战书籍\n\n  [Java tutorial ](https://docs.oracle.com/javase/tutorial/)","source":"_posts/JAVA-8的新特性-1.md","raw":"---\ntitle: JAVA 8的新特性 - 1\ndate: 2019-02-22 17:34:48\ntags:\n- JAVA\n- Lambda 表达式\n---\nJava 8 相比之前主要变化？\n\n# 1. Lambda 表达式\n\n可传递的一种匿名函数的方式：它没有名称，但是它有参数列表、函数体、返回类型，可能还有一个可抛出的异常列表。下面我们用例子来解释:\n\n* 匿名------我们说匿名，是因为它不像普通的方法那样有一个明确的名称：写得少而想  \n得多！\n\n* 函数------我们说它是函数，是因为Lambda函数不像方法那样属于某个特定的类。但和方法一样， Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。\n\n* 传递------Lambda表达式可以作为参数传递给方法或存储在变量中。\n\n* 简洁------无需像匿名类那样写很多模板代码。\n\n我们通过一段代码来发现Lambda 表达式的简洁之处：\n\n1：找出Person列表中 比传入age 更老的Person 列表，不通过Lambda表达式，写法如下：\n```\n    public static void printPersonsOlderThan(List\\<Person\\> roster, int age){\n        for (Person p : roster) {\n            if (p.getAge() \\>= age) {\n        \n                 p.printPerson();\n            }\n        }\n    }\n```\n2：接下来如果我们使用Lambda 表达式重写上段代码：\n\n```\nroster\n    .stream()\n    .filter(p -> {p.getAge() > age}).forEach(p -> p. p.printPerson());\n```\n使用Lambda 表达式之后让代码更整洁，读起来更清晰\n\nLambda 表达式词法：\n```\n* 在括号中参数列表用逗号分隔\n* 使用 ->\n* 如果有return声明，在Lambda 表达式中， 就必要用花括号来括起语句\n```\np -> {\n    return p. p.printPerson()\n}\n\n然而如果是一个void方法就不必使用{}\n\nemail -> System.out.println(email)\n\n\n# 2. 方法的引用\n\n重复使用现有的方法定义，并像Lambda一样传递它们函数式数据处理。下面就是四种方法的引用：\n\n\n    | **Kind**      | **Example**                          |\n    | 静态方法引用        | ContainingClass::staticMethodName    |\n    | 特定对象的方法引用     | containingObject::instanceMethodName |\n    | 特定类型的任意对象方法引用 | ContainingType::methodName           |\n    | 构造引用          | ClassName::new                       |\n\n下面我们通过代码来解释一下：\n\n```\npublic class Person {\n    public enum Sex {\n\n        MALE, FEMALE\n\n    }\n    String name;\n    LocalDate birthday;\n    Sex gender;\n    String emailAddress;\n    public int getAge() {\n        // ...\n    }\n    \n    public Calendar getBirthday() {\n        return birthday;\n    }    \n\n    public static int compareByAge(Person a, Person b) {\n        return a.birthday.compareTo(b.birthday);\n    }\n\n}\n```\n\n* 静态方法引用\n```\nPerson::compareByAge\n```\n\n* 特定对象的方法引用\n\n跟着一个例子来解释特定对象的方法引用\n\n```\nclass Student {\n\n    public int compareByAge(String a, String b) {\n\n        return a.compareTo(b);\n\n    }\n\n    public static void main(String[] args) {\n\n        Student stu = new Student();\n\n        String[] arr = {\"ABC\",\"abc\",\"sdf\",\"ddddd\",\"rrrttt\"};\n\n        Arrays.sort(arr,(a, b) -> stu.compareByAge(a,b));\n\n        Arrays.stream(arr).forEach(System.out::println);\n\n    }\n\n}\n```\n\n方法接收的是一个String对象\n\n\n* 特定类型的任意对象方法引用\n\n```\nString[] stringArray = { \"Barbara\", \"James\", \"Mary\", \"John\",\n\"Patricia\", \"Robert\", \"Michael\", \"Linda\" };\nArrays.sort(stringArray, String::compareToIgnoreCase);\n```\n这个方法引用将调用a.compareToIgnoreCase(b)方法\n```\n 构造引用\n使用Lambda 表达式 （） -\\> {return new HashMap\\<\\>();}\n```\n使用构造引用 HashSet::new 让Lambda 表达式有了一种快捷的写法\n```\n 特定对象的方法引用 和特定类型的任意对象方法引用的区别\nString::compareToIgnoreCase 中，当你引用对象的方法时，这个对象本身就是一个Lambda表达式的参数Lambda表达式(String s) -\\> s. compareToIgnoreCase ()可以写作String:: compareToIgnoreCase。而特定对象的方法引用则是(a, b) -\\> stu.compareByAge(a,b),等价stu::compareByAge\n```\n![](JAVA-8的新特性-1/1550828240.jpg)\n\n\n\n# 3. 接口的默认方法和静态方法\n\nJava 8 允许在接口中添加默认方法，这个默认方法和之前的抽象方法不一样，主要在于抽象方法实现者必要实现，默认方法实现者都包含，如果需要可以重写这个方法。具体我们通过例子来解释：\n\n创建一个car 接口，声明一个默认方法和一个静态方法\n\n\n```\npublic interface Car {\n\n    default void print() {\n\n        System.out.println(\"default------------\");\n\n    }\n\n    static Car create( Supplier<Car> supplier ) {\n\n        return supplier.get();\n\n    }\n\n}\n```\n实现newCar类\n```\npublic class NewCar implements Car {\n    public static void main(String[] args) {\n\n        Car newCar = Car.create(NewCar::new);\n\n        newCar.print();\n\n    }\n}\n```\n\n覆盖默认方法 OverriddenCar\n\n\n```\npublic class OverriddenCar implements Car {\n\n    @Override\n\n    public void print() {\n\n        System.out.println(\"OverriddenCar------------------\");\n\n    }\n\n    public static void main(String[] args) {\n\n        Car overriddenCar = Car.create(OverriddenCar::new);\n\n        overriddenCar.print();\n\n        Car newCar = Car.create(NewCar::new);\n\n        newCar.print();\n\n    }\n\n}\n```\n打印结果\n```\nOverriddenCar------------------\ndefault------------\n```\n\n在JVM中，默认方法的实现是非常高效的，并且通过字节码指令为方法调用提供了支持。默认方法允许继续使用现有的Java接口，而同时能够保障正常的编译过程。这方面好的例子是大量的方法被添加到java.util.Collection接口中去：stream()，parallelStream()，forEach()，removeIf()，......\n\n\n尽管默认方法非常强大，但是在使用默认方法时我们需要小心注意一个地方：在声明一个默认方法前，请仔细思考是不是真的有必要使用默认方法，因为默认方法会带给程序歧义，并且在复杂的继承体系中容易产生编译错误。\n\n参考文档：\n\n  [Java 8新特性终极指南](http://www.importnew.com/11908.html)\n\n  Java+8 实战书籍\n\n  [Java tutorial ](https://docs.oracle.com/javase/tutorial/)","slug":"JAVA-8的新特性-1","published":1,"updated":"2019-02-22T10:01:58.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmcs000238uddbnysmdw","content":"<p>Java 8 相比之前主要变化？</p>\n<h1 id=\"1-Lambda-表达式\"><a href=\"#1-Lambda-表达式\" class=\"headerlink\" title=\"1. Lambda 表达式\"></a>1. Lambda 表达式</h1><p>可传递的一种匿名函数的方式：它没有名称，但是它有参数列表、函数体、返回类型，可能还有一个可抛出的异常列表。下面我们用例子来解释:</p>\n<ul>\n<li><p>匿名——我们说匿名，是因为它不像普通的方法那样有一个明确的名称：写得少而想<br>得多！</p>\n</li>\n<li><p>函数——我们说它是函数，是因为Lambda函数不像方法那样属于某个特定的类。但和方法一样， Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。</p>\n</li>\n<li><p>传递——Lambda表达式可以作为参数传递给方法或存储在变量中。</p>\n</li>\n<li><p>简洁——无需像匿名类那样写很多模板代码。</p>\n</li>\n</ul>\n<p>我们通过一段代码来发现Lambda 表达式的简洁之处：</p>\n<p>1：找出Person列表中 比传入age 更老的Person 列表，不通过Lambda表达式，写法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void printPersonsOlderThan(List\\&lt;Person\\&gt; roster, int age)&#123;</span><br><span class=\"line\">    for (Person p : roster) &#123;</span><br><span class=\"line\">        if (p.getAge() \\&gt;= age) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">             p.printPerson();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2：接下来如果我们使用Lambda 表达式重写上段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roster</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(p -&gt; &#123;p.getAge() &gt; age&#125;).forEach(p -&gt; p. p.printPerson());</span><br></pre></td></tr></table></figure>\n<p>使用Lambda 表达式之后让代码更整洁，读起来更清晰</p>\n<p>Lambda 表达式词法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 在括号中参数列表用逗号分隔</span><br><span class=\"line\">* 使用 -&gt;</span><br><span class=\"line\">* 如果有return声明，在Lambda 表达式中， 就必要用花括号来括起语句</span><br></pre></td></tr></table></figure></p>\n<p>p -&gt; {<br>    return p. p.printPerson()<br>}</p>\n<p>然而如果是一个void方法就不必使用{}</p>\n<p>email -&gt; System.out.println(email)</p>\n<h1 id=\"2-方法的引用\"><a href=\"#2-方法的引用\" class=\"headerlink\" title=\"2. 方法的引用\"></a>2. 方法的引用</h1><p>重复使用现有的方法定义，并像Lambda一样传递它们函数式数据处理。下面就是四种方法的引用：</p>\n<pre><code>| **Kind**      | **Example**                          |\n| 静态方法引用        | ContainingClass::staticMethodName    |\n| 特定对象的方法引用     | containingObject::instanceMethodName |\n| 特定类型的任意对象方法引用 | ContainingType::methodName           |\n| 构造引用          | ClassName::new                       |\n</code></pre><p>下面我们通过代码来解释一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    public enum Sex &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MALE, FEMALE</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    LocalDate birthday;</span><br><span class=\"line\">    Sex gender;</span><br><span class=\"line\">    String emailAddress;</span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Calendar getBirthday() &#123;</span><br><span class=\"line\">        return birthday;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">    public static int compareByAge(Person a, Person b) &#123;</span><br><span class=\"line\">        return a.birthday.compareTo(b.birthday);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>静态方法引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person::compareByAge</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特定对象的方法引用</p>\n</li>\n</ul>\n<p>跟着一个例子来解释特定对象的方法引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int compareByAge(String a, String b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return a.compareTo(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Student stu = new Student();</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] arr = &#123;&quot;ABC&quot;,&quot;abc&quot;,&quot;sdf&quot;,&quot;ddddd&quot;,&quot;rrrttt&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Arrays.sort(arr,(a, b) -&gt; stu.compareByAge(a,b));</span><br><span class=\"line\"></span><br><span class=\"line\">        Arrays.stream(arr).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法接收的是一个String对象</p>\n<ul>\n<li>特定类型的任意对象方法引用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] stringArray = &#123; &quot;Barbara&quot;, &quot;James&quot;, &quot;Mary&quot;, &quot;John&quot;,</span><br><span class=\"line\">&quot;Patricia&quot;, &quot;Robert&quot;, &quot;Michael&quot;, &quot;Linda&quot; &#125;;</span><br><span class=\"line\">Arrays.sort(stringArray, String::compareToIgnoreCase);</span><br></pre></td></tr></table></figure>\n<p>这个方法引用将调用a.compareToIgnoreCase(b)方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 构造引用</span><br><span class=\"line\">使用Lambda 表达式 （） -\\&gt; &#123;return new HashMap\\&lt;\\&gt;();&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用构造引用 HashSet::new 让Lambda 表达式有了一种快捷的写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 特定对象的方法引用 和特定类型的任意对象方法引用的区别</span><br><span class=\"line\">String::compareToIgnoreCase 中，当你引用对象的方法时，这个对象本身就是一个Lambda表达式的参数Lambda表达式(String s) -\\&gt; s. compareToIgnoreCase ()可以写作String:: compareToIgnoreCase。而特定对象的方法引用则是(a, b) -\\&gt; stu.compareByAge(a,b),等价stu::compareByAge</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/22/JAVA-8的新特性-1/1550828240.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"3-接口的默认方法和静态方法\"><a href=\"#3-接口的默认方法和静态方法\" class=\"headerlink\" title=\"3. 接口的默认方法和静态方法\"></a>3. 接口的默认方法和静态方法</h1><p>Java 8 允许在接口中添加默认方法，这个默认方法和之前的抽象方法不一样，主要在于抽象方法实现者必要实现，默认方法实现者都包含，如果需要可以重写这个方法。具体我们通过例子来解释：</p>\n<p>创建一个car 接口，声明一个默认方法和一个静态方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Car &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    default void print() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;default------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static Car create( Supplier&lt;Car&gt; supplier ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return supplier.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现newCar类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NewCar implements Car &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Car newCar = Car.create(NewCar::new);</span><br><span class=\"line\"></span><br><span class=\"line\">        newCar.print();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>覆盖默认方法 OverriddenCar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class OverriddenCar implements Car &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\"></span><br><span class=\"line\">    public void print() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;OverriddenCar------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Car overriddenCar = Car.create(OverriddenCar::new);</span><br><span class=\"line\"></span><br><span class=\"line\">        overriddenCar.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        Car newCar = Car.create(NewCar::new);</span><br><span class=\"line\"></span><br><span class=\"line\">        newCar.print();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OverriddenCar------------------</span><br><span class=\"line\">default------------</span><br></pre></td></tr></table></figure></p>\n<p>在JVM中，默认方法的实现是非常高效的，并且通过字节码指令为方法调用提供了支持。默认方法允许继续使用现有的Java接口，而同时能够保障正常的编译过程。这方面好的例子是大量的方法被添加到java.util.Collection接口中去：stream()，parallelStream()，forEach()，removeIf()，……</p>\n<p>尽管默认方法非常强大，但是在使用默认方法时我们需要小心注意一个地方：在声明一个默认方法前，请仔细思考是不是真的有必要使用默认方法，因为默认方法会带给程序歧义，并且在复杂的继承体系中容易产生编译错误。</p>\n<p>参考文档：</p>\n<p>  <a href=\"http://www.importnew.com/11908.html\" target=\"_blank\" rel=\"noopener\">Java 8新特性终极指南</a></p>\n<p>  Java+8 实战书籍</p>\n<p>  <a href=\"https://docs.oracle.com/javase/tutorial/\" target=\"_blank\" rel=\"noopener\">Java tutorial </a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Java 8 相比之前主要变化？</p>\n<h1 id=\"1-Lambda-表达式\"><a href=\"#1-Lambda-表达式\" class=\"headerlink\" title=\"1. Lambda 表达式\"></a>1. Lambda 表达式</h1><p>可传递的一种匿名函数的方式：它没有名称，但是它有参数列表、函数体、返回类型，可能还有一个可抛出的异常列表。下面我们用例子来解释:</p>\n<ul>\n<li><p>匿名——我们说匿名，是因为它不像普通的方法那样有一个明确的名称：写得少而想<br>得多！</p>\n</li>\n<li><p>函数——我们说它是函数，是因为Lambda函数不像方法那样属于某个特定的类。但和方法一样， Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。</p>\n</li>\n<li><p>传递——Lambda表达式可以作为参数传递给方法或存储在变量中。</p>\n</li>\n<li><p>简洁——无需像匿名类那样写很多模板代码。</p>\n</li>\n</ul>\n<p>我们通过一段代码来发现Lambda 表达式的简洁之处：</p>\n<p>1：找出Person列表中 比传入age 更老的Person 列表，不通过Lambda表达式，写法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void printPersonsOlderThan(List\\&lt;Person\\&gt; roster, int age)&#123;</span><br><span class=\"line\">    for (Person p : roster) &#123;</span><br><span class=\"line\">        if (p.getAge() \\&gt;= age) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">             p.printPerson();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2：接下来如果我们使用Lambda 表达式重写上段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roster</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(p -&gt; &#123;p.getAge() &gt; age&#125;).forEach(p -&gt; p. p.printPerson());</span><br></pre></td></tr></table></figure>\n<p>使用Lambda 表达式之后让代码更整洁，读起来更清晰</p>\n<p>Lambda 表达式词法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 在括号中参数列表用逗号分隔</span><br><span class=\"line\">* 使用 -&gt;</span><br><span class=\"line\">* 如果有return声明，在Lambda 表达式中， 就必要用花括号来括起语句</span><br></pre></td></tr></table></figure></p>\n<p>p -&gt; {<br>    return p. p.printPerson()<br>}</p>\n<p>然而如果是一个void方法就不必使用{}</p>\n<p>email -&gt; System.out.println(email)</p>\n<h1 id=\"2-方法的引用\"><a href=\"#2-方法的引用\" class=\"headerlink\" title=\"2. 方法的引用\"></a>2. 方法的引用</h1><p>重复使用现有的方法定义，并像Lambda一样传递它们函数式数据处理。下面就是四种方法的引用：</p>\n<pre><code>| **Kind**      | **Example**                          |\n| 静态方法引用        | ContainingClass::staticMethodName    |\n| 特定对象的方法引用     | containingObject::instanceMethodName |\n| 特定类型的任意对象方法引用 | ContainingType::methodName           |\n| 构造引用          | ClassName::new                       |\n</code></pre><p>下面我们通过代码来解释一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    public enum Sex &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MALE, FEMALE</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    LocalDate birthday;</span><br><span class=\"line\">    Sex gender;</span><br><span class=\"line\">    String emailAddress;</span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Calendar getBirthday() &#123;</span><br><span class=\"line\">        return birthday;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">    public static int compareByAge(Person a, Person b) &#123;</span><br><span class=\"line\">        return a.birthday.compareTo(b.birthday);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>静态方法引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person::compareByAge</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特定对象的方法引用</p>\n</li>\n</ul>\n<p>跟着一个例子来解释特定对象的方法引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int compareByAge(String a, String b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return a.compareTo(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Student stu = new Student();</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] arr = &#123;&quot;ABC&quot;,&quot;abc&quot;,&quot;sdf&quot;,&quot;ddddd&quot;,&quot;rrrttt&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Arrays.sort(arr,(a, b) -&gt; stu.compareByAge(a,b));</span><br><span class=\"line\"></span><br><span class=\"line\">        Arrays.stream(arr).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法接收的是一个String对象</p>\n<ul>\n<li>特定类型的任意对象方法引用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] stringArray = &#123; &quot;Barbara&quot;, &quot;James&quot;, &quot;Mary&quot;, &quot;John&quot;,</span><br><span class=\"line\">&quot;Patricia&quot;, &quot;Robert&quot;, &quot;Michael&quot;, &quot;Linda&quot; &#125;;</span><br><span class=\"line\">Arrays.sort(stringArray, String::compareToIgnoreCase);</span><br></pre></td></tr></table></figure>\n<p>这个方法引用将调用a.compareToIgnoreCase(b)方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 构造引用</span><br><span class=\"line\">使用Lambda 表达式 （） -\\&gt; &#123;return new HashMap\\&lt;\\&gt;();&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用构造引用 HashSet::new 让Lambda 表达式有了一种快捷的写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 特定对象的方法引用 和特定类型的任意对象方法引用的区别</span><br><span class=\"line\">String::compareToIgnoreCase 中，当你引用对象的方法时，这个对象本身就是一个Lambda表达式的参数Lambda表达式(String s) -\\&gt; s. compareToIgnoreCase ()可以写作String:: compareToIgnoreCase。而特定对象的方法引用则是(a, b) -\\&gt; stu.compareByAge(a,b),等价stu::compareByAge</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/22/JAVA-8的新特性-1/1550828240.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"3-接口的默认方法和静态方法\"><a href=\"#3-接口的默认方法和静态方法\" class=\"headerlink\" title=\"3. 接口的默认方法和静态方法\"></a>3. 接口的默认方法和静态方法</h1><p>Java 8 允许在接口中添加默认方法，这个默认方法和之前的抽象方法不一样，主要在于抽象方法实现者必要实现，默认方法实现者都包含，如果需要可以重写这个方法。具体我们通过例子来解释：</p>\n<p>创建一个car 接口，声明一个默认方法和一个静态方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Car &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    default void print() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;default------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static Car create( Supplier&lt;Car&gt; supplier ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return supplier.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现newCar类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NewCar implements Car &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Car newCar = Car.create(NewCar::new);</span><br><span class=\"line\"></span><br><span class=\"line\">        newCar.print();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>覆盖默认方法 OverriddenCar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class OverriddenCar implements Car &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\"></span><br><span class=\"line\">    public void print() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;OverriddenCar------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Car overriddenCar = Car.create(OverriddenCar::new);</span><br><span class=\"line\"></span><br><span class=\"line\">        overriddenCar.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        Car newCar = Car.create(NewCar::new);</span><br><span class=\"line\"></span><br><span class=\"line\">        newCar.print();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OverriddenCar------------------</span><br><span class=\"line\">default------------</span><br></pre></td></tr></table></figure></p>\n<p>在JVM中，默认方法的实现是非常高效的，并且通过字节码指令为方法调用提供了支持。默认方法允许继续使用现有的Java接口，而同时能够保障正常的编译过程。这方面好的例子是大量的方法被添加到java.util.Collection接口中去：stream()，parallelStream()，forEach()，removeIf()，……</p>\n<p>尽管默认方法非常强大，但是在使用默认方法时我们需要小心注意一个地方：在声明一个默认方法前，请仔细思考是不是真的有必要使用默认方法，因为默认方法会带给程序歧义，并且在复杂的继承体系中容易产生编译错误。</p>\n<p>参考文档：</p>\n<p>  <a href=\"http://www.importnew.com/11908.html\" target=\"_blank\" rel=\"noopener\">Java 8新特性终极指南</a></p>\n<p>  Java+8 实战书籍</p>\n<p>  <a href=\"https://docs.oracle.com/javase/tutorial/\" target=\"_blank\" rel=\"noopener\">Java tutorial </a></p>\n"},{"title":"Java 动态代理为啥需要接口？？？","date":"2019-03-15T01:43:16.000Z","_content":"\n带着问题，我们直接查看源码：\n```\npublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        Objects.requireNonNull(h);\n\n        final Class<?>[] intfs = interfaces.clone();\n        final SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);\n        }\n\n        /*\n         * Look up or generate the designated proxy class.\n         */\n        Class<?> cl = getProxyClass0(loader, intfs);\n\n        /*\n         * Invoke its constructor with the designated invocation handler.\n         */\n        try {\n            if (sm != null) {\n                checkNewProxyPermission(Reflection.getCallerClass(), cl);\n            }\n\n            final Constructor<?> cons = cl.getConstructor(constructorParams);\n            final InvocationHandler ih = h;\n            if (!Modifier.isPublic(cl.getModifiers())) {\n                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n                    public Void run() {\n                        cons.setAccessible(true);\n                        return null;\n                    }\n                });\n            }\n            return cons.newInstance(new Object[]{h});\n        }\n        ....\n    }\n```\n从源码上，首先进行一系列的判断逻辑，然后到了\nClass<?> cl = getProxyClass0(loader, intfs);\n获取代理类的Class 对象，接下来执行\n final Constructor<?> cons = cl.getConstructor(constructorParams);\n 获取Class的构造对象，通过cons.newInstance(new Object[]{h}); 返回一个代理类实例对象，具体参考 [Java反射](http://www.xulian.net.cn/2019/02/20/java-%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/) 。\n 目前我们只知道代理类对象的创建过程，但是为啥只能传入接口还是得不到解决，那我们只能继续查看getProxyClass0源码：\n 具体实现步骤：\n 1. 验证，通过类加载对象和接口列表获取代理类的Class对象，如果缓存中存在则返回，没有就通过代理类工厂创建代理类\n 2. 创建代理类\n通过ProxyClassFactory工厂创建代理类，核心代码如下\n```\nString proxyName = proxyPkg + proxyClassNamePrefix + num;\nbyte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);\ndefineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);\n```\n定义一个类的名称，通过传入的接口列表和访问标志生成一个代理类的字节码，最后调用defineClass0方法将字节码加载到类加载器中，创建一个代理类。\n现在我们来实现将代理类的字节码写入本地，查看具体代理类的信息：\n```\nbyte[] proxyClassFile = ProxyGenerator.generateProxyClass(\n                \"$proxy1\", new Class[] {Worker.class}, Modifier.PUBLIC);\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(\"D:/$proxy1.class\");\n            fos.write(proxyClassFile);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                fos.flush();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n```\n通过反编译启查看字节码：\n```\npublic class $proxy1 extends Proxy  implements Worker {\n....\npublic final void work()  throws  {\n    try  {\n      this.h.invoke(this, m3, null);\n      return;\n    }\n    ....\n  }\n....\n}\n```\n现在我们终于得到答案，为啥动态代理需要使用接口，主要原因是代理类已经继承了Proxy类，Java不支持多继承所以导致动态代理需要使用接口，接口支持多继承。终于可以说服自己为啥动态代理需要接口了。。。。。\n\n参考文档：\njdk 8\n","source":"_posts/Java-动态代理为啥需要接口？？？.md","raw":"---\ntitle: Java 动态代理为啥需要接口？？？\ndate: 2019-03-15 09:43:16\ntags:\n- java\n- 动态代理\n---\n\n带着问题，我们直接查看源码：\n```\npublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        Objects.requireNonNull(h);\n\n        final Class<?>[] intfs = interfaces.clone();\n        final SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);\n        }\n\n        /*\n         * Look up or generate the designated proxy class.\n         */\n        Class<?> cl = getProxyClass0(loader, intfs);\n\n        /*\n         * Invoke its constructor with the designated invocation handler.\n         */\n        try {\n            if (sm != null) {\n                checkNewProxyPermission(Reflection.getCallerClass(), cl);\n            }\n\n            final Constructor<?> cons = cl.getConstructor(constructorParams);\n            final InvocationHandler ih = h;\n            if (!Modifier.isPublic(cl.getModifiers())) {\n                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n                    public Void run() {\n                        cons.setAccessible(true);\n                        return null;\n                    }\n                });\n            }\n            return cons.newInstance(new Object[]{h});\n        }\n        ....\n    }\n```\n从源码上，首先进行一系列的判断逻辑，然后到了\nClass<?> cl = getProxyClass0(loader, intfs);\n获取代理类的Class 对象，接下来执行\n final Constructor<?> cons = cl.getConstructor(constructorParams);\n 获取Class的构造对象，通过cons.newInstance(new Object[]{h}); 返回一个代理类实例对象，具体参考 [Java反射](http://www.xulian.net.cn/2019/02/20/java-%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/) 。\n 目前我们只知道代理类对象的创建过程，但是为啥只能传入接口还是得不到解决，那我们只能继续查看getProxyClass0源码：\n 具体实现步骤：\n 1. 验证，通过类加载对象和接口列表获取代理类的Class对象，如果缓存中存在则返回，没有就通过代理类工厂创建代理类\n 2. 创建代理类\n通过ProxyClassFactory工厂创建代理类，核心代码如下\n```\nString proxyName = proxyPkg + proxyClassNamePrefix + num;\nbyte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);\ndefineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);\n```\n定义一个类的名称，通过传入的接口列表和访问标志生成一个代理类的字节码，最后调用defineClass0方法将字节码加载到类加载器中，创建一个代理类。\n现在我们来实现将代理类的字节码写入本地，查看具体代理类的信息：\n```\nbyte[] proxyClassFile = ProxyGenerator.generateProxyClass(\n                \"$proxy1\", new Class[] {Worker.class}, Modifier.PUBLIC);\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(\"D:/$proxy1.class\");\n            fos.write(proxyClassFile);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                fos.flush();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n```\n通过反编译启查看字节码：\n```\npublic class $proxy1 extends Proxy  implements Worker {\n....\npublic final void work()  throws  {\n    try  {\n      this.h.invoke(this, m3, null);\n      return;\n    }\n    ....\n  }\n....\n}\n```\n现在我们终于得到答案，为啥动态代理需要使用接口，主要原因是代理类已经继承了Proxy类，Java不支持多继承所以导致动态代理需要使用接口，接口支持多继承。终于可以说服自己为啥动态代理需要接口了。。。。。\n\n参考文档：\njdk 8\n","slug":"Java-动态代理为啥需要接口？？？","published":1,"updated":"2019-03-15T01:44:49.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmd1000538udy533hnuv","content":"<p>带着问题，我们直接查看源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader,</span><br><span class=\"line\">                                          Class&lt;?&gt;[] interfaces,</span><br><span class=\"line\">                                          InvocationHandler h)</span><br><span class=\"line\">        throws IllegalArgumentException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Objects.requireNonNull(h);</span><br><span class=\"line\"></span><br><span class=\"line\">        final Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">        final SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">        if (sm != null) &#123;</span><br><span class=\"line\">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Look up or generate the designated proxy class.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\"></span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Invoke its constructor with the designated invocation handler.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (sm != null) &#123;</span><br><span class=\"line\">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">            final InvocationHandler ih = h;</span><br><span class=\"line\">            if (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">                AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                    public Void run() &#123;</span><br><span class=\"line\">                        cons.setAccessible(true);</span><br><span class=\"line\">                        return null;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return cons.newInstance(new Object[]&#123;h&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>从源码上，首先进行一系列的判断逻辑，然后到了<br>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);<br>获取代理类的Class 对象，接下来执行<br> final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);<br> 获取Class的构造对象，通过cons.newInstance(new Object[]{h}); 返回一个代理类实例对象，具体参考 <a href=\"http://www.xulian.net.cn/2019/02/20/java-%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">Java反射</a> 。<br> 目前我们只知道代理类对象的创建过程，但是为啥只能传入接口还是得不到解决，那我们只能继续查看getProxyClass0源码：<br> 具体实现步骤：</p>\n<ol>\n<li>验证，通过类加载对象和接口列表获取代理类的Class对象，如果缓存中存在则返回，没有就通过代理类工厂创建代理类</li>\n<li>创建代理类<br>通过ProxyClassFactory工厂创建代理类，核心代码如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class=\"line\">byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);</span><br><span class=\"line\">defineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>定义一个类的名称，通过传入的接口列表和访问标志生成一个代理类的字节码，最后调用defineClass0方法将字节码加载到类加载器中，创建一个代理类。<br>现在我们来实现将代理类的字节码写入本地，查看具体代理类的信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class=\"line\">                &quot;$proxy1&quot;, new Class[] &#123;Worker.class&#125;, Modifier.PUBLIC);</span><br><span class=\"line\">        FileOutputStream fos = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            fos = new FileOutputStream(&quot;D:/$proxy1.class&quot;);</span><br><span class=\"line\">            fos.write(proxyClassFile);</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                fos.flush();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过反编译启查看字节码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class $proxy1 extends Proxy  implements Worker &#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">public final void work()  throws  &#123;</span><br><span class=\"line\">    try  &#123;</span><br><span class=\"line\">      this.h.invoke(this, m3, null);</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们终于得到答案，为啥动态代理需要使用接口，主要原因是代理类已经继承了Proxy类，Java不支持多继承所以导致动态代理需要使用接口，接口支持多继承。终于可以说服自己为啥动态代理需要接口了。。。。。</p>\n<p>参考文档：<br>jdk 8</p>\n","site":{"data":{}},"excerpt":"","more":"<p>带着问题，我们直接查看源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader,</span><br><span class=\"line\">                                          Class&lt;?&gt;[] interfaces,</span><br><span class=\"line\">                                          InvocationHandler h)</span><br><span class=\"line\">        throws IllegalArgumentException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Objects.requireNonNull(h);</span><br><span class=\"line\"></span><br><span class=\"line\">        final Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">        final SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">        if (sm != null) &#123;</span><br><span class=\"line\">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Look up or generate the designated proxy class.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\"></span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Invoke its constructor with the designated invocation handler.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (sm != null) &#123;</span><br><span class=\"line\">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">            final InvocationHandler ih = h;</span><br><span class=\"line\">            if (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">                AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                    public Void run() &#123;</span><br><span class=\"line\">                        cons.setAccessible(true);</span><br><span class=\"line\">                        return null;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return cons.newInstance(new Object[]&#123;h&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>从源码上，首先进行一系列的判断逻辑，然后到了<br>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);<br>获取代理类的Class 对象，接下来执行<br> final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);<br> 获取Class的构造对象，通过cons.newInstance(new Object[]{h}); 返回一个代理类实例对象，具体参考 <a href=\"http://www.xulian.net.cn/2019/02/20/java-%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">Java反射</a> 。<br> 目前我们只知道代理类对象的创建过程，但是为啥只能传入接口还是得不到解决，那我们只能继续查看getProxyClass0源码：<br> 具体实现步骤：</p>\n<ol>\n<li>验证，通过类加载对象和接口列表获取代理类的Class对象，如果缓存中存在则返回，没有就通过代理类工厂创建代理类</li>\n<li>创建代理类<br>通过ProxyClassFactory工厂创建代理类，核心代码如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class=\"line\">byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);</span><br><span class=\"line\">defineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>定义一个类的名称，通过传入的接口列表和访问标志生成一个代理类的字节码，最后调用defineClass0方法将字节码加载到类加载器中，创建一个代理类。<br>现在我们来实现将代理类的字节码写入本地，查看具体代理类的信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class=\"line\">                &quot;$proxy1&quot;, new Class[] &#123;Worker.class&#125;, Modifier.PUBLIC);</span><br><span class=\"line\">        FileOutputStream fos = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            fos = new FileOutputStream(&quot;D:/$proxy1.class&quot;);</span><br><span class=\"line\">            fos.write(proxyClassFile);</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                fos.flush();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过反编译启查看字节码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class $proxy1 extends Proxy  implements Worker &#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">public final void work()  throws  &#123;</span><br><span class=\"line\">    try  &#123;</span><br><span class=\"line\">      this.h.invoke(this, m3, null);</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们终于得到答案，为啥动态代理需要使用接口，主要原因是代理类已经继承了Proxy类，Java不支持多继承所以导致动态代理需要使用接口，接口支持多继承。终于可以说服自己为啥动态代理需要接口了。。。。。</p>\n<p>参考文档：<br>jdk 8</p>\n"},{"title":"Java 集合","date":"2019-03-15T01:56:13.000Z","_content":"\n# 1.\t什么叫数据结构？\n在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。\n# 2. 结构有哪些？\n常见的数据结构主要有8种，引用百度百科的图：\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228100803325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n# 3.\t一些数据结构在Java中的具体体现？\n1.\tList 接口\nList 具体实现类有ArrayList, LinkedList, Vector，下面我们来介绍一下它们的原理，区别和使用方式\n* ArrayList\nArrayList 实现于 List、RandomAccess 接口。可以插入空数据，也支持随机访问。内部实现采用动态数组，当容量不够时，自动扩容至（当前容量1.5倍）。元素的顺序按照插入的顺序排列。默认初始容量为10。随机访问效率高，随机插入、删除效率低。主要的属性是elementData 数组，以及 size 大小。在执行添加add（）方法时\n```\n\tpublic boolean add(E e) {\n\t    ensureCapacityInternal(size + 1);  // Increments modCount!!\n\t    elementData[size++] = e;\n\t    return true;\n\t}\n```\n 主要是做扩容判断，然后再将数据插入到数组中。Add（int index，E data）方法是在特定的位置，插入特定的元素。Index 不大于数组的大小，这种方式添加\n ```\n\tpublic void add(int index, E element) {\n\t    rangeCheckForAdd(index);\n\t    ensureCapacityInternal(size + 1);  // Increments modCount!!\n\t    System.arraycopy(elementData, index, elementData, index + 1,\n\t                     size - index);\n\t    elementData[index] = element;\n\t    size++;\n\t}\n```\n首先检查index是否超过当前数组的大小，是否扩容判断，数组的复制将需要插入的位置的元素往后移一位，最后执行插入特定元素。\n数组的开销主要在于，创建开辟数组空间和数组中的元素移动，所以在平时的操作中，尽量避免使用Add（int index，E data）方法，创建数组前确认数组的长度等。\n* \tLinkedList\nLinkedList内部使用双向链表实现，随机访问效率低，随机插入、删除效率高。可以当作堆栈、队列、双向队列来使用。LinkedList也是非线程安全的。\n链表为啥插入或删除效率高，访问效率低？\n主要原因是双链表就是每个node不仅包含指向下后一个结点的引用，还包含着指向前一个结点的引用。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度O(1)。\n链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。接下来单独写一篇关于链表的文章，来具体了解一下链表。\n* Vector\nVector跟ArrayList是类似的，内部实现也是动态数组，随机访问效率高。Vector是线程安全的。\n由于Vector内部使用了synchronized，所以线程是安全的，但是整体的开销就很大，效率不高。\n2.\tSet\nSet是不能包含重合元素的容器，其实现类有HashSet，继承于它的接口有SortedSet接口等。Set中提供了加、减、和交等集合操作函数。Set不能按照索引随机访问元素，这是它与List的一个重要区别。\n讲两个set实现类 hashSet 和 TreeSet\n* \thashSet\nHashSet内部是使用HashMap实现的，HashSet的key值是不允许重复的，如果放入的对象是自定义对象，那么最好能够同时重写hashCode与equals函数，这样就能自定义添加的对象在什么样的情况下是一样的，即能保证在业务逻辑下能添加对象到HashSet中，保证业务逻辑的正确性。另外，HashSet里的元素不是按照顺序存储的。HashSet是非线程安全的。\n*\tTreeSet\n一般情况下set是无序的，但是TreeSet存储的元素是按顺序存储的，如果是存储的元素是自定义对象，那么需要实现Comparable接口。TreeSet也是非线程安全的。\n3.\tMap\nMap集合提供了按照“键值对”存储元素的方法，一个键唯一映射一个值。集合中“键值对”整体作为一个实体元素时，类似List集合，但是如果分开来讲，Map是一个两列元素的集合：键是一列，值是一列。与Set集合一样，Map也没有提供随机访问的能力，只能通过键来访问对应的值。\nMap的每一个元素都是一个Map.Entry，这个实体的结构是< Key, Value >样式。\n* Map总结\nHashMap存储键值对。当程序试图将一个key-value对放入 HashMap 中时，程序首先根据该key的hashCode()返回值决定该Entry的存储位置：如果两个Entry的key的hashCode() 返回值相同，那它们的存储位置相同。如果这两个Entry的key通过equals比较返回true，新添加Entry的value将覆盖集合中原有Entry的 value，但key不会覆盖。如果这两个Entry的key通过equals 比较返回false，新添加的Entry将与集合中原有Entry形成Entry 链，而且新添加的 Entry 位于 Entry 链的头部。由于HashMap多线程下扩容会出线程不安全，具体参考[谈谈HashMap线程不安全的体现]( https://blog.csdn.net/qq_24184997/article/details/87979866)这篇文章。\n接下来一篇单独讲一下hashMap 在Java8跟之前版本的变化和另一个ConcurrentHashMap 能解决并发情况下的线程不安全\n# 4. 总结：\n大概讲了一下什么是数据结构，Java集合中一些实现类底层使用的数据结构，并详细介绍了一些Java集合实现类的特点和区别。\n\n参考文档:\n[数据结构](https://zh.wikipedia.org/zh-hans/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\n[JCSprout](https://crossoverjie.top/JCSprout/#/?id=introduction)\n","source":"_posts/Java-集合.md","raw":"---\ntitle: Java 集合\ndate: 2019-03-15 09:56:13\ntags:\n- JAVA\n---\n\n# 1.\t什么叫数据结构？\n在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。\n# 2. 结构有哪些？\n常见的数据结构主要有8种，引用百度百科的图：\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228100803325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n# 3.\t一些数据结构在Java中的具体体现？\n1.\tList 接口\nList 具体实现类有ArrayList, LinkedList, Vector，下面我们来介绍一下它们的原理，区别和使用方式\n* ArrayList\nArrayList 实现于 List、RandomAccess 接口。可以插入空数据，也支持随机访问。内部实现采用动态数组，当容量不够时，自动扩容至（当前容量1.5倍）。元素的顺序按照插入的顺序排列。默认初始容量为10。随机访问效率高，随机插入、删除效率低。主要的属性是elementData 数组，以及 size 大小。在执行添加add（）方法时\n```\n\tpublic boolean add(E e) {\n\t    ensureCapacityInternal(size + 1);  // Increments modCount!!\n\t    elementData[size++] = e;\n\t    return true;\n\t}\n```\n 主要是做扩容判断，然后再将数据插入到数组中。Add（int index，E data）方法是在特定的位置，插入特定的元素。Index 不大于数组的大小，这种方式添加\n ```\n\tpublic void add(int index, E element) {\n\t    rangeCheckForAdd(index);\n\t    ensureCapacityInternal(size + 1);  // Increments modCount!!\n\t    System.arraycopy(elementData, index, elementData, index + 1,\n\t                     size - index);\n\t    elementData[index] = element;\n\t    size++;\n\t}\n```\n首先检查index是否超过当前数组的大小，是否扩容判断，数组的复制将需要插入的位置的元素往后移一位，最后执行插入特定元素。\n数组的开销主要在于，创建开辟数组空间和数组中的元素移动，所以在平时的操作中，尽量避免使用Add（int index，E data）方法，创建数组前确认数组的长度等。\n* \tLinkedList\nLinkedList内部使用双向链表实现，随机访问效率低，随机插入、删除效率高。可以当作堆栈、队列、双向队列来使用。LinkedList也是非线程安全的。\n链表为啥插入或删除效率高，访问效率低？\n主要原因是双链表就是每个node不仅包含指向下后一个结点的引用，还包含着指向前一个结点的引用。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度O(1)。\n链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。接下来单独写一篇关于链表的文章，来具体了解一下链表。\n* Vector\nVector跟ArrayList是类似的，内部实现也是动态数组，随机访问效率高。Vector是线程安全的。\n由于Vector内部使用了synchronized，所以线程是安全的，但是整体的开销就很大，效率不高。\n2.\tSet\nSet是不能包含重合元素的容器，其实现类有HashSet，继承于它的接口有SortedSet接口等。Set中提供了加、减、和交等集合操作函数。Set不能按照索引随机访问元素，这是它与List的一个重要区别。\n讲两个set实现类 hashSet 和 TreeSet\n* \thashSet\nHashSet内部是使用HashMap实现的，HashSet的key值是不允许重复的，如果放入的对象是自定义对象，那么最好能够同时重写hashCode与equals函数，这样就能自定义添加的对象在什么样的情况下是一样的，即能保证在业务逻辑下能添加对象到HashSet中，保证业务逻辑的正确性。另外，HashSet里的元素不是按照顺序存储的。HashSet是非线程安全的。\n*\tTreeSet\n一般情况下set是无序的，但是TreeSet存储的元素是按顺序存储的，如果是存储的元素是自定义对象，那么需要实现Comparable接口。TreeSet也是非线程安全的。\n3.\tMap\nMap集合提供了按照“键值对”存储元素的方法，一个键唯一映射一个值。集合中“键值对”整体作为一个实体元素时，类似List集合，但是如果分开来讲，Map是一个两列元素的集合：键是一列，值是一列。与Set集合一样，Map也没有提供随机访问的能力，只能通过键来访问对应的值。\nMap的每一个元素都是一个Map.Entry，这个实体的结构是< Key, Value >样式。\n* Map总结\nHashMap存储键值对。当程序试图将一个key-value对放入 HashMap 中时，程序首先根据该key的hashCode()返回值决定该Entry的存储位置：如果两个Entry的key的hashCode() 返回值相同，那它们的存储位置相同。如果这两个Entry的key通过equals比较返回true，新添加Entry的value将覆盖集合中原有Entry的 value，但key不会覆盖。如果这两个Entry的key通过equals 比较返回false，新添加的Entry将与集合中原有Entry形成Entry 链，而且新添加的 Entry 位于 Entry 链的头部。由于HashMap多线程下扩容会出线程不安全，具体参考[谈谈HashMap线程不安全的体现]( https://blog.csdn.net/qq_24184997/article/details/87979866)这篇文章。\n接下来一篇单独讲一下hashMap 在Java8跟之前版本的变化和另一个ConcurrentHashMap 能解决并发情况下的线程不安全\n# 4. 总结：\n大概讲了一下什么是数据结构，Java集合中一些实现类底层使用的数据结构，并详细介绍了一些Java集合实现类的特点和区别。\n\n参考文档:\n[数据结构](https://zh.wikipedia.org/zh-hans/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\n[JCSprout](https://crossoverjie.top/JCSprout/#/?id=introduction)\n","slug":"Java-集合","published":1,"updated":"2019-03-15T01:57:44.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmd4000638ud43ymt6zs","content":"<h1 id=\"1-什么叫数据结构？\"><a href=\"#1-什么叫数据结构？\" class=\"headerlink\" title=\"1.    什么叫数据结构？\"></a>1.    什么叫数据结构？</h1><p>在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。</p>\n<h1 id=\"2-结构有哪些？\"><a href=\"#2-结构有哪些？\" class=\"headerlink\" title=\"2. 结构有哪些？\"></a>2. 结构有哪些？</h1><p>常见的数据结构主要有8种，引用百度百科的图：<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228100803325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"3-一些数据结构在Java中的具体体现？\"><a href=\"#3-一些数据结构在Java中的具体体现？\" class=\"headerlink\" title=\"3.    一些数据结构在Java中的具体体现？\"></a>3.    一些数据结构在Java中的具体体现？</h1><ol>\n<li>List 接口<br>List 具体实现类有ArrayList, LinkedList, Vector，下面我们来介绍一下它们的原理，区别和使用方式</li>\n</ol>\n<ul>\n<li><p>ArrayList<br>ArrayList 实现于 List、RandomAccess 接口。可以插入空数据，也支持随机访问。内部实现采用动态数组，当容量不够时，自动扩容至（当前容量1.5倍）。元素的顺序按照插入的顺序排列。默认初始容量为10。随机访问效率高，随机插入、删除效率低。主要的属性是elementData 数组，以及 size 大小。在执行添加add（）方法时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要是做扩容判断，然后再将数据插入到数组中。Add（int index，E data）方法是在特定的位置，插入特定的元素。Index 不大于数组的大小，这种方式添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void add(int index, E element) &#123;</span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + 1,</span><br><span class=\"line\">                     size - index);</span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>首先检查index是否超过当前数组的大小，是否扩容判断，数组的复制将需要插入的位置的元素往后移一位，最后执行插入特定元素。<br>数组的开销主要在于，创建开辟数组空间和数组中的元素移动，所以在平时的操作中，尽量避免使用Add（int index，E data）方法，创建数组前确认数组的长度等。</p>\n<ul>\n<li>LinkedList<br>LinkedList内部使用双向链表实现，随机访问效率低，随机插入、删除效率高。可以当作堆栈、队列、双向队列来使用。LinkedList也是非线程安全的。<br>链表为啥插入或删除效率高，访问效率低？<br>主要原因是双链表就是每个node不仅包含指向下后一个结点的引用，还包含着指向前一个结点的引用。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度O(1)。<br>链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。接下来单独写一篇关于链表的文章，来具体了解一下链表。</li>\n<li>Vector<br>Vector跟ArrayList是类似的，内部实现也是动态数组，随机访问效率高。Vector是线程安全的。<br>由于Vector内部使用了synchronized，所以线程是安全的，但是整体的开销就很大，效率不高。</li>\n</ul>\n<ol start=\"2\">\n<li>Set<br>Set是不能包含重合元素的容器，其实现类有HashSet，继承于它的接口有SortedSet接口等。Set中提供了加、减、和交等集合操作函数。Set不能按照索引随机访问元素，这是它与List的一个重要区别。<br>讲两个set实现类 hashSet 和 TreeSet</li>\n</ol>\n<ul>\n<li>hashSet<br>HashSet内部是使用HashMap实现的，HashSet的key值是不允许重复的，如果放入的对象是自定义对象，那么最好能够同时重写hashCode与equals函数，这样就能自定义添加的对象在什么样的情况下是一样的，即能保证在业务逻辑下能添加对象到HashSet中，保证业务逻辑的正确性。另外，HashSet里的元素不是按照顺序存储的。HashSet是非线程安全的。</li>\n<li>TreeSet<br>一般情况下set是无序的，但是TreeSet存储的元素是按顺序存储的，如果是存储的元素是自定义对象，那么需要实现Comparable接口。TreeSet也是非线程安全的。</li>\n</ul>\n<ol start=\"3\">\n<li>Map<br>Map集合提供了按照“键值对”存储元素的方法，一个键唯一映射一个值。集合中“键值对”整体作为一个实体元素时，类似List集合，但是如果分开来讲，Map是一个两列元素的集合：键是一列，值是一列。与Set集合一样，Map也没有提供随机访问的能力，只能通过键来访问对应的值。<br>Map的每一个元素都是一个Map.Entry，这个实体的结构是&lt; Key, Value &gt;样式。</li>\n</ol>\n<ul>\n<li>Map总结<br>HashMap存储键值对。当程序试图将一个key-value对放入 HashMap 中时，程序首先根据该key的hashCode()返回值决定该Entry的存储位置：如果两个Entry的key的hashCode() 返回值相同，那它们的存储位置相同。如果这两个Entry的key通过equals比较返回true，新添加Entry的value将覆盖集合中原有Entry的 value，但key不会覆盖。如果这两个Entry的key通过equals 比较返回false，新添加的Entry将与集合中原有Entry形成Entry 链，而且新添加的 Entry 位于 Entry 链的头部。由于HashMap多线程下扩容会出线程不安全，具体参考<a href=\"https://blog.csdn.net/qq_24184997/article/details/87979866\" target=\"_blank\" rel=\"noopener\">谈谈HashMap线程不安全的体现</a>这篇文章。<br>接下来一篇单独讲一下hashMap 在Java8跟之前版本的变化和另一个ConcurrentHashMap 能解决并发情况下的线程不安全<h1 id=\"4-总结：\"><a href=\"#4-总结：\" class=\"headerlink\" title=\"4. 总结：\"></a>4. 总结：</h1>大概讲了一下什么是数据结构，Java集合中一些实现类底层使用的数据结构，并详细介绍了一些Java集合实现类的特点和区别。</li>\n</ul>\n<p>参考文档:<br><a href=\"https://zh.wikipedia.org/zh-hans/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\" target=\"_blank\" rel=\"noopener\">数据结构</a><br><a href=\"https://crossoverjie.top/JCSprout/#/?id=introduction\" target=\"_blank\" rel=\"noopener\">JCSprout</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-什么叫数据结构？\"><a href=\"#1-什么叫数据结构？\" class=\"headerlink\" title=\"1.    什么叫数据结构？\"></a>1.    什么叫数据结构？</h1><p>在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。</p>\n<h1 id=\"2-结构有哪些？\"><a href=\"#2-结构有哪些？\" class=\"headerlink\" title=\"2. 结构有哪些？\"></a>2. 结构有哪些？</h1><p>常见的数据结构主要有8种，引用百度百科的图：<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228100803325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"3-一些数据结构在Java中的具体体现？\"><a href=\"#3-一些数据结构在Java中的具体体现？\" class=\"headerlink\" title=\"3.    一些数据结构在Java中的具体体现？\"></a>3.    一些数据结构在Java中的具体体现？</h1><ol>\n<li>List 接口<br>List 具体实现类有ArrayList, LinkedList, Vector，下面我们来介绍一下它们的原理，区别和使用方式</li>\n</ol>\n<ul>\n<li><p>ArrayList<br>ArrayList 实现于 List、RandomAccess 接口。可以插入空数据，也支持随机访问。内部实现采用动态数组，当容量不够时，自动扩容至（当前容量1.5倍）。元素的顺序按照插入的顺序排列。默认初始容量为10。随机访问效率高，随机插入、删除效率低。主要的属性是elementData 数组，以及 size 大小。在执行添加add（）方法时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要是做扩容判断，然后再将数据插入到数组中。Add（int index，E data）方法是在特定的位置，插入特定的元素。Index 不大于数组的大小，这种方式添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void add(int index, E element) &#123;</span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + 1,</span><br><span class=\"line\">                     size - index);</span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>首先检查index是否超过当前数组的大小，是否扩容判断，数组的复制将需要插入的位置的元素往后移一位，最后执行插入特定元素。<br>数组的开销主要在于，创建开辟数组空间和数组中的元素移动，所以在平时的操作中，尽量避免使用Add（int index，E data）方法，创建数组前确认数组的长度等。</p>\n<ul>\n<li>LinkedList<br>LinkedList内部使用双向链表实现，随机访问效率低，随机插入、删除效率高。可以当作堆栈、队列、双向队列来使用。LinkedList也是非线程安全的。<br>链表为啥插入或删除效率高，访问效率低？<br>主要原因是双链表就是每个node不仅包含指向下后一个结点的引用，还包含着指向前一个结点的引用。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度O(1)。<br>链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。接下来单独写一篇关于链表的文章，来具体了解一下链表。</li>\n<li>Vector<br>Vector跟ArrayList是类似的，内部实现也是动态数组，随机访问效率高。Vector是线程安全的。<br>由于Vector内部使用了synchronized，所以线程是安全的，但是整体的开销就很大，效率不高。</li>\n</ul>\n<ol start=\"2\">\n<li>Set<br>Set是不能包含重合元素的容器，其实现类有HashSet，继承于它的接口有SortedSet接口等。Set中提供了加、减、和交等集合操作函数。Set不能按照索引随机访问元素，这是它与List的一个重要区别。<br>讲两个set实现类 hashSet 和 TreeSet</li>\n</ol>\n<ul>\n<li>hashSet<br>HashSet内部是使用HashMap实现的，HashSet的key值是不允许重复的，如果放入的对象是自定义对象，那么最好能够同时重写hashCode与equals函数，这样就能自定义添加的对象在什么样的情况下是一样的，即能保证在业务逻辑下能添加对象到HashSet中，保证业务逻辑的正确性。另外，HashSet里的元素不是按照顺序存储的。HashSet是非线程安全的。</li>\n<li>TreeSet<br>一般情况下set是无序的，但是TreeSet存储的元素是按顺序存储的，如果是存储的元素是自定义对象，那么需要实现Comparable接口。TreeSet也是非线程安全的。</li>\n</ul>\n<ol start=\"3\">\n<li>Map<br>Map集合提供了按照“键值对”存储元素的方法，一个键唯一映射一个值。集合中“键值对”整体作为一个实体元素时，类似List集合，但是如果分开来讲，Map是一个两列元素的集合：键是一列，值是一列。与Set集合一样，Map也没有提供随机访问的能力，只能通过键来访问对应的值。<br>Map的每一个元素都是一个Map.Entry，这个实体的结构是&lt; Key, Value &gt;样式。</li>\n</ol>\n<ul>\n<li>Map总结<br>HashMap存储键值对。当程序试图将一个key-value对放入 HashMap 中时，程序首先根据该key的hashCode()返回值决定该Entry的存储位置：如果两个Entry的key的hashCode() 返回值相同，那它们的存储位置相同。如果这两个Entry的key通过equals比较返回true，新添加Entry的value将覆盖集合中原有Entry的 value，但key不会覆盖。如果这两个Entry的key通过equals 比较返回false，新添加的Entry将与集合中原有Entry形成Entry 链，而且新添加的 Entry 位于 Entry 链的头部。由于HashMap多线程下扩容会出线程不安全，具体参考<a href=\"https://blog.csdn.net/qq_24184997/article/details/87979866\" target=\"_blank\" rel=\"noopener\">谈谈HashMap线程不安全的体现</a>这篇文章。<br>接下来一篇单独讲一下hashMap 在Java8跟之前版本的变化和另一个ConcurrentHashMap 能解决并发情况下的线程不安全<h1 id=\"4-总结：\"><a href=\"#4-总结：\" class=\"headerlink\" title=\"4. 总结：\"></a>4. 总结：</h1>大概讲了一下什么是数据结构，Java集合中一些实现类底层使用的数据结构，并详细介绍了一些Java集合实现类的特点和区别。</li>\n</ul>\n<p>参考文档:<br><a href=\"https://zh.wikipedia.org/zh-hans/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\" target=\"_blank\" rel=\"noopener\">数据结构</a><br><a href=\"https://crossoverjie.top/JCSprout/#/?id=introduction\" target=\"_blank\" rel=\"noopener\">JCSprout</a></p>\n"},{"title":"Linux下项目自动部署脚本","date":"2019-02-18T09:06:43.000Z","_content":"这是本人第一次写shell 脚本，如果有一点错误的地方请谅解\n\n因为平时上线部署项目都是手动进行的，大概分四步:\n\n1：备份正在运行的项目文件\n\n2：关闭Tomcat\n\n3：复制需要部署的项目文件到Tomcat的weapps路径下\n\n4：启动Tomcat，并打印启动日志信息\n\n因为我们公司需要上线的项目版本，测试统一放在测试服务器的ftp下。线上项目部署在线上服务器，所以没有做从测试ftp拉取项目到线上服务器。这步操作需要自己手动将文件放置到线上服务器的某个路径，本人在线上服务器上创建了一个目录用于存放部署文件，并取名 online_delopy_project。\n\n说了这么多了，接下里开始写第一个shell 脚本用于部署项目\n\n\n    #!/bin/bash\n    TOMCAT_HOME=/home/xxxx/apache-tomcat-7.0.84 #服务器路径\n    BACKUP_HOME=/home/xxxx/yuelinghui-manage #备份文件的路径\n    ONLINE_PROJECT_HOME=/home/xxxx/online_delopy_project#需要上线部署的文件路径\n    PROJECT_VERSION=1.2.2 #项目的版本号\n    cd $BACKUP_HOME\n    new_file=yuelinghui_v${PROJECT_VERSION}_date +%Y%m%d #创建备份文件\n    mkdir $new_file\n    cp -rf $TOMCAT_HOME/webapps/ROOT/ $BACKUP_HOME/$new_file\n    ${TOMCAT_HOME}/bin/catalina.sh stop || true\n    sleep 1s #睡眠一秒 防止服务器没有关闭，就执行删除项目的操作\n    echo ‘删除服务器中的项目，重新部署’\n    rm -rf $TOMCAT_HOME/webapps/ROOT/\n    echo ‘部署开始。。。。’\n    cp -rf $ONLINE_PROJECT_HOME/* $TOMCAT_HOME/webapps/ROOT/\n    echo ‘启动tomcat。。。。’\n    ${TOMCAT_HOME}/bin/catalina.sh start || true\n    sleep 1s\n    echo ‘打印启用日志信息。。。。。。’\n    tail -10f ${TOMCAT_HOME}/logs/catalina.out\n    \n    date +%Y%m%d 获取当前时间\n","source":"_posts/Linux下项目自动部署脚本.md","raw":"---\ntitle: Linux下项目自动部署脚本\ndate: 2019-02-18 17:06:43\n---\n这是本人第一次写shell 脚本，如果有一点错误的地方请谅解\n\n因为平时上线部署项目都是手动进行的，大概分四步:\n\n1：备份正在运行的项目文件\n\n2：关闭Tomcat\n\n3：复制需要部署的项目文件到Tomcat的weapps路径下\n\n4：启动Tomcat，并打印启动日志信息\n\n因为我们公司需要上线的项目版本，测试统一放在测试服务器的ftp下。线上项目部署在线上服务器，所以没有做从测试ftp拉取项目到线上服务器。这步操作需要自己手动将文件放置到线上服务器的某个路径，本人在线上服务器上创建了一个目录用于存放部署文件，并取名 online_delopy_project。\n\n说了这么多了，接下里开始写第一个shell 脚本用于部署项目\n\n\n    #!/bin/bash\n    TOMCAT_HOME=/home/xxxx/apache-tomcat-7.0.84 #服务器路径\n    BACKUP_HOME=/home/xxxx/yuelinghui-manage #备份文件的路径\n    ONLINE_PROJECT_HOME=/home/xxxx/online_delopy_project#需要上线部署的文件路径\n    PROJECT_VERSION=1.2.2 #项目的版本号\n    cd $BACKUP_HOME\n    new_file=yuelinghui_v${PROJECT_VERSION}_date +%Y%m%d #创建备份文件\n    mkdir $new_file\n    cp -rf $TOMCAT_HOME/webapps/ROOT/ $BACKUP_HOME/$new_file\n    ${TOMCAT_HOME}/bin/catalina.sh stop || true\n    sleep 1s #睡眠一秒 防止服务器没有关闭，就执行删除项目的操作\n    echo ‘删除服务器中的项目，重新部署’\n    rm -rf $TOMCAT_HOME/webapps/ROOT/\n    echo ‘部署开始。。。。’\n    cp -rf $ONLINE_PROJECT_HOME/* $TOMCAT_HOME/webapps/ROOT/\n    echo ‘启动tomcat。。。。’\n    ${TOMCAT_HOME}/bin/catalina.sh start || true\n    sleep 1s\n    echo ‘打印启用日志信息。。。。。。’\n    tail -10f ${TOMCAT_HOME}/logs/catalina.out\n    \n    date +%Y%m%d 获取当前时间\n","slug":"Linux下项目自动部署脚本","published":1,"updated":"2019-02-19T10:20:39.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmd6000738udp66fayww","content":"<p>这是本人第一次写shell 脚本，如果有一点错误的地方请谅解</p>\n<p>因为平时上线部署项目都是手动进行的，大概分四步:</p>\n<p>1：备份正在运行的项目文件</p>\n<p>2：关闭Tomcat</p>\n<p>3：复制需要部署的项目文件到Tomcat的weapps路径下</p>\n<p>4：启动Tomcat，并打印启动日志信息</p>\n<p>因为我们公司需要上线的项目版本，测试统一放在测试服务器的ftp下。线上项目部署在线上服务器，所以没有做从测试ftp拉取项目到线上服务器。这步操作需要自己手动将文件放置到线上服务器的某个路径，本人在线上服务器上创建了一个目录用于存放部署文件，并取名 online_delopy_project。</p>\n<p>说了这么多了，接下里开始写第一个shell 脚本用于部署项目</p>\n<pre><code>#!/bin/bash\nTOMCAT_HOME=/home/xxxx/apache-tomcat-7.0.84 #服务器路径\nBACKUP_HOME=/home/xxxx/yuelinghui-manage #备份文件的路径\nONLINE_PROJECT_HOME=/home/xxxx/online_delopy_project#需要上线部署的文件路径\nPROJECT_VERSION=1.2.2 #项目的版本号\ncd $BACKUP_HOME\nnew_file=yuelinghui_v${PROJECT_VERSION}_date +%Y%m%d #创建备份文件\nmkdir $new_file\ncp -rf $TOMCAT_HOME/webapps/ROOT/ $BACKUP_HOME/$new_file\n${TOMCAT_HOME}/bin/catalina.sh stop || true\nsleep 1s #睡眠一秒 防止服务器没有关闭，就执行删除项目的操作\necho ‘删除服务器中的项目，重新部署’\nrm -rf $TOMCAT_HOME/webapps/ROOT/\necho ‘部署开始。。。。’\ncp -rf $ONLINE_PROJECT_HOME/* $TOMCAT_HOME/webapps/ROOT/\necho ‘启动tomcat。。。。’\n${TOMCAT_HOME}/bin/catalina.sh start || true\nsleep 1s\necho ‘打印启用日志信息。。。。。。’\ntail -10f ${TOMCAT_HOME}/logs/catalina.out\n\ndate +%Y%m%d 获取当前时间\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>这是本人第一次写shell 脚本，如果有一点错误的地方请谅解</p>\n<p>因为平时上线部署项目都是手动进行的，大概分四步:</p>\n<p>1：备份正在运行的项目文件</p>\n<p>2：关闭Tomcat</p>\n<p>3：复制需要部署的项目文件到Tomcat的weapps路径下</p>\n<p>4：启动Tomcat，并打印启动日志信息</p>\n<p>因为我们公司需要上线的项目版本，测试统一放在测试服务器的ftp下。线上项目部署在线上服务器，所以没有做从测试ftp拉取项目到线上服务器。这步操作需要自己手动将文件放置到线上服务器的某个路径，本人在线上服务器上创建了一个目录用于存放部署文件，并取名 online_delopy_project。</p>\n<p>说了这么多了，接下里开始写第一个shell 脚本用于部署项目</p>\n<pre><code>#!/bin/bash\nTOMCAT_HOME=/home/xxxx/apache-tomcat-7.0.84 #服务器路径\nBACKUP_HOME=/home/xxxx/yuelinghui-manage #备份文件的路径\nONLINE_PROJECT_HOME=/home/xxxx/online_delopy_project#需要上线部署的文件路径\nPROJECT_VERSION=1.2.2 #项目的版本号\ncd $BACKUP_HOME\nnew_file=yuelinghui_v${PROJECT_VERSION}_date +%Y%m%d #创建备份文件\nmkdir $new_file\ncp -rf $TOMCAT_HOME/webapps/ROOT/ $BACKUP_HOME/$new_file\n${TOMCAT_HOME}/bin/catalina.sh stop || true\nsleep 1s #睡眠一秒 防止服务器没有关闭，就执行删除项目的操作\necho ‘删除服务器中的项目，重新部署’\nrm -rf $TOMCAT_HOME/webapps/ROOT/\necho ‘部署开始。。。。’\ncp -rf $ONLINE_PROJECT_HOME/* $TOMCAT_HOME/webapps/ROOT/\necho ‘启动tomcat。。。。’\n${TOMCAT_HOME}/bin/catalina.sh start || true\nsleep 1s\necho ‘打印启用日志信息。。。。。。’\ntail -10f ${TOMCAT_HOME}/logs/catalina.out\n\ndate +%Y%m%d 获取当前时间\n</code></pre>"},{"title":"@ModelAttribute 对象没有无参的构造函数出错详解","date":"2019-02-18T09:15:47.000Z","_content":"如果对象没有无参的构造函数 @ModelAttribute 获取参数会报异常\n\n![ModelAttribute-对象没有无参的构造函数出错详解](ModelAttribute-对象没有无参的构造函数出错详解-1/20180627151839209.png)\n\n \n\n通过反射出来的对象的参数类型（无参构造函数）和 类中构造函数（只有有参构造函数，没有无参构造函数 注释：当类中没有有参构造函数，会默认有一个无参构造函数，没有则无无参构造函数）的参数类型对比，\n\n![ModelAttribute-对象没有无参的构造函数出错详解](ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105206677.png)\n\n参数对比 ，两者不一致 返回false\n\n![ModelAttribute-对象没有无参的构造函数出错详解](ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105954917.png)\n\n最后抛出没有方法的异常信息\n\n","source":"_posts/ModelAttribute-对象没有无参的构造函数出错详解-1.md","raw":"---\ntitle: '@ModelAttribute 对象没有无参的构造函数出错详解'\ndate: 2019-02-18 17:15:47\ntags:\n---\n如果对象没有无参的构造函数 @ModelAttribute 获取参数会报异常\n\n![ModelAttribute-对象没有无参的构造函数出错详解](ModelAttribute-对象没有无参的构造函数出错详解-1/20180627151839209.png)\n\n \n\n通过反射出来的对象的参数类型（无参构造函数）和 类中构造函数（只有有参构造函数，没有无参构造函数 注释：当类中没有有参构造函数，会默认有一个无参构造函数，没有则无无参构造函数）的参数类型对比，\n\n![ModelAttribute-对象没有无参的构造函数出错详解](ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105206677.png)\n\n参数对比 ，两者不一致 返回false\n\n![ModelAttribute-对象没有无参的构造函数出错详解](ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105954917.png)\n\n最后抛出没有方法的异常信息\n\n","slug":"ModelAttribute-对象没有无参的构造函数出错详解-1","published":1,"updated":"2019-02-18T09:19:18.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmdc000a38udxnuumkid","content":"<p>如果对象没有无参的构造函数 @ModelAttribute 获取参数会报异常</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/20180627151839209.png\" alt=\"ModelAttribute-对象没有无参的构造函数出错详解\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ModelAttribute-对象没有无参的构造函数出错详解</div>\n            </figure>\n<p>通过反射出来的对象的参数类型（无参构造函数）和 类中构造函数（只有有参构造函数，没有无参构造函数 注释：当类中没有有参构造函数，会默认有一个无参构造函数，没有则无无参构造函数）的参数类型对比，</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105206677.png\" alt=\"ModelAttribute-对象没有无参的构造函数出错详解\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ModelAttribute-对象没有无参的构造函数出错详解</div>\n            </figure>\n<p>参数对比 ，两者不一致 返回false</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105954917.png\" alt=\"ModelAttribute-对象没有无参的构造函数出错详解\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ModelAttribute-对象没有无参的构造函数出错详解</div>\n            </figure>\n<p>最后抛出没有方法的异常信息</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果对象没有无参的构造函数 @ModelAttribute 获取参数会报异常</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/20180627151839209.png\" alt=\"ModelAttribute-对象没有无参的构造函数出错详解\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ModelAttribute-对象没有无参的构造函数出错详解</div>\n            </figure>\n<p>通过反射出来的对象的参数类型（无参构造函数）和 类中构造函数（只有有参构造函数，没有无参构造函数 注释：当类中没有有参构造函数，会默认有一个无参构造函数，没有则无无参构造函数）的参数类型对比，</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105206677.png\" alt=\"ModelAttribute-对象没有无参的构造函数出错详解\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ModelAttribute-对象没有无参的构造函数出错详解</div>\n            </figure>\n<p>参数对比 ，两者不一致 返回false</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/18/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105954917.png\" alt=\"ModelAttribute-对象没有无参的构造函数出错详解\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ModelAttribute-对象没有无参的构造函数出错详解</div>\n            </figure>\n<p>最后抛出没有方法的异常信息</p>\n"},{"title":"cookie 和 session 的区别","date":"2019-02-26T01:42:48.000Z","_content":"今天我们来讲一下 cookie和 session的一些区别，下面通过几个方面来说明它们之间的差异？\n# 1. 为啥需要session和cookie?\n由于http是无状态的，如果需要追踪用户的记录主要引入session 追踪用户，一般我们常用session 记录用户的登录态，存放用户的一些信息 主要用于用户浏览其他页面时对用户登录态的判断。\n# 2. 存在位置\ncookie 是基于client端 而 session 基于 server端\n# 3.系统安全性\n   由于基于client，存在浏览器上所以可能会导致cookie被窃取导致密码别泄露，出现这种原因主要是在公用网络下操作或者一些不安全的网络。其实这种情况下cookie被窃取也会导致session不安全，因为一般情况下，session key（session ID 用于标识用户，一般情况下 session 有效时间是30分钟和关闭浏览器失去登录态，session 失效主要原因在于session id 失效，重新打开浏览器会重新获取新的session ID） 存储在cookie中，会导致session不安全，还有一种情况就是存放在URL中，这种方式session ID 直接暴露在URL 更不安全，其实安全这问题都是相对的，下面我们讲一下如何使系统变的安全\n\n  1. 保护好自己的cookie，在非安全的网络下，禁止将账号密码存在cookie中\n  2. 通过程序来保障安全，session 记录用户登录的浏览器的 UA 头和ip地址等信息，在一些敏感操作下验证登录时浏览器的 UA 头和ip地址等信息，判断是否一致来确定安全。\n  3. 程序中尽量使用一些框架来管理好session，对session做一个监控，定期清除session信息。\n  4. 确定的关闭方式，当用户退出登录时，清除cookie 中的session ID ，session 存储的内容等信息。\n  5. 尽量将网站从http变成https，这样传输中可以避免cookie被劫持。\n  6. cookie的过期时间不能设置过长，cookie和session 过期时间尽量设置一样，一旦cookie过期了 session ID 也跟着过期，但是有一种情况，session当用户刷新页面，session 会一直续期。虽然前面说的cookie过期了，其实 session ID 还没有过期这样也会导致问题出现。\n  小结：安全问题是相对的，主要你做到上面几点，安全问题自然对你影响不大。\n\n# 4. 存储内容大小\n\n1. 浏览器对cookie数量和cookie存储大小有限制，下面对不同浏览器cookie限制做一个介绍\n| |IE6.0  |IE7.0/8.0  | Opera | Chrome | Safari\n|cookie个数|每个域为20个|每个域为50个|每个域为30个|每个域为53个|没有个数限制|\n|cookie大小|4095个字节|\t4095个字节|4096个字节|4097个字节|4097个字节|\n总之对页面cookie 操作，尽量数量小于20总大小小于4kb，过期时间不能设置过长，避免内容过多导致浏览器自动清除内容把一些有用的字段如 session ID 导致登录态丢失，需要重新登录\n\n2. session 存在服务器中，对小于没有很严格的限制，但是也不能存放过多的内容，主要是服务器内存有限一旦创建过多的内容占据大量的内存，会导致内存不足等情况出现，影响其他操作。\n\n# 5. 总结\nsession和cookie在项目中需要结合使用，了解它们的区别进而能更好的利用它们\n\n参考文档：\n1. [Cookie个数限制及大小](https://my.oschina.net/gaollg/blog/71299)\n2. [正确理解 Session 的安全性](https://www.jianshu.com/p/c4b32eb24894)\n","source":"_posts/cookie-和-session-的区别.md","raw":"---\ntitle: cookie 和 session 的区别\ndate: 2019-02-26 09:42:48\ntags:\n- http\n- 网络安全\n---\n今天我们来讲一下 cookie和 session的一些区别，下面通过几个方面来说明它们之间的差异？\n# 1. 为啥需要session和cookie?\n由于http是无状态的，如果需要追踪用户的记录主要引入session 追踪用户，一般我们常用session 记录用户的登录态，存放用户的一些信息 主要用于用户浏览其他页面时对用户登录态的判断。\n# 2. 存在位置\ncookie 是基于client端 而 session 基于 server端\n# 3.系统安全性\n   由于基于client，存在浏览器上所以可能会导致cookie被窃取导致密码别泄露，出现这种原因主要是在公用网络下操作或者一些不安全的网络。其实这种情况下cookie被窃取也会导致session不安全，因为一般情况下，session key（session ID 用于标识用户，一般情况下 session 有效时间是30分钟和关闭浏览器失去登录态，session 失效主要原因在于session id 失效，重新打开浏览器会重新获取新的session ID） 存储在cookie中，会导致session不安全，还有一种情况就是存放在URL中，这种方式session ID 直接暴露在URL 更不安全，其实安全这问题都是相对的，下面我们讲一下如何使系统变的安全\n\n  1. 保护好自己的cookie，在非安全的网络下，禁止将账号密码存在cookie中\n  2. 通过程序来保障安全，session 记录用户登录的浏览器的 UA 头和ip地址等信息，在一些敏感操作下验证登录时浏览器的 UA 头和ip地址等信息，判断是否一致来确定安全。\n  3. 程序中尽量使用一些框架来管理好session，对session做一个监控，定期清除session信息。\n  4. 确定的关闭方式，当用户退出登录时，清除cookie 中的session ID ，session 存储的内容等信息。\n  5. 尽量将网站从http变成https，这样传输中可以避免cookie被劫持。\n  6. cookie的过期时间不能设置过长，cookie和session 过期时间尽量设置一样，一旦cookie过期了 session ID 也跟着过期，但是有一种情况，session当用户刷新页面，session 会一直续期。虽然前面说的cookie过期了，其实 session ID 还没有过期这样也会导致问题出现。\n  小结：安全问题是相对的，主要你做到上面几点，安全问题自然对你影响不大。\n\n# 4. 存储内容大小\n\n1. 浏览器对cookie数量和cookie存储大小有限制，下面对不同浏览器cookie限制做一个介绍\n| |IE6.0  |IE7.0/8.0  | Opera | Chrome | Safari\n|cookie个数|每个域为20个|每个域为50个|每个域为30个|每个域为53个|没有个数限制|\n|cookie大小|4095个字节|\t4095个字节|4096个字节|4097个字节|4097个字节|\n总之对页面cookie 操作，尽量数量小于20总大小小于4kb，过期时间不能设置过长，避免内容过多导致浏览器自动清除内容把一些有用的字段如 session ID 导致登录态丢失，需要重新登录\n\n2. session 存在服务器中，对小于没有很严格的限制，但是也不能存放过多的内容，主要是服务器内存有限一旦创建过多的内容占据大量的内存，会导致内存不足等情况出现，影响其他操作。\n\n# 5. 总结\nsession和cookie在项目中需要结合使用，了解它们的区别进而能更好的利用它们\n\n参考文档：\n1. [Cookie个数限制及大小](https://my.oschina.net/gaollg/blog/71299)\n2. [正确理解 Session 的安全性](https://www.jianshu.com/p/c4b32eb24894)\n","slug":"cookie-和-session-的区别","published":1,"updated":"2019-02-26T03:49:19.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmdf000c38udddnehgka","content":"<p>今天我们来讲一下 cookie和 session的一些区别，下面通过几个方面来说明它们之间的差异？</p>\n<h1 id=\"1-为啥需要session和cookie\"><a href=\"#1-为啥需要session和cookie\" class=\"headerlink\" title=\"1. 为啥需要session和cookie?\"></a>1. 为啥需要session和cookie?</h1><p>由于http是无状态的，如果需要追踪用户的记录主要引入session 追踪用户，一般我们常用session 记录用户的登录态，存放用户的一些信息 主要用于用户浏览其他页面时对用户登录态的判断。</p>\n<h1 id=\"2-存在位置\"><a href=\"#2-存在位置\" class=\"headerlink\" title=\"2. 存在位置\"></a>2. 存在位置</h1><p>cookie 是基于client端 而 session 基于 server端</p>\n<h1 id=\"3-系统安全性\"><a href=\"#3-系统安全性\" class=\"headerlink\" title=\"3.系统安全性\"></a>3.系统安全性</h1><p>   由于基于client，存在浏览器上所以可能会导致cookie被窃取导致密码别泄露，出现这种原因主要是在公用网络下操作或者一些不安全的网络。其实这种情况下cookie被窃取也会导致session不安全，因为一般情况下，session key（session ID 用于标识用户，一般情况下 session 有效时间是30分钟和关闭浏览器失去登录态，session 失效主要原因在于session id 失效，重新打开浏览器会重新获取新的session ID） 存储在cookie中，会导致session不安全，还有一种情况就是存放在URL中，这种方式session ID 直接暴露在URL 更不安全，其实安全这问题都是相对的，下面我们讲一下如何使系统变的安全</p>\n<ol>\n<li>保护好自己的cookie，在非安全的网络下，禁止将账号密码存在cookie中</li>\n<li>通过程序来保障安全，session 记录用户登录的浏览器的 UA 头和ip地址等信息，在一些敏感操作下验证登录时浏览器的 UA 头和ip地址等信息，判断是否一致来确定安全。</li>\n<li>程序中尽量使用一些框架来管理好session，对session做一个监控，定期清除session信息。</li>\n<li>确定的关闭方式，当用户退出登录时，清除cookie 中的session ID ，session 存储的内容等信息。</li>\n<li>尽量将网站从http变成https，这样传输中可以避免cookie被劫持。</li>\n<li>cookie的过期时间不能设置过长，cookie和session 过期时间尽量设置一样，一旦cookie过期了 session ID 也跟着过期，但是有一种情况，session当用户刷新页面，session 会一直续期。虽然前面说的cookie过期了，其实 session ID 还没有过期这样也会导致问题出现。<br>小结：安全问题是相对的，主要你做到上面几点，安全问题自然对你影响不大。</li>\n</ol>\n<h1 id=\"4-存储内容大小\"><a href=\"#4-存储内容大小\" class=\"headerlink\" title=\"4. 存储内容大小\"></a>4. 存储内容大小</h1><ol>\n<li><p>浏览器对cookie数量和cookie存储大小有限制，下面对不同浏览器cookie限制做一个介绍<br>| |IE6.0  |IE7.0/8.0  | Opera | Chrome | Safari<br>|cookie个数|每个域为20个|每个域为50个|每个域为30个|每个域为53个|没有个数限制|<br>|cookie大小|4095个字节|    4095个字节|4096个字节|4097个字节|4097个字节|<br>总之对页面cookie 操作，尽量数量小于20总大小小于4kb，过期时间不能设置过长，避免内容过多导致浏览器自动清除内容把一些有用的字段如 session ID 导致登录态丢失，需要重新登录</p>\n</li>\n<li><p>session 存在服务器中，对小于没有很严格的限制，但是也不能存放过多的内容，主要是服务器内存有限一旦创建过多的内容占据大量的内存，会导致内存不足等情况出现，影响其他操作。</p>\n</li>\n</ol>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><p>session和cookie在项目中需要结合使用，了解它们的区别进而能更好的利用它们</p>\n<p>参考文档：</p>\n<ol>\n<li><a href=\"https://my.oschina.net/gaollg/blog/71299\" target=\"_blank\" rel=\"noopener\">Cookie个数限制及大小</a></li>\n<li><a href=\"https://www.jianshu.com/p/c4b32eb24894\" target=\"_blank\" rel=\"noopener\">正确理解 Session 的安全性</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>今天我们来讲一下 cookie和 session的一些区别，下面通过几个方面来说明它们之间的差异？</p>\n<h1 id=\"1-为啥需要session和cookie\"><a href=\"#1-为啥需要session和cookie\" class=\"headerlink\" title=\"1. 为啥需要session和cookie?\"></a>1. 为啥需要session和cookie?</h1><p>由于http是无状态的，如果需要追踪用户的记录主要引入session 追踪用户，一般我们常用session 记录用户的登录态，存放用户的一些信息 主要用于用户浏览其他页面时对用户登录态的判断。</p>\n<h1 id=\"2-存在位置\"><a href=\"#2-存在位置\" class=\"headerlink\" title=\"2. 存在位置\"></a>2. 存在位置</h1><p>cookie 是基于client端 而 session 基于 server端</p>\n<h1 id=\"3-系统安全性\"><a href=\"#3-系统安全性\" class=\"headerlink\" title=\"3.系统安全性\"></a>3.系统安全性</h1><p>   由于基于client，存在浏览器上所以可能会导致cookie被窃取导致密码别泄露，出现这种原因主要是在公用网络下操作或者一些不安全的网络。其实这种情况下cookie被窃取也会导致session不安全，因为一般情况下，session key（session ID 用于标识用户，一般情况下 session 有效时间是30分钟和关闭浏览器失去登录态，session 失效主要原因在于session id 失效，重新打开浏览器会重新获取新的session ID） 存储在cookie中，会导致session不安全，还有一种情况就是存放在URL中，这种方式session ID 直接暴露在URL 更不安全，其实安全这问题都是相对的，下面我们讲一下如何使系统变的安全</p>\n<ol>\n<li>保护好自己的cookie，在非安全的网络下，禁止将账号密码存在cookie中</li>\n<li>通过程序来保障安全，session 记录用户登录的浏览器的 UA 头和ip地址等信息，在一些敏感操作下验证登录时浏览器的 UA 头和ip地址等信息，判断是否一致来确定安全。</li>\n<li>程序中尽量使用一些框架来管理好session，对session做一个监控，定期清除session信息。</li>\n<li>确定的关闭方式，当用户退出登录时，清除cookie 中的session ID ，session 存储的内容等信息。</li>\n<li>尽量将网站从http变成https，这样传输中可以避免cookie被劫持。</li>\n<li>cookie的过期时间不能设置过长，cookie和session 过期时间尽量设置一样，一旦cookie过期了 session ID 也跟着过期，但是有一种情况，session当用户刷新页面，session 会一直续期。虽然前面说的cookie过期了，其实 session ID 还没有过期这样也会导致问题出现。<br>小结：安全问题是相对的，主要你做到上面几点，安全问题自然对你影响不大。</li>\n</ol>\n<h1 id=\"4-存储内容大小\"><a href=\"#4-存储内容大小\" class=\"headerlink\" title=\"4. 存储内容大小\"></a>4. 存储内容大小</h1><ol>\n<li><p>浏览器对cookie数量和cookie存储大小有限制，下面对不同浏览器cookie限制做一个介绍<br>| |IE6.0  |IE7.0/8.0  | Opera | Chrome | Safari<br>|cookie个数|每个域为20个|每个域为50个|每个域为30个|每个域为53个|没有个数限制|<br>|cookie大小|4095个字节|    4095个字节|4096个字节|4097个字节|4097个字节|<br>总之对页面cookie 操作，尽量数量小于20总大小小于4kb，过期时间不能设置过长，避免内容过多导致浏览器自动清除内容把一些有用的字段如 session ID 导致登录态丢失，需要重新登录</p>\n</li>\n<li><p>session 存在服务器中，对小于没有很严格的限制，但是也不能存放过多的内容，主要是服务器内存有限一旦创建过多的内容占据大量的内存，会导致内存不足等情况出现，影响其他操作。</p>\n</li>\n</ol>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><p>session和cookie在项目中需要结合使用，了解它们的区别进而能更好的利用它们</p>\n<p>参考文档：</p>\n<ol>\n<li><a href=\"https://my.oschina.net/gaollg/blog/71299\" target=\"_blank\" rel=\"noopener\">Cookie个数限制及大小</a></li>\n<li><a href=\"https://www.jianshu.com/p/c4b32eb24894\" target=\"_blank\" rel=\"noopener\">正确理解 Session 的安全性</a></li>\n</ol>\n"},{"title":"get 请求中文乱码问题","date":"2019-02-22T01:49:52.000Z","_content":"对于浏览器发出的HTTP请求： tomcat 默认是ISO-8859-1 解码\n\n   URI： xxxxx.action?key=\"+encodeURIComponent(“中文”)\n\n   在服务器获取 到key的值是tomcat使用 ISO-8859-1编码进行解码的字符，会出现乱码的问题。目前有两种方式可以解决该问题。\n\n    1：通过转成编码为ISO-8859-1字节数组，然后再转成UTF-8的字符串\n\n String value= new String(request.getParameter(\"key\").getBytes(\"ISO-8859-1\"), \"UTF-8\"); \n\n    2：在页面上进行两次编码\n\n        xxxxx.action?key=\"+encodeURIComponent（encodeURIComponent(“中文”)）\n\n后台获取数据： String value= URLDecoder.decode( request.getParameter(\"key\"),\"UTF-8\")\n\n实现原理：\n\n.encodeURL函数主要是来对URI来做转码，它默认是采用的UTF-8的编码.\n\n. UTF-8编码的格式:一个汉字来三个字节构成，每一个字节会转换成16进制的编码，同时添加上%号.\n\n假设页面端输入的中文是一个“中”，按照下面步骤进行解码\n\n    1.第一次encodeURI，按照utf-8方式获取字节数组变成[-28,-72-83]，对字节码数组进行遍历，把每个字节转化成对应的16进制数，这样就变成了[E4,B8,AD],最后变成[%E4,%B8,%AD]  此时已经没有了多字节字符，全部是单字节字符。\n\n    2、第二次encodeURI，进行编码，会把%看成一个转义字符，并不编码%以后字符，会把%编码成%25.把数组最后变成[%25E4,%25B8,%25AD]然后就把处理后的数据[%25E4,%25B8,%25AD]发往服务器端，\n\n    当应用服务器调用getParameter方法，getParameter方法会去向应用服务器请求参数应用服务器最初获得的就是发送来的[%25E4,%25B8,%25AD]，应用服务器会对这个数据进行URLdecode操作，应用服务器进行解码的这一次，不管是按照UTF-8，还是GBK，还是ISO-8859，,都能得到[%E4,%B8,%AD]，因为都会把%25解析成%.并把这个值返回给getParameter方法\n\n    3、再用UTF-8解码一次，就得到\"中\"了。\n\n","source":"_posts/get-请求中文乱码问题.md","raw":"---\ntitle: get 请求中文乱码问题\ndate: 2019-02-22 09:49:52\ntags:\n- springMvc\n- 字符编码\n---\n对于浏览器发出的HTTP请求： tomcat 默认是ISO-8859-1 解码\n\n   URI： xxxxx.action?key=\"+encodeURIComponent(“中文”)\n\n   在服务器获取 到key的值是tomcat使用 ISO-8859-1编码进行解码的字符，会出现乱码的问题。目前有两种方式可以解决该问题。\n\n    1：通过转成编码为ISO-8859-1字节数组，然后再转成UTF-8的字符串\n\n String value= new String(request.getParameter(\"key\").getBytes(\"ISO-8859-1\"), \"UTF-8\"); \n\n    2：在页面上进行两次编码\n\n        xxxxx.action?key=\"+encodeURIComponent（encodeURIComponent(“中文”)）\n\n后台获取数据： String value= URLDecoder.decode( request.getParameter(\"key\"),\"UTF-8\")\n\n实现原理：\n\n.encodeURL函数主要是来对URI来做转码，它默认是采用的UTF-8的编码.\n\n. UTF-8编码的格式:一个汉字来三个字节构成，每一个字节会转换成16进制的编码，同时添加上%号.\n\n假设页面端输入的中文是一个“中”，按照下面步骤进行解码\n\n    1.第一次encodeURI，按照utf-8方式获取字节数组变成[-28,-72-83]，对字节码数组进行遍历，把每个字节转化成对应的16进制数，这样就变成了[E4,B8,AD],最后变成[%E4,%B8,%AD]  此时已经没有了多字节字符，全部是单字节字符。\n\n    2、第二次encodeURI，进行编码，会把%看成一个转义字符，并不编码%以后字符，会把%编码成%25.把数组最后变成[%25E4,%25B8,%25AD]然后就把处理后的数据[%25E4,%25B8,%25AD]发往服务器端，\n\n    当应用服务器调用getParameter方法，getParameter方法会去向应用服务器请求参数应用服务器最初获得的就是发送来的[%25E4,%25B8,%25AD]，应用服务器会对这个数据进行URLdecode操作，应用服务器进行解码的这一次，不管是按照UTF-8，还是GBK，还是ISO-8859，,都能得到[%E4,%B8,%AD]，因为都会把%25解析成%.并把这个值返回给getParameter方法\n\n    3、再用UTF-8解码一次，就得到\"中\"了。\n\n","slug":"get-请求中文乱码问题","published":1,"updated":"2019-02-22T01:51:26.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmdi000e38udtiklhckb","content":"<p>对于浏览器发出的HTTP请求： tomcat 默认是ISO-8859-1 解码</p>\n<p>   URI： xxxxx.action?key=”+encodeURIComponent(“中文”)</p>\n<p>   在服务器获取 到key的值是tomcat使用 ISO-8859-1编码进行解码的字符，会出现乱码的问题。目前有两种方式可以解决该问题。</p>\n<pre><code>1：通过转成编码为ISO-8859-1字节数组，然后再转成UTF-8的字符串\n</code></pre><p> String value= new String(request.getParameter(“key”).getBytes(“ISO-8859-1”), “UTF-8”); </p>\n<pre><code>2：在页面上进行两次编码\n\n    xxxxx.action?key=&quot;+encodeURIComponent（encodeURIComponent(“中文”)）\n</code></pre><p>后台获取数据： String value= URLDecoder.decode( request.getParameter(“key”),”UTF-8”)</p>\n<p>实现原理：</p>\n<p>.encodeURL函数主要是来对URI来做转码，它默认是采用的UTF-8的编码.</p>\n<p>. UTF-8编码的格式:一个汉字来三个字节构成，每一个字节会转换成16进制的编码，同时添加上%号.</p>\n<p>假设页面端输入的中文是一个“中”，按照下面步骤进行解码</p>\n<pre><code>1.第一次encodeURI，按照utf-8方式获取字节数组变成[-28,-72-83]，对字节码数组进行遍历，把每个字节转化成对应的16进制数，这样就变成了[E4,B8,AD],最后变成[%E4,%B8,%AD]  此时已经没有了多字节字符，全部是单字节字符。\n\n2、第二次encodeURI，进行编码，会把%看成一个转义字符，并不编码%以后字符，会把%编码成%25.把数组最后变成[%25E4,%25B8,%25AD]然后就把处理后的数据[%25E4,%25B8,%25AD]发往服务器端，\n\n当应用服务器调用getParameter方法，getParameter方法会去向应用服务器请求参数应用服务器最初获得的就是发送来的[%25E4,%25B8,%25AD]，应用服务器会对这个数据进行URLdecode操作，应用服务器进行解码的这一次，不管是按照UTF-8，还是GBK，还是ISO-8859，,都能得到[%E4,%B8,%AD]，因为都会把%25解析成%.并把这个值返回给getParameter方法\n\n3、再用UTF-8解码一次，就得到&quot;中&quot;了。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>对于浏览器发出的HTTP请求： tomcat 默认是ISO-8859-1 解码</p>\n<p>   URI： xxxxx.action?key=”+encodeURIComponent(“中文”)</p>\n<p>   在服务器获取 到key的值是tomcat使用 ISO-8859-1编码进行解码的字符，会出现乱码的问题。目前有两种方式可以解决该问题。</p>\n<pre><code>1：通过转成编码为ISO-8859-1字节数组，然后再转成UTF-8的字符串\n</code></pre><p> String value= new String(request.getParameter(“key”).getBytes(“ISO-8859-1”), “UTF-8”); </p>\n<pre><code>2：在页面上进行两次编码\n\n    xxxxx.action?key=&quot;+encodeURIComponent（encodeURIComponent(“中文”)）\n</code></pre><p>后台获取数据： String value= URLDecoder.decode( request.getParameter(“key”),”UTF-8”)</p>\n<p>实现原理：</p>\n<p>.encodeURL函数主要是来对URI来做转码，它默认是采用的UTF-8的编码.</p>\n<p>. UTF-8编码的格式:一个汉字来三个字节构成，每一个字节会转换成16进制的编码，同时添加上%号.</p>\n<p>假设页面端输入的中文是一个“中”，按照下面步骤进行解码</p>\n<pre><code>1.第一次encodeURI，按照utf-8方式获取字节数组变成[-28,-72-83]，对字节码数组进行遍历，把每个字节转化成对应的16进制数，这样就变成了[E4,B8,AD],最后变成[%E4,%B8,%AD]  此时已经没有了多字节字符，全部是单字节字符。\n\n2、第二次encodeURI，进行编码，会把%看成一个转义字符，并不编码%以后字符，会把%编码成%25.把数组最后变成[%25E4,%25B8,%25AD]然后就把处理后的数据[%25E4,%25B8,%25AD]发往服务器端，\n\n当应用服务器调用getParameter方法，getParameter方法会去向应用服务器请求参数应用服务器最初获得的就是发送来的[%25E4,%25B8,%25AD]，应用服务器会对这个数据进行URLdecode操作，应用服务器进行解码的这一次，不管是按照UTF-8，还是GBK，还是ISO-8859，,都能得到[%E4,%B8,%AD]，因为都会把%25解析成%.并把这个值返回给getParameter方法\n\n3、再用UTF-8解码一次，就得到&quot;中&quot;了。\n</code></pre>"},{"title":"gitLab 搭建","date":"2019-02-22T02:42:28.000Z","_content":"今天我们说一下怎么在Linux搭建gitLab，具体步骤如下：\n\n打开该地址 [https://about.gitlab.com/installation/](https://about.gitlab.com/installation/#centos-7) 这个是官方提供安装文档，具体我们来操作一下\n\n1：根据操作系统版本寻找对应的文档\n\n2：安装和配置相应的依赖\n\nOn CentOS 7 (and RedHat/Oracle/Scientific Linux 7), 以下命令可以使http和ssh允许在防火墙下能被访问\n>\n> ```\n> sudo yum install -y curl policycoreutils-python openssh-server\n> sudo systemctl enable sshd\n> sudo systemctl start sshd\n> sudo firewall-cmd --permanent --add-service=http\n> sudo systemctl reload firewalld\n> ```\n\n接下来，安装 Postfix 用于发送邮件。如果你想用其他的方式发送邮件，请跳过该步骤并在gitLab 安装之后，配置其他的邮件服务器。\n>\n> ```\n> sudo yum install postfix\n> sudo systemctl enable postfix\n> sudo systemctl start postfix\n> ```\n\n3：添加GitLab软件包存储库并安装软件包\n\n添加GitLab软件包存储库\n>\n> ```\n> curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n> ```\n\n接下来，安装gitLab。安装过程是自动的，安装成功后通过URL 访问，如果你需要配置https，请参考 https://docs.gitlab.com/omnibus/settings/nginx.html#enable-https\n>\n> ```\n> sudo EXTERNAL_URL=\"http://gitlab.example.com\" yum install -y gitlab-ee\n> ```\n\n```\nEXTERNAL_URL 填写你要访问的地址，因为现在在测试环境我们用ip代替（192.168.1.6）\n```\n\n完成以上步骤，gitLab算是搭建完成了。\n\nGitLab常用命令\n>\n> ```none\n> sudo gitlab-ctl start    # 启动所有 gitlab 组件；\n> sudo gitlab-ctl stop        # 停止所有 gitlab 组件；\n> sudo gitlab-ctl restart        # 重启所有 gitlab 组件；\n> sudo gitlab-ctl status        # 查看服务状态；\n> sudo gitlab-ctl reconfigure        # 启动服务；\n> sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；\n> gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；\n> sudo gitlab-ctl tail        # 查看日志；\n> ```\n\ngitlab如何使用，登录gitLab后,慢慢玩吧！玩多了就会了\n\ngitLab一些小问题\n\n1:复制项目的url地址，发现port丢失\n\n解决：打开 /var/opt/gitlab/gitlab-rails/etc 目录\n\n修改 gitlab.yml 文件，将端口改成你想要的端口号 ! !\n![gitLab-搭建](gitLab-搭建/1550803434.jpg)","source":"_posts/gitLab-搭建.md","raw":"---\ntitle: gitLab 搭建\ndate: 2019-02-22 10:42:28\ntags:\n- github\n- linux\n- CentOS\n---\n今天我们说一下怎么在Linux搭建gitLab，具体步骤如下：\n\n打开该地址 [https://about.gitlab.com/installation/](https://about.gitlab.com/installation/#centos-7) 这个是官方提供安装文档，具体我们来操作一下\n\n1：根据操作系统版本寻找对应的文档\n\n2：安装和配置相应的依赖\n\nOn CentOS 7 (and RedHat/Oracle/Scientific Linux 7), 以下命令可以使http和ssh允许在防火墙下能被访问\n>\n> ```\n> sudo yum install -y curl policycoreutils-python openssh-server\n> sudo systemctl enable sshd\n> sudo systemctl start sshd\n> sudo firewall-cmd --permanent --add-service=http\n> sudo systemctl reload firewalld\n> ```\n\n接下来，安装 Postfix 用于发送邮件。如果你想用其他的方式发送邮件，请跳过该步骤并在gitLab 安装之后，配置其他的邮件服务器。\n>\n> ```\n> sudo yum install postfix\n> sudo systemctl enable postfix\n> sudo systemctl start postfix\n> ```\n\n3：添加GitLab软件包存储库并安装软件包\n\n添加GitLab软件包存储库\n>\n> ```\n> curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n> ```\n\n接下来，安装gitLab。安装过程是自动的，安装成功后通过URL 访问，如果你需要配置https，请参考 https://docs.gitlab.com/omnibus/settings/nginx.html#enable-https\n>\n> ```\n> sudo EXTERNAL_URL=\"http://gitlab.example.com\" yum install -y gitlab-ee\n> ```\n\n```\nEXTERNAL_URL 填写你要访问的地址，因为现在在测试环境我们用ip代替（192.168.1.6）\n```\n\n完成以上步骤，gitLab算是搭建完成了。\n\nGitLab常用命令\n>\n> ```none\n> sudo gitlab-ctl start    # 启动所有 gitlab 组件；\n> sudo gitlab-ctl stop        # 停止所有 gitlab 组件；\n> sudo gitlab-ctl restart        # 重启所有 gitlab 组件；\n> sudo gitlab-ctl status        # 查看服务状态；\n> sudo gitlab-ctl reconfigure        # 启动服务；\n> sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；\n> gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；\n> sudo gitlab-ctl tail        # 查看日志；\n> ```\n\ngitlab如何使用，登录gitLab后,慢慢玩吧！玩多了就会了\n\ngitLab一些小问题\n\n1:复制项目的url地址，发现port丢失\n\n解决：打开 /var/opt/gitlab/gitlab-rails/etc 目录\n\n修改 gitlab.yml 文件，将端口改成你想要的端口号 ! !\n![gitLab-搭建](gitLab-搭建/1550803434.jpg)","slug":"gitLab-搭建","published":1,"updated":"2019-02-22T02:51:05.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmdm000f38udno1jd6ge","content":"<p>今天我们说一下怎么在Linux搭建gitLab，具体步骤如下：</p>\n<p>打开该地址 <a href=\"https://about.gitlab.com/installation/#centos-7\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/installation/</a> 这个是官方提供安装文档，具体我们来操作一下</p>\n<p>1：根据操作系统版本寻找对应的文档</p>\n<p>2：安装和配置相应的依赖</p>\n<p>On CentOS 7 (and RedHat/Oracle/Scientific Linux 7), 以下命令可以使http和ssh允许在防火墙下能被访问</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class=\"line\">&gt; sudo systemctl enable sshd</span><br><span class=\"line\">&gt; sudo systemctl start sshd</span><br><span class=\"line\">&gt; sudo firewall-cmd --permanent --add-service=http</span><br><span class=\"line\">&gt; sudo systemctl reload firewalld</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>接下来，安装 Postfix 用于发送邮件。如果你想用其他的方式发送邮件，请跳过该步骤并在gitLab 安装之后，配置其他的邮件服务器。</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo yum install postfix</span><br><span class=\"line\">&gt; sudo systemctl enable postfix</span><br><span class=\"line\">&gt; sudo systemctl start postfix</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>3：添加GitLab软件包存储库并安装软件包</p>\n<p>添加GitLab软件包存储库</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>接下来，安装gitLab。安装过程是自动的，安装成功后通过URL 访问，如果你需要配置https，请参考 <a href=\"https://docs.gitlab.com/omnibus/settings/nginx.html#enable-https\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/omnibus/settings/nginx.html#enable-https</a></p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo EXTERNAL_URL=&quot;http://gitlab.example.com&quot; yum install -y gitlab-ee</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXTERNAL_URL 填写你要访问的地址，因为现在在测试环境我们用ip代替（192.168.1.6）</span><br></pre></td></tr></table></figure>\n<p>完成以上步骤，gitLab算是搭建完成了。</p>\n<p>GitLab常用命令</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo gitlab-ctl start    # 启动所有 gitlab 组件；</span><br><span class=\"line\">&gt; sudo gitlab-ctl stop        # 停止所有 gitlab 组件；</span><br><span class=\"line\">&gt; sudo gitlab-ctl restart        # 重启所有 gitlab 组件；</span><br><span class=\"line\">&gt; sudo gitlab-ctl status        # 查看服务状态；</span><br><span class=\"line\">&gt; sudo gitlab-ctl reconfigure        # 启动服务；</span><br><span class=\"line\">&gt; sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；</span><br><span class=\"line\">&gt; gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；</span><br><span class=\"line\">&gt; sudo gitlab-ctl tail        # 查看日志；</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>gitlab如何使用，登录gitLab后,慢慢玩吧！玩多了就会了</p>\n<p>gitLab一些小问题</p>\n<p>1:复制项目的url地址，发现port丢失</p>\n<p>解决：打开 /var/opt/gitlab/gitlab-rails/etc 目录</p>\n<p>修改 gitlab.yml 文件，将端口改成你想要的端口号 ! !<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/22/gitLab-搭建/1550803434.jpg\" alt=\"gitLab-搭建\" title=\"\">\n                </div>\n                <div class=\"image-caption\">gitLab-搭建</div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天我们说一下怎么在Linux搭建gitLab，具体步骤如下：</p>\n<p>打开该地址 <a href=\"https://about.gitlab.com/installation/#centos-7\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/installation/</a> 这个是官方提供安装文档，具体我们来操作一下</p>\n<p>1：根据操作系统版本寻找对应的文档</p>\n<p>2：安装和配置相应的依赖</p>\n<p>On CentOS 7 (and RedHat/Oracle/Scientific Linux 7), 以下命令可以使http和ssh允许在防火墙下能被访问</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class=\"line\">&gt; sudo systemctl enable sshd</span><br><span class=\"line\">&gt; sudo systemctl start sshd</span><br><span class=\"line\">&gt; sudo firewall-cmd --permanent --add-service=http</span><br><span class=\"line\">&gt; sudo systemctl reload firewalld</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>接下来，安装 Postfix 用于发送邮件。如果你想用其他的方式发送邮件，请跳过该步骤并在gitLab 安装之后，配置其他的邮件服务器。</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo yum install postfix</span><br><span class=\"line\">&gt; sudo systemctl enable postfix</span><br><span class=\"line\">&gt; sudo systemctl start postfix</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>3：添加GitLab软件包存储库并安装软件包</p>\n<p>添加GitLab软件包存储库</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>接下来，安装gitLab。安装过程是自动的，安装成功后通过URL 访问，如果你需要配置https，请参考 <a href=\"https://docs.gitlab.com/omnibus/settings/nginx.html#enable-https\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/omnibus/settings/nginx.html#enable-https</a></p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo EXTERNAL_URL=&quot;http://gitlab.example.com&quot; yum install -y gitlab-ee</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXTERNAL_URL 填写你要访问的地址，因为现在在测试环境我们用ip代替（192.168.1.6）</span><br></pre></td></tr></table></figure>\n<p>完成以上步骤，gitLab算是搭建完成了。</p>\n<p>GitLab常用命令</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo gitlab-ctl start    # 启动所有 gitlab 组件；</span><br><span class=\"line\">&gt; sudo gitlab-ctl stop        # 停止所有 gitlab 组件；</span><br><span class=\"line\">&gt; sudo gitlab-ctl restart        # 重启所有 gitlab 组件；</span><br><span class=\"line\">&gt; sudo gitlab-ctl status        # 查看服务状态；</span><br><span class=\"line\">&gt; sudo gitlab-ctl reconfigure        # 启动服务；</span><br><span class=\"line\">&gt; sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；</span><br><span class=\"line\">&gt; gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；</span><br><span class=\"line\">&gt; sudo gitlab-ctl tail        # 查看日志；</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>gitlab如何使用，登录gitLab后,慢慢玩吧！玩多了就会了</p>\n<p>gitLab一些小问题</p>\n<p>1:复制项目的url地址，发现port丢失</p>\n<p>解决：打开 /var/opt/gitlab/gitlab-rails/etc 目录</p>\n<p>修改 gitlab.yml 文件，将端口改成你想要的端口号 ! !<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/02/22/gitLab-搭建/1550803434.jpg\" alt=\"gitLab-搭建\" title=\"\">\n                </div>\n                <div class=\"image-caption\">gitLab-搭建</div>\n            </figure></p>\n"},{"title":"java 反射笔记","date":"2019-02-20T10:39:41.000Z","_content":"\n\n# 1. 什么叫反射？\n\n反射机制，在Java程序运行过程中动态获取类信息（变量，方法等），以及动态调用对象方法的功能，重点是在**程序运行中**\n\n官方对反射的解释：\n\n通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。\n\n# 2. 反射机制的用途\n\n* l在运行时分析类的能力。\n\n* l在运行时查看对象。\n\n* l实现通用的数组操作代码。\n\n* l利用 Method 对象， 这个对象很像中的函数指针。\n\n很多框架中使用了反射机制，最经常用的Spring IOC 创建bean的过程就是通过反射实现的。\n\n# 3. 反射的运用\n\nJava反射主要是获取一个Class 对象（在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识）获取Class 有三种方式\n\n1：使用Class的类方法 forName\n\nClass.forName(\"类路径\")\n\n平时我们在加载jdbc中使用Class.forName(driver)，加载数据库驱动\n\n2：直接对象的class\n\nClass cl = String.class;\n\n3：调用对象的getClass()方法\n\nString s = \"uuu\";  \nClass cl = s.getClass()\n\n获取到Class对象后，我们就可以获取方法信息，成员变量\n\n获取成员变量：\n\n* getFiled：访问公有的成员变量，包括父类的公有成员变量\n\n* getDeclaredField：所有已声明的成员变量，但不能得到其父类的成员变量\n\n获取方法集，主要有以下几个方法：\n\n* getDeclaredMethods 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。\n\n* getMethods 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。\n\n* getMethod 方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象。\n\n创建实例\n\n* 使用 Class 的 newInstance 方法，使用这个方法会抛出两个异常IllegalAccessException（非法访问异常） 和 InstantiationException（实例化异常）\n\n* 先使用Class对象获取指定的Constructor对象, 再调用Constructor对象的newInstance()方法来创建该Class对象对应类的实例(通过这种方式可以选择指定的构造器来创建实例).\n\n方法调用\n\n通过 Method 的invoke（）方法实现方法调用。\n\n```\nClass cl = null;\n\ntry {\n\n    cl = Class.forName(\"cn.assist.easydao.util.Student\");\n\n    Object o = cl.newInstance();\n\n    Method setAge = cl.getDeclaredMethod(\"setAge\", Integer.class);\n\n    Method getAge = cl.getDeclaredMethod(\"getAge\");\n\n    setAge.invoke(o,3);\n\n    System.out.println(getAge.invoke(o));\n\n\n\n} catch (ClassNotFoundException e) {\n\n    e.printStackTrace();\n\n} catch (IllegalAccessException e) {\n\n    e.printStackTrace();\n\n} catch (InstantiationException e) {\n\n    e.printStackTrace();\n\n} catch (NoSuchMethodException e) {\n\n    e.printStackTrace();\n\n} catch (InvocationTargetException e) {\n\n    e.printStackTrace();\n\n}\n```\n\n实现通用的数组操作\n\n// 创建数组\n\nObject array = Array.newInstance(String.class,4);\n\n// 设值\n\nArray.set(array,0,\"test\");\n\n# 4. 总结\n\nJava反射会消耗大量资源？\n\n* 由于反射创建对象是间接创建，需要做一些步骤操作，会导致执行时间长，消耗大量资源的。\n\n如何提高反射效率？\n\n* 使用缓存机制，避免重复创建对象\n\n* 获取方法尽量使用getMethod(methodName)，不建议使用getMethods()后再遍历筛选\n\n* 使用现成的反射框架\n\n* 使用reflectasm框架，该框架通过字节码，访问类信息\n\n反射可以在运行时操作，可能导致系统变的不安全\n\n参考文档：\n\n[深入解析Java反射（1） - 基础](https://www.sczyh30.com/posts/Java/java-reflection-1/)\n\nJava 核心技术 卷一\n","source":"_posts/java-反射笔记.md","raw":"---\ntitle: java 反射笔记\ndate: 2019-02-20 18:39:41\ntags:\n- JAVA\n- 反射机制\n---\n\n\n# 1. 什么叫反射？\n\n反射机制，在Java程序运行过程中动态获取类信息（变量，方法等），以及动态调用对象方法的功能，重点是在**程序运行中**\n\n官方对反射的解释：\n\n通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。\n\n# 2. 反射机制的用途\n\n* l在运行时分析类的能力。\n\n* l在运行时查看对象。\n\n* l实现通用的数组操作代码。\n\n* l利用 Method 对象， 这个对象很像中的函数指针。\n\n很多框架中使用了反射机制，最经常用的Spring IOC 创建bean的过程就是通过反射实现的。\n\n# 3. 反射的运用\n\nJava反射主要是获取一个Class 对象（在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识）获取Class 有三种方式\n\n1：使用Class的类方法 forName\n\nClass.forName(\"类路径\")\n\n平时我们在加载jdbc中使用Class.forName(driver)，加载数据库驱动\n\n2：直接对象的class\n\nClass cl = String.class;\n\n3：调用对象的getClass()方法\n\nString s = \"uuu\";  \nClass cl = s.getClass()\n\n获取到Class对象后，我们就可以获取方法信息，成员变量\n\n获取成员变量：\n\n* getFiled：访问公有的成员变量，包括父类的公有成员变量\n\n* getDeclaredField：所有已声明的成员变量，但不能得到其父类的成员变量\n\n获取方法集，主要有以下几个方法：\n\n* getDeclaredMethods 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。\n\n* getMethods 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。\n\n* getMethod 方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象。\n\n创建实例\n\n* 使用 Class 的 newInstance 方法，使用这个方法会抛出两个异常IllegalAccessException（非法访问异常） 和 InstantiationException（实例化异常）\n\n* 先使用Class对象获取指定的Constructor对象, 再调用Constructor对象的newInstance()方法来创建该Class对象对应类的实例(通过这种方式可以选择指定的构造器来创建实例).\n\n方法调用\n\n通过 Method 的invoke（）方法实现方法调用。\n\n```\nClass cl = null;\n\ntry {\n\n    cl = Class.forName(\"cn.assist.easydao.util.Student\");\n\n    Object o = cl.newInstance();\n\n    Method setAge = cl.getDeclaredMethod(\"setAge\", Integer.class);\n\n    Method getAge = cl.getDeclaredMethod(\"getAge\");\n\n    setAge.invoke(o,3);\n\n    System.out.println(getAge.invoke(o));\n\n\n\n} catch (ClassNotFoundException e) {\n\n    e.printStackTrace();\n\n} catch (IllegalAccessException e) {\n\n    e.printStackTrace();\n\n} catch (InstantiationException e) {\n\n    e.printStackTrace();\n\n} catch (NoSuchMethodException e) {\n\n    e.printStackTrace();\n\n} catch (InvocationTargetException e) {\n\n    e.printStackTrace();\n\n}\n```\n\n实现通用的数组操作\n\n// 创建数组\n\nObject array = Array.newInstance(String.class,4);\n\n// 设值\n\nArray.set(array,0,\"test\");\n\n# 4. 总结\n\nJava反射会消耗大量资源？\n\n* 由于反射创建对象是间接创建，需要做一些步骤操作，会导致执行时间长，消耗大量资源的。\n\n如何提高反射效率？\n\n* 使用缓存机制，避免重复创建对象\n\n* 获取方法尽量使用getMethod(methodName)，不建议使用getMethods()后再遍历筛选\n\n* 使用现成的反射框架\n\n* 使用reflectasm框架，该框架通过字节码，访问类信息\n\n反射可以在运行时操作，可能导致系统变的不安全\n\n参考文档：\n\n[深入解析Java反射（1） - 基础](https://www.sczyh30.com/posts/Java/java-reflection-1/)\n\nJava 核心技术 卷一\n","slug":"java-反射笔记","published":1,"updated":"2019-02-22T10:00:25.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmds000h38udf7avps8z","content":"<h1 id=\"1-什么叫反射？\"><a href=\"#1-什么叫反射？\" class=\"headerlink\" title=\"1. 什么叫反射？\"></a>1. 什么叫反射？</h1><p>反射机制，在Java程序运行过程中动态获取类信息（变量，方法等），以及动态调用对象方法的功能，重点是在<strong>程序运行中</strong></p>\n<p>官方对反射的解释：</p>\n<p>通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。</p>\n<h1 id=\"2-反射机制的用途\"><a href=\"#2-反射机制的用途\" class=\"headerlink\" title=\"2. 反射机制的用途\"></a>2. 反射机制的用途</h1><ul>\n<li><p>l在运行时分析类的能力。</p>\n</li>\n<li><p>l在运行时查看对象。</p>\n</li>\n<li><p>l实现通用的数组操作代码。</p>\n</li>\n<li><p>l利用 Method 对象， 这个对象很像中的函数指针。</p>\n</li>\n</ul>\n<p>很多框架中使用了反射机制，最经常用的Spring IOC 创建bean的过程就是通过反射实现的。</p>\n<h1 id=\"3-反射的运用\"><a href=\"#3-反射的运用\" class=\"headerlink\" title=\"3. 反射的运用\"></a>3. 反射的运用</h1><p>Java反射主要是获取一个Class 对象（在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识）获取Class 有三种方式</p>\n<p>1：使用Class的类方法 forName</p>\n<p>Class.forName(“类路径”)</p>\n<p>平时我们在加载jdbc中使用Class.forName(driver)，加载数据库驱动</p>\n<p>2：直接对象的class</p>\n<p>Class cl = String.class;</p>\n<p>3：调用对象的getClass()方法</p>\n<p>String s = “uuu”;<br>Class cl = s.getClass()</p>\n<p>获取到Class对象后，我们就可以获取方法信息，成员变量</p>\n<p>获取成员变量：</p>\n<ul>\n<li><p>getFiled：访问公有的成员变量，包括父类的公有成员变量</p>\n</li>\n<li><p>getDeclaredField：所有已声明的成员变量，但不能得到其父类的成员变量</p>\n</li>\n</ul>\n<p>获取方法集，主要有以下几个方法：</p>\n<ul>\n<li><p>getDeclaredMethods 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</p>\n</li>\n<li><p>getMethods 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。</p>\n</li>\n<li><p>getMethod 方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象。</p>\n</li>\n</ul>\n<p>创建实例</p>\n<ul>\n<li><p>使用 Class 的 newInstance 方法，使用这个方法会抛出两个异常IllegalAccessException（非法访问异常） 和 InstantiationException（实例化异常）</p>\n</li>\n<li><p>先使用Class对象获取指定的Constructor对象, 再调用Constructor对象的newInstance()方法来创建该Class对象对应类的实例(通过这种方式可以选择指定的构造器来创建实例).</p>\n</li>\n</ul>\n<p>方法调用</p>\n<p>通过 Method 的invoke（）方法实现方法调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class cl = null;</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    cl = Class.forName(&quot;cn.assist.easydao.util.Student&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Object o = cl.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">    Method setAge = cl.getDeclaredMethod(&quot;setAge&quot;, Integer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method getAge = cl.getDeclaredMethod(&quot;getAge&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    setAge.invoke(o,3);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(getAge.invoke(o));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (InstantiationException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (InvocationTargetException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现通用的数组操作</p>\n<p>// 创建数组</p>\n<p>Object array = Array.newInstance(String.class,4);</p>\n<p>// 设值</p>\n<p>Array.set(array,0,”test”);</p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><p>Java反射会消耗大量资源？</p>\n<ul>\n<li>由于反射创建对象是间接创建，需要做一些步骤操作，会导致执行时间长，消耗大量资源的。</li>\n</ul>\n<p>如何提高反射效率？</p>\n<ul>\n<li><p>使用缓存机制，避免重复创建对象</p>\n</li>\n<li><p>获取方法尽量使用getMethod(methodName)，不建议使用getMethods()后再遍历筛选</p>\n</li>\n<li><p>使用现成的反射框架</p>\n</li>\n<li><p>使用reflectasm框架，该框架通过字节码，访问类信息</p>\n</li>\n</ul>\n<p>反射可以在运行时操作，可能导致系统变的不安全</p>\n<p>参考文档：</p>\n<p><a href=\"https://www.sczyh30.com/posts/Java/java-reflection-1/\" target=\"_blank\" rel=\"noopener\">深入解析Java反射（1） - 基础</a></p>\n<p>Java 核心技术 卷一</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-什么叫反射？\"><a href=\"#1-什么叫反射？\" class=\"headerlink\" title=\"1. 什么叫反射？\"></a>1. 什么叫反射？</h1><p>反射机制，在Java程序运行过程中动态获取类信息（变量，方法等），以及动态调用对象方法的功能，重点是在<strong>程序运行中</strong></p>\n<p>官方对反射的解释：</p>\n<p>通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。</p>\n<h1 id=\"2-反射机制的用途\"><a href=\"#2-反射机制的用途\" class=\"headerlink\" title=\"2. 反射机制的用途\"></a>2. 反射机制的用途</h1><ul>\n<li><p>l在运行时分析类的能力。</p>\n</li>\n<li><p>l在运行时查看对象。</p>\n</li>\n<li><p>l实现通用的数组操作代码。</p>\n</li>\n<li><p>l利用 Method 对象， 这个对象很像中的函数指针。</p>\n</li>\n</ul>\n<p>很多框架中使用了反射机制，最经常用的Spring IOC 创建bean的过程就是通过反射实现的。</p>\n<h1 id=\"3-反射的运用\"><a href=\"#3-反射的运用\" class=\"headerlink\" title=\"3. 反射的运用\"></a>3. 反射的运用</h1><p>Java反射主要是获取一个Class 对象（在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识）获取Class 有三种方式</p>\n<p>1：使用Class的类方法 forName</p>\n<p>Class.forName(“类路径”)</p>\n<p>平时我们在加载jdbc中使用Class.forName(driver)，加载数据库驱动</p>\n<p>2：直接对象的class</p>\n<p>Class cl = String.class;</p>\n<p>3：调用对象的getClass()方法</p>\n<p>String s = “uuu”;<br>Class cl = s.getClass()</p>\n<p>获取到Class对象后，我们就可以获取方法信息，成员变量</p>\n<p>获取成员变量：</p>\n<ul>\n<li><p>getFiled：访问公有的成员变量，包括父类的公有成员变量</p>\n</li>\n<li><p>getDeclaredField：所有已声明的成员变量，但不能得到其父类的成员变量</p>\n</li>\n</ul>\n<p>获取方法集，主要有以下几个方法：</p>\n<ul>\n<li><p>getDeclaredMethods 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</p>\n</li>\n<li><p>getMethods 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。</p>\n</li>\n<li><p>getMethod 方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象。</p>\n</li>\n</ul>\n<p>创建实例</p>\n<ul>\n<li><p>使用 Class 的 newInstance 方法，使用这个方法会抛出两个异常IllegalAccessException（非法访问异常） 和 InstantiationException（实例化异常）</p>\n</li>\n<li><p>先使用Class对象获取指定的Constructor对象, 再调用Constructor对象的newInstance()方法来创建该Class对象对应类的实例(通过这种方式可以选择指定的构造器来创建实例).</p>\n</li>\n</ul>\n<p>方法调用</p>\n<p>通过 Method 的invoke（）方法实现方法调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class cl = null;</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    cl = Class.forName(&quot;cn.assist.easydao.util.Student&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Object o = cl.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">    Method setAge = cl.getDeclaredMethod(&quot;setAge&quot;, Integer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method getAge = cl.getDeclaredMethod(&quot;getAge&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    setAge.invoke(o,3);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(getAge.invoke(o));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (InstantiationException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (InvocationTargetException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现通用的数组操作</p>\n<p>// 创建数组</p>\n<p>Object array = Array.newInstance(String.class,4);</p>\n<p>// 设值</p>\n<p>Array.set(array,0,”test”);</p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><p>Java反射会消耗大量资源？</p>\n<ul>\n<li>由于反射创建对象是间接创建，需要做一些步骤操作，会导致执行时间长，消耗大量资源的。</li>\n</ul>\n<p>如何提高反射效率？</p>\n<ul>\n<li><p>使用缓存机制，避免重复创建对象</p>\n</li>\n<li><p>获取方法尽量使用getMethod(methodName)，不建议使用getMethods()后再遍历筛选</p>\n</li>\n<li><p>使用现成的反射框架</p>\n</li>\n<li><p>使用reflectasm框架，该框架通过字节码，访问类信息</p>\n</li>\n</ul>\n<p>反射可以在运行时操作，可能导致系统变的不安全</p>\n<p>参考文档：</p>\n<p><a href=\"https://www.sczyh30.com/posts/Java/java-reflection-1/\" target=\"_blank\" rel=\"noopener\">深入解析Java反射（1） - 基础</a></p>\n<p>Java 核心技术 卷一</p>\n"},{"title":"js实现粘贴板功能","date":"2019-02-22T02:28:47.000Z","_content":"js实现粘贴板方式有document.exeCommad，window.clipboardData的setData方法，还有使用ZeroClipboard插件\n\n# 1. 通过document提供的exeCommad方法实现粘贴板功能 \n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n    </head>\n    <body>\n    <input type=\"button\" onClick='copyUrls(this)' value=\"方式二\">\n    \n    <script language=\"javascript\">\n        function copyUrls(that) {\n            let textArea = document.createElement(\"textarea\")\n            textArea.style.position = 'fixed'\n            textArea.style.top = 0\n            textArea.style.left = 0\n            textArea.style.width = '2em'\n            textArea.style.height = '2em'\n            textArea.style.padding = 0\n            textArea.style.border = 'none'\n            textArea.style.outline = 'none'\n            textArea.style.boxShadow = 'none'\n            textArea.style.background = 'transparent'\n            textArea.value = that.value\n            document.body.appendChild(textArea)\n            textArea.select()\n            try {\n                document.execCommand('copy')\n            } catch (err) {\n                this.throwError('不能使用这种方法复制内容'+err.toString())\n            }\n            document.body.removeChild(textArea)\n        }\n    </script>\n    </body>\n    </html>\n\n优点不需要引用外部插件\n\n* google浏览器（兼容）\n* IE浏览器（兼容）\n* 火狐（兼容） ！\n\nexeCommad 还有很多方法，待续\n\n# 2. window.clipboardData的setData方法\n\n* google浏览器（不兼容）\n* IE浏览器（兼容）\n* 火狐（不兼容）\n    <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <title>Title</title>\n        </head>\n        <body>\n    \n        <input type=\"button\" onClick='copyUrl()' value=\"方式一\">\n        <script language=\"javascript\">\n            function copyUrl() {\n                var clipBoardContent=\"test\";\n                window.clipboardData.setData(\"Text\",clipBoardContent);\n                alert(\"复制成功!\");\n            }\n        </script>\n        </body>\n        </html>\n\n# 3. 通过插件clipboard方式实现 https://github.com/zenorocha/clipboard.js\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n        <script src=\"clipboard.min.js\"></script>\n    </head>\n    <body>\n    \n    <input type=\"button\" onClick='copyUrls3(this)' value=\"方式三\" class=\"btn\">\n    \n    <script language=\"javascript\">\n        function copyUrls3(that) {\n            var clipboard = new ClipboardJS('.btn', {\n                text: function() {\n                    return that.value;\n                }\n            });\n    \n            clipboard.on('success', function(e) {\n                console.log(e);\n            });\n    \n            clipboard.on('error', function(e) {\n                console.log(e);\n            });\n        }\n    \n    </script>\n    </body>\n    </html>\n\n* google浏览器（不兼容）\n* IE浏览器（兼容）\n* 火狐（不兼容）\n\n后续加上各个版本的优缺点\n\n","source":"_posts/js实现粘贴板功能.md","raw":"---\ntitle: js实现粘贴板功能\ndate: 2019-02-22 10:28:47\ntags:\n- JavaScript\n- 浏览器兼容性\n---\njs实现粘贴板方式有document.exeCommad，window.clipboardData的setData方法，还有使用ZeroClipboard插件\n\n# 1. 通过document提供的exeCommad方法实现粘贴板功能 \n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n    </head>\n    <body>\n    <input type=\"button\" onClick='copyUrls(this)' value=\"方式二\">\n    \n    <script language=\"javascript\">\n        function copyUrls(that) {\n            let textArea = document.createElement(\"textarea\")\n            textArea.style.position = 'fixed'\n            textArea.style.top = 0\n            textArea.style.left = 0\n            textArea.style.width = '2em'\n            textArea.style.height = '2em'\n            textArea.style.padding = 0\n            textArea.style.border = 'none'\n            textArea.style.outline = 'none'\n            textArea.style.boxShadow = 'none'\n            textArea.style.background = 'transparent'\n            textArea.value = that.value\n            document.body.appendChild(textArea)\n            textArea.select()\n            try {\n                document.execCommand('copy')\n            } catch (err) {\n                this.throwError('不能使用这种方法复制内容'+err.toString())\n            }\n            document.body.removeChild(textArea)\n        }\n    </script>\n    </body>\n    </html>\n\n优点不需要引用外部插件\n\n* google浏览器（兼容）\n* IE浏览器（兼容）\n* 火狐（兼容） ！\n\nexeCommad 还有很多方法，待续\n\n# 2. window.clipboardData的setData方法\n\n* google浏览器（不兼容）\n* IE浏览器（兼容）\n* 火狐（不兼容）\n    <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <title>Title</title>\n        </head>\n        <body>\n    \n        <input type=\"button\" onClick='copyUrl()' value=\"方式一\">\n        <script language=\"javascript\">\n            function copyUrl() {\n                var clipBoardContent=\"test\";\n                window.clipboardData.setData(\"Text\",clipBoardContent);\n                alert(\"复制成功!\");\n            }\n        </script>\n        </body>\n        </html>\n\n# 3. 通过插件clipboard方式实现 https://github.com/zenorocha/clipboard.js\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n        <script src=\"clipboard.min.js\"></script>\n    </head>\n    <body>\n    \n    <input type=\"button\" onClick='copyUrls3(this)' value=\"方式三\" class=\"btn\">\n    \n    <script language=\"javascript\">\n        function copyUrls3(that) {\n            var clipboard = new ClipboardJS('.btn', {\n                text: function() {\n                    return that.value;\n                }\n            });\n    \n            clipboard.on('success', function(e) {\n                console.log(e);\n            });\n    \n            clipboard.on('error', function(e) {\n                console.log(e);\n            });\n        }\n    \n    </script>\n    </body>\n    </html>\n\n* google浏览器（不兼容）\n* IE浏览器（兼容）\n* 火狐（不兼容）\n\n后续加上各个版本的优缺点\n\n","slug":"js实现粘贴板功能","published":1,"updated":"2019-02-22T02:37:57.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmdx000j38udwsf39jar","content":"<p>js实现粘贴板方式有document.exeCommad，window.clipboardData的setData方法，还有使用ZeroClipboard插件</p>\n<h1 id=\"1-通过document提供的exeCommad方法实现粘贴板功能\"><a href=\"#1-通过document提供的exeCommad方法实现粘贴板功能\" class=\"headerlink\" title=\"1. 通过document提供的exeCommad方法实现粘贴板功能\"></a>1. 通过document提供的exeCommad方法实现粘贴板功能</h1><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;input type=&quot;button&quot; onClick=&apos;copyUrls(this)&apos; value=&quot;方式二&quot;&gt;\n\n&lt;script language=&quot;javascript&quot;&gt;\n    function copyUrls(that) {\n        let textArea = document.createElement(&quot;textarea&quot;)\n        textArea.style.position = &apos;fixed&apos;\n        textArea.style.top = 0\n        textArea.style.left = 0\n        textArea.style.width = &apos;2em&apos;\n        textArea.style.height = &apos;2em&apos;\n        textArea.style.padding = 0\n        textArea.style.border = &apos;none&apos;\n        textArea.style.outline = &apos;none&apos;\n        textArea.style.boxShadow = &apos;none&apos;\n        textArea.style.background = &apos;transparent&apos;\n        textArea.value = that.value\n        document.body.appendChild(textArea)\n        textArea.select()\n        try {\n            document.execCommand(&apos;copy&apos;)\n        } catch (err) {\n            this.throwError(&apos;不能使用这种方法复制内容&apos;+err.toString())\n        }\n        document.body.removeChild(textArea)\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>优点不需要引用外部插件</p>\n<ul>\n<li>google浏览器（兼容）</li>\n<li>IE浏览器（兼容）</li>\n<li>火狐（兼容） ！</li>\n</ul>\n<p>exeCommad 还有很多方法，待续</p>\n<h1 id=\"2-window-clipboardData的setData方法\"><a href=\"#2-window-clipboardData的setData方法\" class=\"headerlink\" title=\"2. window.clipboardData的setData方法\"></a>2. window.clipboardData的setData方法</h1><ul>\n<li>google浏览器（不兼容）</li>\n<li>IE浏览器（兼容）</li>\n<li><p>火狐（不兼容）<br>  &lt;!DOCTYPE html&gt;</p>\n<pre><code>&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;input type=&quot;button&quot; onClick=&apos;copyUrl()&apos; value=&quot;方式一&quot;&gt;\n&lt;script language=&quot;javascript&quot;&gt;\n    function copyUrl() {\n        var clipBoardContent=&quot;test&quot;;\n        window.clipboardData.setData(&quot;Text&quot;,clipBoardContent);\n        alert(&quot;复制成功!&quot;);\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li>\n</ul>\n<h1 id=\"3-通过插件clipboard方式实现-https-github-com-zenorocha-clipboard-js\"><a href=\"#3-通过插件clipboard方式实现-https-github-com-zenorocha-clipboard-js\" class=\"headerlink\" title=\"3. 通过插件clipboard方式实现 https://github.com/zenorocha/clipboard.js\"></a>3. 通过插件clipboard方式实现 <a href=\"https://github.com/zenorocha/clipboard.js\" target=\"_blank\" rel=\"noopener\">https://github.com/zenorocha/clipboard.js</a></h1><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;script src=&quot;clipboard.min.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;input type=&quot;button&quot; onClick=&apos;copyUrls3(this)&apos; value=&quot;方式三&quot; class=&quot;btn&quot;&gt;\n\n&lt;script language=&quot;javascript&quot;&gt;\n    function copyUrls3(that) {\n        var clipboard = new ClipboardJS(&apos;.btn&apos;, {\n            text: function() {\n                return that.value;\n            }\n        });\n\n        clipboard.on(&apos;success&apos;, function(e) {\n            console.log(e);\n        });\n\n        clipboard.on(&apos;error&apos;, function(e) {\n            console.log(e);\n        });\n    }\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><ul>\n<li>google浏览器（不兼容）</li>\n<li>IE浏览器（兼容）</li>\n<li>火狐（不兼容）</li>\n</ul>\n<p>后续加上各个版本的优缺点</p>\n","site":{"data":{}},"excerpt":"","more":"<p>js实现粘贴板方式有document.exeCommad，window.clipboardData的setData方法，还有使用ZeroClipboard插件</p>\n<h1 id=\"1-通过document提供的exeCommad方法实现粘贴板功能\"><a href=\"#1-通过document提供的exeCommad方法实现粘贴板功能\" class=\"headerlink\" title=\"1. 通过document提供的exeCommad方法实现粘贴板功能\"></a>1. 通过document提供的exeCommad方法实现粘贴板功能</h1><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;input type=&quot;button&quot; onClick=&apos;copyUrls(this)&apos; value=&quot;方式二&quot;&gt;\n\n&lt;script language=&quot;javascript&quot;&gt;\n    function copyUrls(that) {\n        let textArea = document.createElement(&quot;textarea&quot;)\n        textArea.style.position = &apos;fixed&apos;\n        textArea.style.top = 0\n        textArea.style.left = 0\n        textArea.style.width = &apos;2em&apos;\n        textArea.style.height = &apos;2em&apos;\n        textArea.style.padding = 0\n        textArea.style.border = &apos;none&apos;\n        textArea.style.outline = &apos;none&apos;\n        textArea.style.boxShadow = &apos;none&apos;\n        textArea.style.background = &apos;transparent&apos;\n        textArea.value = that.value\n        document.body.appendChild(textArea)\n        textArea.select()\n        try {\n            document.execCommand(&apos;copy&apos;)\n        } catch (err) {\n            this.throwError(&apos;不能使用这种方法复制内容&apos;+err.toString())\n        }\n        document.body.removeChild(textArea)\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>优点不需要引用外部插件</p>\n<ul>\n<li>google浏览器（兼容）</li>\n<li>IE浏览器（兼容）</li>\n<li>火狐（兼容） ！</li>\n</ul>\n<p>exeCommad 还有很多方法，待续</p>\n<h1 id=\"2-window-clipboardData的setData方法\"><a href=\"#2-window-clipboardData的setData方法\" class=\"headerlink\" title=\"2. window.clipboardData的setData方法\"></a>2. window.clipboardData的setData方法</h1><ul>\n<li>google浏览器（不兼容）</li>\n<li>IE浏览器（兼容）</li>\n<li><p>火狐（不兼容）<br>  &lt;!DOCTYPE html&gt;</p>\n<pre><code>&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;input type=&quot;button&quot; onClick=&apos;copyUrl()&apos; value=&quot;方式一&quot;&gt;\n&lt;script language=&quot;javascript&quot;&gt;\n    function copyUrl() {\n        var clipBoardContent=&quot;test&quot;;\n        window.clipboardData.setData(&quot;Text&quot;,clipBoardContent);\n        alert(&quot;复制成功!&quot;);\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li>\n</ul>\n<h1 id=\"3-通过插件clipboard方式实现-https-github-com-zenorocha-clipboard-js\"><a href=\"#3-通过插件clipboard方式实现-https-github-com-zenorocha-clipboard-js\" class=\"headerlink\" title=\"3. 通过插件clipboard方式实现 https://github.com/zenorocha/clipboard.js\"></a>3. 通过插件clipboard方式实现 <a href=\"https://github.com/zenorocha/clipboard.js\" target=\"_blank\" rel=\"noopener\">https://github.com/zenorocha/clipboard.js</a></h1><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;script src=&quot;clipboard.min.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;input type=&quot;button&quot; onClick=&apos;copyUrls3(this)&apos; value=&quot;方式三&quot; class=&quot;btn&quot;&gt;\n\n&lt;script language=&quot;javascript&quot;&gt;\n    function copyUrls3(that) {\n        var clipboard = new ClipboardJS(&apos;.btn&apos;, {\n            text: function() {\n                return that.value;\n            }\n        });\n\n        clipboard.on(&apos;success&apos;, function(e) {\n            console.log(e);\n        });\n\n        clipboard.on(&apos;error&apos;, function(e) {\n            console.log(e);\n        });\n    }\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><ul>\n<li>google浏览器（不兼容）</li>\n<li>IE浏览器（兼容）</li>\n<li>火狐（不兼容）</li>\n</ul>\n<p>后续加上各个版本的优缺点</p>\n"},{"title":"jvm 面试问题总结(一)","date":"2019-03-15T01:49:26.000Z","_content":"\n\n# 1. java 8 将 jvm 中 永久代去除带来的好处？：\n* 元空间存放在本地内存中避免之前使用永久代出现内存溢出的问题。\n* 类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。\n* 永久代会通过 full GC 进行回收，这种操作复杂度较高，回收效率偏低。\n# 2. 如何判断对象死亡，有哪两种方法？\n1. 引用计数法：\n当该对象被引用时，计数器就加1；当引用失效，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。\n缺点：这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。 所谓对象之间的相互引用问题，如下面代码所示：除了对象objA 和 objB 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为0，于是引用计数算法无法通知 GC 回收器回收他们。\n2. 可达性分析算法：\n通过一系列“GC Roots” 的对象为起点，从这些节点开始向下搜索，搜索多走过的路径称为引用链，当对象到GC Roots没有任何的引用链相连就判断该对象已经失效。\n# 3.  再谈引用：\n1. 强引用\n\t* 概述：强引用在代码中很普遍，平时我们通过new 关键字创建的引用都是强引用，只要强引用存在，垃圾收集器就不会回收引用对象强引用在代码中很普遍，平时我们通过new 关键字创建的引用都是强引用，只要强引用存在，垃圾收集器就不会回收引用对象\n\t* 实现：通过new 关键字创建的引用\n2. 软引用\n\t* 概述：描述一些还有用但是并不必需的对象，如果内存空间足够，垃圾回收器就不会回收它，如果发生内存溢出之前，垃圾回收器将这些对象列进回收范围之中进行第二次回收。如果这次回收还是没有足够的内存，就会发生内存溢出。\n\t* 用途：软引用可用来实现内存敏感的高速缓存。\n\t* 实现：Jdk 提供 SoftReference 类来实现软引用。\n3. 弱引用\n   * 概述：非必要对象，当GC发生就会被回收，生命周期很短暂\n   * 实现：Jdk 提供 WeakReference 类来实现弱引用。\n   **注意：由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象**\n4. 虚引用\n\t* 概述：与其他几种引用都不同，虚引用完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。\n\t* 用途：使对象被收集器回收时收到一个系统通知。\n\t* 实现：Jdk 提供 PhantomkReference 类来实现虚引用。\n5. 弱引用和软引用的区别\n只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收掉只被弱引用关联的对象。\n# 4.  HotSpot为什么要分为新生代和老年代？\n一般将java堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。\n* 新生代：每次收集都会有大量对象死去，所以可以选择复制算法\n* 老年代：对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集\n# 5. Minor GC和Full GC 分别指什么？\n* 新生代（Minor GC）:指新生代的垃圾收集，执行操作频繁，回收速度较快。\n* 老年代（Major GC/Full GC）:指发生老年代的垃圾回收，出现Major GC经常会伴随一次Minor GC （并非绝对，只有当发生Major GC时 晋升到老年代的内存 大于老年代的剩余内存，这种情况下 会发生Full GC），Major GC的速度一般会比Minor GC的慢10倍以上。\n默认情况下 新生代和老年代的堆空间的分布情况\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228151004551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n注意：虚拟机每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。 因此，新生代实际可用的内存空间为90%的新生代空间。\n大数据（数组和字符串【字符数组】 ）直接被存放在老年代中，原因是（为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率）\n* 长期存活的对象进入老年代\n每次进行垃圾回收存活下来的对象年龄都会加一岁，等达到一定程度后该对象就会进行老年代。具体设置年龄阈值，通过参数 -XX:MaxTenuringThreshold 来设置。\n* 动态对象年龄判定\n有一种情况当相同年龄的对象总和大于Survivor 空间的一半时，年龄大于或等于该值的对象直接进入老年代\n# 6. 垃圾回收算法有哪些？优缺点？\n* 标记 - 清除算法\n标记需要回收的对象，标记完成后在垃圾回收器统一收集那些被标记的对象。\n缺点：\n  * 效率不高：标记和清除过程效率不高，主要原因是标记的对象分布不均匀\n  * 空间问题：清除后产生大量内存碎片，导致以后程序不能给大对象分配连续的内存空间\n* 复制算法\n将内存分成两块容量大小相同区域，当一块区域内存用完后，经过GC之后幸存的对象将复制到另外一个区域中，剩余的内存空间一次清除即可，不管什么时刻总有一块区域是空闲的。\n\t* 效率高：每次只需要回收复制后剩余的内存，这样也不会产生内存碎片的问题，移动对顶指针，按顺序分配内存即可，实现简单，运行高效，但是如果存活率较高的情况，复制算法的效率也会随着下降\n\t* 成本高：时刻保证有一块区域是空闲的，这样导致新生代有10%的内存是浪费的。由于 Eden : from : to = 8:1:1\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307141705245.png)\n* 标记-整理算法\n跟上述说的标记-清除算法很类似，但是后续步骤不是对可回收的对象直接回收，而是让这一部分标记的对象都向一端移动，最终清除靠近端边的内存，这样好处减少内存碎片的产生。\n缺点：实现起来复杂，执行步骤较多\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307142226586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n* 分代收集算法\n目前很多虚拟机的垃圾回收器都采用分代收集算法，主要原因分代回收能根据对象的生存周期进行内存划分，主要分新生代和老年代并根据每个年代的特点采用不同的回收算法，使内存回收更加高效。由于新生代，每次垃圾回收都有大片对象死亡，只有少数对象存活这样我们使用复制算法。老年代每次垃圾回收只有少量对象死亡，整体存活率较高，没有额外的内存对它进行分配，所以采用标记-整理算法或标记-清除算法\n# 7. 垃圾回收器有哪些？\n* Serial 收集器\n单线程进行垃圾回收工作，在收集过程中，必须停止其他所有的工作线程，直到回收结束其他工作线程才能继续工作。\n算法：复制算法\n* ParNew 收集器\n对上述收集器进行补充，采用多线程对垃圾进行回收，这样相比单线程整体的效率得到提高。\n算法：复制算法\n* Parallel Scavenge 收集器\n和上述收集器不同的是，Parallel Scavenge 关注点主要是达到一个可控制的吞吐量。所谓的吞吐量就是CPU 用于运行代码的时间与CPU总消耗时间的比值，吞吐量 = 运行代码的时间/(运行代码的时间 +垃圾回收的时间)，吞吐量越高，则相对的垃圾回收时间降低。那平时我们如何控制吞吐量呢，Parallel Scavenge给了我们两个参数来控制吞吐量 最大垃圾收集停顿时间 -XX：MaxGCPauseMillis 和 设置吞吐量大小 -XX:GCTimeRatio 参数，具体参考 [深入理解Java虚拟器]()\n算法：复制算法\n* Serial old 收集器\n主要用于老年代的垃圾回收，采用单线程进行垃圾回收。\n算法：标记-整理\n* Parallel old 收集器\n主要用于老年代的垃圾回收，采用多线程进行垃圾回收。和 Parallel Scavenge 收集器一样， Parallel old 关注点也是吞吐量\n算法：标记-整理\n* cms 收集器\nCMS 收集器是一种以获取最短回收停顿时间为目标的收集器，基于标记-清除算法实现，具体包括四个步骤：\n\t* 初始化标记\n\t* 并发标记\n\t* 重新标记\n\t* 并发清除\n整体执行过程如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307151001702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n从上图可以看出，除了初始标记和重新标记需要“Stop The World”,其余都是可以和用户线程一起执行的。\n缺点：\n   * 对CPU 资源非常敏感\n   * 无法处理浮动垃圾，由于清除过程伴随着用户线程，用户线程产生的新垃圾在标记过后，CMS 无法在当次收集中处理它们，留给下次GC再进行处理，这部分垃圾就叫做浮动垃圾\n   * 由于采用 标记-清除算法会产生大量内存碎片\n* G1 收集器\nG1 是当今收集器技术中的最前沿技术，相比其他收集器它具有几个特点：\n\t* 并行与并发\n\t* 分代收集\n\t* 空间整理\n\t* 可预测的停顿\n\n算法：复制算法和标记-整理算法\n\n\n参考文档\n\t[深入理解Java虚拟器]()\n\t[Java面试通关手册](https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88jvm%EF%BC%89.md)\n\n","source":"_posts/jvm-面试问题总结-一.md","raw":"---\ntitle: jvm 面试问题总结(一)\ndate: 2019-03-15 09:49:26\ntags:\n- JVM\n---\n\n\n# 1. java 8 将 jvm 中 永久代去除带来的好处？：\n* 元空间存放在本地内存中避免之前使用永久代出现内存溢出的问题。\n* 类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。\n* 永久代会通过 full GC 进行回收，这种操作复杂度较高，回收效率偏低。\n# 2. 如何判断对象死亡，有哪两种方法？\n1. 引用计数法：\n当该对象被引用时，计数器就加1；当引用失效，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。\n缺点：这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。 所谓对象之间的相互引用问题，如下面代码所示：除了对象objA 和 objB 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为0，于是引用计数算法无法通知 GC 回收器回收他们。\n2. 可达性分析算法：\n通过一系列“GC Roots” 的对象为起点，从这些节点开始向下搜索，搜索多走过的路径称为引用链，当对象到GC Roots没有任何的引用链相连就判断该对象已经失效。\n# 3.  再谈引用：\n1. 强引用\n\t* 概述：强引用在代码中很普遍，平时我们通过new 关键字创建的引用都是强引用，只要强引用存在，垃圾收集器就不会回收引用对象强引用在代码中很普遍，平时我们通过new 关键字创建的引用都是强引用，只要强引用存在，垃圾收集器就不会回收引用对象\n\t* 实现：通过new 关键字创建的引用\n2. 软引用\n\t* 概述：描述一些还有用但是并不必需的对象，如果内存空间足够，垃圾回收器就不会回收它，如果发生内存溢出之前，垃圾回收器将这些对象列进回收范围之中进行第二次回收。如果这次回收还是没有足够的内存，就会发生内存溢出。\n\t* 用途：软引用可用来实现内存敏感的高速缓存。\n\t* 实现：Jdk 提供 SoftReference 类来实现软引用。\n3. 弱引用\n   * 概述：非必要对象，当GC发生就会被回收，生命周期很短暂\n   * 实现：Jdk 提供 WeakReference 类来实现弱引用。\n   **注意：由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象**\n4. 虚引用\n\t* 概述：与其他几种引用都不同，虚引用完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。\n\t* 用途：使对象被收集器回收时收到一个系统通知。\n\t* 实现：Jdk 提供 PhantomkReference 类来实现虚引用。\n5. 弱引用和软引用的区别\n只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收掉只被弱引用关联的对象。\n# 4.  HotSpot为什么要分为新生代和老年代？\n一般将java堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。\n* 新生代：每次收集都会有大量对象死去，所以可以选择复制算法\n* 老年代：对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集\n# 5. Minor GC和Full GC 分别指什么？\n* 新生代（Minor GC）:指新生代的垃圾收集，执行操作频繁，回收速度较快。\n* 老年代（Major GC/Full GC）:指发生老年代的垃圾回收，出现Major GC经常会伴随一次Minor GC （并非绝对，只有当发生Major GC时 晋升到老年代的内存 大于老年代的剩余内存，这种情况下 会发生Full GC），Major GC的速度一般会比Minor GC的慢10倍以上。\n默认情况下 新生代和老年代的堆空间的分布情况\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228151004551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n注意：虚拟机每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。 因此，新生代实际可用的内存空间为90%的新生代空间。\n大数据（数组和字符串【字符数组】 ）直接被存放在老年代中，原因是（为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率）\n* 长期存活的对象进入老年代\n每次进行垃圾回收存活下来的对象年龄都会加一岁，等达到一定程度后该对象就会进行老年代。具体设置年龄阈值，通过参数 -XX:MaxTenuringThreshold 来设置。\n* 动态对象年龄判定\n有一种情况当相同年龄的对象总和大于Survivor 空间的一半时，年龄大于或等于该值的对象直接进入老年代\n# 6. 垃圾回收算法有哪些？优缺点？\n* 标记 - 清除算法\n标记需要回收的对象，标记完成后在垃圾回收器统一收集那些被标记的对象。\n缺点：\n  * 效率不高：标记和清除过程效率不高，主要原因是标记的对象分布不均匀\n  * 空间问题：清除后产生大量内存碎片，导致以后程序不能给大对象分配连续的内存空间\n* 复制算法\n将内存分成两块容量大小相同区域，当一块区域内存用完后，经过GC之后幸存的对象将复制到另外一个区域中，剩余的内存空间一次清除即可，不管什么时刻总有一块区域是空闲的。\n\t* 效率高：每次只需要回收复制后剩余的内存，这样也不会产生内存碎片的问题，移动对顶指针，按顺序分配内存即可，实现简单，运行高效，但是如果存活率较高的情况，复制算法的效率也会随着下降\n\t* 成本高：时刻保证有一块区域是空闲的，这样导致新生代有10%的内存是浪费的。由于 Eden : from : to = 8:1:1\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307141705245.png)\n* 标记-整理算法\n跟上述说的标记-清除算法很类似，但是后续步骤不是对可回收的对象直接回收，而是让这一部分标记的对象都向一端移动，最终清除靠近端边的内存，这样好处减少内存碎片的产生。\n缺点：实现起来复杂，执行步骤较多\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307142226586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n* 分代收集算法\n目前很多虚拟机的垃圾回收器都采用分代收集算法，主要原因分代回收能根据对象的生存周期进行内存划分，主要分新生代和老年代并根据每个年代的特点采用不同的回收算法，使内存回收更加高效。由于新生代，每次垃圾回收都有大片对象死亡，只有少数对象存活这样我们使用复制算法。老年代每次垃圾回收只有少量对象死亡，整体存活率较高，没有额外的内存对它进行分配，所以采用标记-整理算法或标记-清除算法\n# 7. 垃圾回收器有哪些？\n* Serial 收集器\n单线程进行垃圾回收工作，在收集过程中，必须停止其他所有的工作线程，直到回收结束其他工作线程才能继续工作。\n算法：复制算法\n* ParNew 收集器\n对上述收集器进行补充，采用多线程对垃圾进行回收，这样相比单线程整体的效率得到提高。\n算法：复制算法\n* Parallel Scavenge 收集器\n和上述收集器不同的是，Parallel Scavenge 关注点主要是达到一个可控制的吞吐量。所谓的吞吐量就是CPU 用于运行代码的时间与CPU总消耗时间的比值，吞吐量 = 运行代码的时间/(运行代码的时间 +垃圾回收的时间)，吞吐量越高，则相对的垃圾回收时间降低。那平时我们如何控制吞吐量呢，Parallel Scavenge给了我们两个参数来控制吞吐量 最大垃圾收集停顿时间 -XX：MaxGCPauseMillis 和 设置吞吐量大小 -XX:GCTimeRatio 参数，具体参考 [深入理解Java虚拟器]()\n算法：复制算法\n* Serial old 收集器\n主要用于老年代的垃圾回收，采用单线程进行垃圾回收。\n算法：标记-整理\n* Parallel old 收集器\n主要用于老年代的垃圾回收，采用多线程进行垃圾回收。和 Parallel Scavenge 收集器一样， Parallel old 关注点也是吞吐量\n算法：标记-整理\n* cms 收集器\nCMS 收集器是一种以获取最短回收停顿时间为目标的收集器，基于标记-清除算法实现，具体包括四个步骤：\n\t* 初始化标记\n\t* 并发标记\n\t* 重新标记\n\t* 并发清除\n整体执行过程如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190307151001702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n从上图可以看出，除了初始标记和重新标记需要“Stop The World”,其余都是可以和用户线程一起执行的。\n缺点：\n   * 对CPU 资源非常敏感\n   * 无法处理浮动垃圾，由于清除过程伴随着用户线程，用户线程产生的新垃圾在标记过后，CMS 无法在当次收集中处理它们，留给下次GC再进行处理，这部分垃圾就叫做浮动垃圾\n   * 由于采用 标记-清除算法会产生大量内存碎片\n* G1 收集器\nG1 是当今收集器技术中的最前沿技术，相比其他收集器它具有几个特点：\n\t* 并行与并发\n\t* 分代收集\n\t* 空间整理\n\t* 可预测的停顿\n\n算法：复制算法和标记-整理算法\n\n\n参考文档\n\t[深入理解Java虚拟器]()\n\t[Java面试通关手册](https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88jvm%EF%BC%89.md)\n\n","slug":"jvm-面试问题总结-一","published":1,"updated":"2019-03-15T01:50:00.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezme1000m38uddalnok3u","content":"<h1 id=\"1-java-8-将-jvm-中-永久代去除带来的好处？：\"><a href=\"#1-java-8-将-jvm-中-永久代去除带来的好处？：\" class=\"headerlink\" title=\"1. java 8 将 jvm 中 永久代去除带来的好处？：\"></a>1. java 8 将 jvm 中 永久代去除带来的好处？：</h1><ul>\n<li>元空间存放在本地内存中避免之前使用永久代出现内存溢出的问题。</li>\n<li>类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。</li>\n<li>永久代会通过 full GC 进行回收，这种操作复杂度较高，回收效率偏低。<h1 id=\"2-如何判断对象死亡，有哪两种方法？\"><a href=\"#2-如何判断对象死亡，有哪两种方法？\" class=\"headerlink\" title=\"2. 如何判断对象死亡，有哪两种方法？\"></a>2. 如何判断对象死亡，有哪两种方法？</h1></li>\n</ul>\n<ol>\n<li>引用计数法：<br>当该对象被引用时，计数器就加1；当引用失效，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。<br>缺点：这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。 所谓对象之间的相互引用问题，如下面代码所示：除了对象objA 和 objB 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为0，于是引用计数算法无法通知 GC 回收器回收他们。</li>\n<li>可达性分析算法：<br>通过一系列“GC Roots” 的对象为起点，从这些节点开始向下搜索，搜索多走过的路径称为引用链，当对象到GC Roots没有任何的引用链相连就判断该对象已经失效。<h1 id=\"3-再谈引用：\"><a href=\"#3-再谈引用：\" class=\"headerlink\" title=\"3.  再谈引用：\"></a>3.  再谈引用：</h1></li>\n<li>强引用<ul>\n<li>概述：强引用在代码中很普遍，平时我们通过new 关键字创建的引用都是强引用，只要强引用存在，垃圾收集器就不会回收引用对象强引用在代码中很普遍，平时我们通过new 关键字创建的引用都是强引用，只要强引用存在，垃圾收集器就不会回收引用对象</li>\n<li>实现：通过new 关键字创建的引用</li>\n</ul>\n</li>\n<li>软引用<ul>\n<li>概述：描述一些还有用但是并不必需的对象，如果内存空间足够，垃圾回收器就不会回收它，如果发生内存溢出之前，垃圾回收器将这些对象列进回收范围之中进行第二次回收。如果这次回收还是没有足够的内存，就会发生内存溢出。</li>\n<li>用途：软引用可用来实现内存敏感的高速缓存。</li>\n<li>实现：Jdk 提供 SoftReference 类来实现软引用。</li>\n</ul>\n</li>\n<li>弱引用<ul>\n<li>概述：非必要对象，当GC发生就会被回收，生命周期很短暂</li>\n<li>实现：Jdk 提供 WeakReference 类来实现弱引用。<br><strong>注意：由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象</strong></li>\n</ul>\n</li>\n<li>虚引用<ul>\n<li>概述：与其他几种引用都不同，虚引用完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</li>\n<li>用途：使对象被收集器回收时收到一个系统通知。</li>\n<li>实现：Jdk 提供 PhantomkReference 类来实现虚引用。</li>\n</ul>\n</li>\n<li>弱引用和软引用的区别<br>只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收掉只被弱引用关联的对象。<h1 id=\"4-HotSpot为什么要分为新生代和老年代？\"><a href=\"#4-HotSpot为什么要分为新生代和老年代？\" class=\"headerlink\" title=\"4.  HotSpot为什么要分为新生代和老年代？\"></a>4.  HotSpot为什么要分为新生代和老年代？</h1>一般将java堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</li>\n</ol>\n<ul>\n<li>新生代：每次收集都会有大量对象死去，所以可以选择复制算法</li>\n<li>老年代：对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集<h1 id=\"5-Minor-GC和Full-GC-分别指什么？\"><a href=\"#5-Minor-GC和Full-GC-分别指什么？\" class=\"headerlink\" title=\"5. Minor GC和Full GC 分别指什么？\"></a>5. Minor GC和Full GC 分别指什么？</h1></li>\n<li>新生代（Minor GC）:指新生代的垃圾收集，执行操作频繁，回收速度较快。</li>\n<li>老年代（Major GC/Full GC）:指发生老年代的垃圾回收，出现Major GC经常会伴随一次Minor GC （并非绝对，只有当发生Major GC时 晋升到老年代的内存 大于老年代的剩余内存，这种情况下 会发生Full GC），Major GC的速度一般会比Minor GC的慢10倍以上。<br>默认情况下 新生代和老年代的堆空间的分布情况<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228151004551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n注意：虚拟机每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。 因此，新生代实际可用的内存空间为90%的新生代空间。<br>大数据（数组和字符串【字符数组】 ）直接被存放在老年代中，原因是（为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率）</li>\n<li>长期存活的对象进入老年代<br>每次进行垃圾回收存活下来的对象年龄都会加一岁，等达到一定程度后该对象就会进行老年代。具体设置年龄阈值，通过参数 -XX:MaxTenuringThreshold 来设置。</li>\n<li>动态对象年龄判定<br>有一种情况当相同年龄的对象总和大于Survivor 空间的一半时，年龄大于或等于该值的对象直接进入老年代<h1 id=\"6-垃圾回收算法有哪些？优缺点？\"><a href=\"#6-垃圾回收算法有哪些？优缺点？\" class=\"headerlink\" title=\"6. 垃圾回收算法有哪些？优缺点？\"></a>6. 垃圾回收算法有哪些？优缺点？</h1></li>\n<li>标记 - 清除算法<br>标记需要回收的对象，标记完成后在垃圾回收器统一收集那些被标记的对象。<br>缺点：<ul>\n<li>效率不高：标记和清除过程效率不高，主要原因是标记的对象分布不均匀</li>\n<li>空间问题：清除后产生大量内存碎片，导致以后程序不能给大对象分配连续的内存空间</li>\n</ul>\n</li>\n<li>复制算法<br>将内存分成两块容量大小相同区域，当一块区域内存用完后，经过GC之后幸存的对象将复制到另外一个区域中，剩余的内存空间一次清除即可，不管什么时刻总有一块区域是空闲的。<ul>\n<li>效率高：每次只需要回收复制后剩余的内存，这样也不会产生内存碎片的问题，移动对顶指针，按顺序分配内存即可，实现简单，运行高效，但是如果存活率较高的情况，复制算法的效率也会随着下降</li>\n<li>成本高：时刻保证有一块区域是空闲的，这样导致新生代有10%的内存是浪费的。由于 Eden : from : to = 8:1:1<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190307141705245.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></li>\n</ul>\n</li>\n<li>标记-整理算法<br>跟上述说的标记-清除算法很类似，但是后续步骤不是对可回收的对象直接回收，而是让这一部分标记的对象都向一端移动，最终清除靠近端边的内存，这样好处减少内存碎片的产生。<br>缺点：实现起来复杂，执行步骤较多<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190307142226586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></li>\n<li>分代收集算法<br>目前很多虚拟机的垃圾回收器都采用分代收集算法，主要原因分代回收能根据对象的生存周期进行内存划分，主要分新生代和老年代并根据每个年代的特点采用不同的回收算法，使内存回收更加高效。由于新生代，每次垃圾回收都有大片对象死亡，只有少数对象存活这样我们使用复制算法。老年代每次垃圾回收只有少量对象死亡，整体存活率较高，没有额外的内存对它进行分配，所以采用标记-整理算法或标记-清除算法<h1 id=\"7-垃圾回收器有哪些？\"><a href=\"#7-垃圾回收器有哪些？\" class=\"headerlink\" title=\"7. 垃圾回收器有哪些？\"></a>7. 垃圾回收器有哪些？</h1></li>\n<li>Serial 收集器<br>单线程进行垃圾回收工作，在收集过程中，必须停止其他所有的工作线程，直到回收结束其他工作线程才能继续工作。<br>算法：复制算法</li>\n<li>ParNew 收集器<br>对上述收集器进行补充，采用多线程对垃圾进行回收，这样相比单线程整体的效率得到提高。<br>算法：复制算法</li>\n<li>Parallel Scavenge 收集器<br>和上述收集器不同的是，Parallel Scavenge 关注点主要是达到一个可控制的吞吐量。所谓的吞吐量就是CPU 用于运行代码的时间与CPU总消耗时间的比值，吞吐量 = 运行代码的时间/(运行代码的时间 +垃圾回收的时间)，吞吐量越高，则相对的垃圾回收时间降低。那平时我们如何控制吞吐量呢，Parallel Scavenge给了我们两个参数来控制吞吐量 最大垃圾收集停顿时间 -XX：MaxGCPauseMillis 和 设置吞吐量大小 -XX:GCTimeRatio 参数，具体参考 <a href=\"\">深入理解Java虚拟器</a><br>算法：复制算法</li>\n<li>Serial old 收集器<br>主要用于老年代的垃圾回收，采用单线程进行垃圾回收。<br>算法：标记-整理</li>\n<li>Parallel old 收集器<br>主要用于老年代的垃圾回收，采用多线程进行垃圾回收。和 Parallel Scavenge 收集器一样， Parallel old 关注点也是吞吐量<br>算法：标记-整理</li>\n<li>cms 收集器<br>CMS 收集器是一种以获取最短回收停顿时间为目标的收集器，基于标记-清除算法实现，具体包括四个步骤：<ul>\n<li>初始化标记</li>\n<li>并发标记</li>\n<li>重新标记</li>\n<li>并发清除<br>整体执行过程如下图所示：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190307151001702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n从上图可以看出，除了初始标记和重新标记需要“Stop The World”,其余都是可以和用户线程一起执行的。<br>缺点：<ul>\n<li>对CPU 资源非常敏感</li>\n<li>无法处理浮动垃圾，由于清除过程伴随着用户线程，用户线程产生的新垃圾在标记过后，CMS 无法在当次收集中处理它们，留给下次GC再进行处理，这部分垃圾就叫做浮动垃圾</li>\n<li>由于采用 标记-清除算法会产生大量内存碎片</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>G1 收集器<br>G1 是当今收集器技术中的最前沿技术，相比其他收集器它具有几个特点：<ul>\n<li>并行与并发</li>\n<li>分代收集</li>\n<li>空间整理</li>\n<li>可预测的停顿</li>\n</ul>\n</li>\n</ul>\n<p>算法：复制算法和标记-整理算法</p>\n<p>参考文档<br>    <a href=\"\">深入理解Java虚拟器</a><br>    <a href=\"https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88jvm%EF%BC%89.md\" target=\"_blank\" rel=\"noopener\">Java面试通关手册</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-java-8-将-jvm-中-永久代去除带来的好处？：\"><a href=\"#1-java-8-将-jvm-中-永久代去除带来的好处？：\" class=\"headerlink\" title=\"1. java 8 将 jvm 中 永久代去除带来的好处？：\"></a>1. java 8 将 jvm 中 永久代去除带来的好处？：</h1><ul>\n<li>元空间存放在本地内存中避免之前使用永久代出现内存溢出的问题。</li>\n<li>类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。</li>\n<li>永久代会通过 full GC 进行回收，这种操作复杂度较高，回收效率偏低。<h1 id=\"2-如何判断对象死亡，有哪两种方法？\"><a href=\"#2-如何判断对象死亡，有哪两种方法？\" class=\"headerlink\" title=\"2. 如何判断对象死亡，有哪两种方法？\"></a>2. 如何判断对象死亡，有哪两种方法？</h1></li>\n</ul>\n<ol>\n<li>引用计数法：<br>当该对象被引用时，计数器就加1；当引用失效，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。<br>缺点：这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。 所谓对象之间的相互引用问题，如下面代码所示：除了对象objA 和 objB 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为0，于是引用计数算法无法通知 GC 回收器回收他们。</li>\n<li>可达性分析算法：<br>通过一系列“GC Roots” 的对象为起点，从这些节点开始向下搜索，搜索多走过的路径称为引用链，当对象到GC Roots没有任何的引用链相连就判断该对象已经失效。<h1 id=\"3-再谈引用：\"><a href=\"#3-再谈引用：\" class=\"headerlink\" title=\"3.  再谈引用：\"></a>3.  再谈引用：</h1></li>\n<li>强引用<ul>\n<li>概述：强引用在代码中很普遍，平时我们通过new 关键字创建的引用都是强引用，只要强引用存在，垃圾收集器就不会回收引用对象强引用在代码中很普遍，平时我们通过new 关键字创建的引用都是强引用，只要强引用存在，垃圾收集器就不会回收引用对象</li>\n<li>实现：通过new 关键字创建的引用</li>\n</ul>\n</li>\n<li>软引用<ul>\n<li>概述：描述一些还有用但是并不必需的对象，如果内存空间足够，垃圾回收器就不会回收它，如果发生内存溢出之前，垃圾回收器将这些对象列进回收范围之中进行第二次回收。如果这次回收还是没有足够的内存，就会发生内存溢出。</li>\n<li>用途：软引用可用来实现内存敏感的高速缓存。</li>\n<li>实现：Jdk 提供 SoftReference 类来实现软引用。</li>\n</ul>\n</li>\n<li>弱引用<ul>\n<li>概述：非必要对象，当GC发生就会被回收，生命周期很短暂</li>\n<li>实现：Jdk 提供 WeakReference 类来实现弱引用。<br><strong>注意：由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象</strong></li>\n</ul>\n</li>\n<li>虚引用<ul>\n<li>概述：与其他几种引用都不同，虚引用完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</li>\n<li>用途：使对象被收集器回收时收到一个系统通知。</li>\n<li>实现：Jdk 提供 PhantomkReference 类来实现虚引用。</li>\n</ul>\n</li>\n<li>弱引用和软引用的区别<br>只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收掉只被弱引用关联的对象。<h1 id=\"4-HotSpot为什么要分为新生代和老年代？\"><a href=\"#4-HotSpot为什么要分为新生代和老年代？\" class=\"headerlink\" title=\"4.  HotSpot为什么要分为新生代和老年代？\"></a>4.  HotSpot为什么要分为新生代和老年代？</h1>一般将java堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</li>\n</ol>\n<ul>\n<li>新生代：每次收集都会有大量对象死去，所以可以选择复制算法</li>\n<li>老年代：对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集<h1 id=\"5-Minor-GC和Full-GC-分别指什么？\"><a href=\"#5-Minor-GC和Full-GC-分别指什么？\" class=\"headerlink\" title=\"5. Minor GC和Full GC 分别指什么？\"></a>5. Minor GC和Full GC 分别指什么？</h1></li>\n<li>新生代（Minor GC）:指新生代的垃圾收集，执行操作频繁，回收速度较快。</li>\n<li>老年代（Major GC/Full GC）:指发生老年代的垃圾回收，出现Major GC经常会伴随一次Minor GC （并非绝对，只有当发生Major GC时 晋升到老年代的内存 大于老年代的剩余内存，这种情况下 会发生Full GC），Major GC的速度一般会比Minor GC的慢10倍以上。<br>默认情况下 新生代和老年代的堆空间的分布情况<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228151004551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n注意：虚拟机每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。 因此，新生代实际可用的内存空间为90%的新生代空间。<br>大数据（数组和字符串【字符数组】 ）直接被存放在老年代中，原因是（为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率）</li>\n<li>长期存活的对象进入老年代<br>每次进行垃圾回收存活下来的对象年龄都会加一岁，等达到一定程度后该对象就会进行老年代。具体设置年龄阈值，通过参数 -XX:MaxTenuringThreshold 来设置。</li>\n<li>动态对象年龄判定<br>有一种情况当相同年龄的对象总和大于Survivor 空间的一半时，年龄大于或等于该值的对象直接进入老年代<h1 id=\"6-垃圾回收算法有哪些？优缺点？\"><a href=\"#6-垃圾回收算法有哪些？优缺点？\" class=\"headerlink\" title=\"6. 垃圾回收算法有哪些？优缺点？\"></a>6. 垃圾回收算法有哪些？优缺点？</h1></li>\n<li>标记 - 清除算法<br>标记需要回收的对象，标记完成后在垃圾回收器统一收集那些被标记的对象。<br>缺点：<ul>\n<li>效率不高：标记和清除过程效率不高，主要原因是标记的对象分布不均匀</li>\n<li>空间问题：清除后产生大量内存碎片，导致以后程序不能给大对象分配连续的内存空间</li>\n</ul>\n</li>\n<li>复制算法<br>将内存分成两块容量大小相同区域，当一块区域内存用完后，经过GC之后幸存的对象将复制到另外一个区域中，剩余的内存空间一次清除即可，不管什么时刻总有一块区域是空闲的。<ul>\n<li>效率高：每次只需要回收复制后剩余的内存，这样也不会产生内存碎片的问题，移动对顶指针，按顺序分配内存即可，实现简单，运行高效，但是如果存活率较高的情况，复制算法的效率也会随着下降</li>\n<li>成本高：时刻保证有一块区域是空闲的，这样导致新生代有10%的内存是浪费的。由于 Eden : from : to = 8:1:1<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190307141705245.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></li>\n</ul>\n</li>\n<li>标记-整理算法<br>跟上述说的标记-清除算法很类似，但是后续步骤不是对可回收的对象直接回收，而是让这一部分标记的对象都向一端移动，最终清除靠近端边的内存，这样好处减少内存碎片的产生。<br>缺点：实现起来复杂，执行步骤较多<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190307142226586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></li>\n<li>分代收集算法<br>目前很多虚拟机的垃圾回收器都采用分代收集算法，主要原因分代回收能根据对象的生存周期进行内存划分，主要分新生代和老年代并根据每个年代的特点采用不同的回收算法，使内存回收更加高效。由于新生代，每次垃圾回收都有大片对象死亡，只有少数对象存活这样我们使用复制算法。老年代每次垃圾回收只有少量对象死亡，整体存活率较高，没有额外的内存对它进行分配，所以采用标记-整理算法或标记-清除算法<h1 id=\"7-垃圾回收器有哪些？\"><a href=\"#7-垃圾回收器有哪些？\" class=\"headerlink\" title=\"7. 垃圾回收器有哪些？\"></a>7. 垃圾回收器有哪些？</h1></li>\n<li>Serial 收集器<br>单线程进行垃圾回收工作，在收集过程中，必须停止其他所有的工作线程，直到回收结束其他工作线程才能继续工作。<br>算法：复制算法</li>\n<li>ParNew 收集器<br>对上述收集器进行补充，采用多线程对垃圾进行回收，这样相比单线程整体的效率得到提高。<br>算法：复制算法</li>\n<li>Parallel Scavenge 收集器<br>和上述收集器不同的是，Parallel Scavenge 关注点主要是达到一个可控制的吞吐量。所谓的吞吐量就是CPU 用于运行代码的时间与CPU总消耗时间的比值，吞吐量 = 运行代码的时间/(运行代码的时间 +垃圾回收的时间)，吞吐量越高，则相对的垃圾回收时间降低。那平时我们如何控制吞吐量呢，Parallel Scavenge给了我们两个参数来控制吞吐量 最大垃圾收集停顿时间 -XX：MaxGCPauseMillis 和 设置吞吐量大小 -XX:GCTimeRatio 参数，具体参考 <a href=\"\">深入理解Java虚拟器</a><br>算法：复制算法</li>\n<li>Serial old 收集器<br>主要用于老年代的垃圾回收，采用单线程进行垃圾回收。<br>算法：标记-整理</li>\n<li>Parallel old 收集器<br>主要用于老年代的垃圾回收，采用多线程进行垃圾回收。和 Parallel Scavenge 收集器一样， Parallel old 关注点也是吞吐量<br>算法：标记-整理</li>\n<li>cms 收集器<br>CMS 收集器是一种以获取最短回收停顿时间为目标的收集器，基于标记-清除算法实现，具体包括四个步骤：<ul>\n<li>初始化标记</li>\n<li>并发标记</li>\n<li>重新标记</li>\n<li>并发清除<br>整体执行过程如下图所示：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190307151001702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n从上图可以看出，除了初始标记和重新标记需要“Stop The World”,其余都是可以和用户线程一起执行的。<br>缺点：<ul>\n<li>对CPU 资源非常敏感</li>\n<li>无法处理浮动垃圾，由于清除过程伴随着用户线程，用户线程产生的新垃圾在标记过后，CMS 无法在当次收集中处理它们，留给下次GC再进行处理，这部分垃圾就叫做浮动垃圾</li>\n<li>由于采用 标记-清除算法会产生大量内存碎片</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>G1 收集器<br>G1 是当今收集器技术中的最前沿技术，相比其他收集器它具有几个特点：<ul>\n<li>并行与并发</li>\n<li>分代收集</li>\n<li>空间整理</li>\n<li>可预测的停顿</li>\n</ul>\n</li>\n</ul>\n<p>算法：复制算法和标记-整理算法</p>\n<p>参考文档<br>    <a href=\"\">深入理解Java虚拟器</a><br>    <a href=\"https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88jvm%EF%BC%89.md\" target=\"_blank\" rel=\"noopener\">Java面试通关手册</a></p>\n"},{"title":"markdown的使用笔记","date":"2019-02-26T03:28:10.000Z","_content":"由于最近写博客需要，了解到一种轻量级标记语言-markdown。下面来说一下关于一些markdown的知识：\n# 1. markdown是什么？\nMarkdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。\n# 2. markdown的历史发展？\nJohn Gruber 在 2004 年创造了 Markdown 语言，在语法上有很大一部分是跟亚伦·斯沃茨（Aaron Swartz）共同合作的。这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的XHTML（或是HTML）”。 其中最重要的设计是可读性，也就是说这个语言应该要能直接在字面上的被阅读，而不用被一些格式化指令标记（像是RTF与HTML）。 因此，它是现行电子邮件标记格式的惯例，虽然它也借鉴了很多早期的标记语言，如：Setext、Texile、reStructuredText。Gruber也编写了的Perl脚本：Markdown.pl，用于把markdown语法编写的内容转换成有效的、结构良好的XHTML或HTML内容，并将左尖括号<和&号替换成它们各自的字符实体引用。它可以用作单独的脚本，Blosxom和Movable Type的插件又或者BBEdit的文本过滤器。Markdown也已经被其他人用Perl和别的编程语言重新实现，其中一个Perl模块放在了CPAN(Text::Markdown)上。它基于一个BSD风格的许可证分发并可以作为几个内容管理系统的插件。\n# 3. markdown能用来做什么？\n由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。甚至Markdown能被使用来撰写电子书。\n# 4. markdown的一些语法和平时书写的注意点？\n# 4.1. 标题\n书写标题的时候，我们只需要在文本前面加上『# 』即可创建一级标题，如果想创建二级，三级，或者更多只需要增加『# 』的个数即可。下面展示一下效果：\n\t\t# 一级标题\n\t\t## 二级标题\n\t\t### 三级标题\n\t\t#### 四级标题\n\t\t##### 五级标题\n\t\t###### 六级标题\n效果如下图：\n![](https://img-blog.csdnimg.cn/20190226100452277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n# 4.2. 引用\n\n在需要的整个段落第一行最前面加上『>』即可：\n\t>在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t效果如下图：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226101026545.png)\n区块引用还可以嵌套使用\n\t>  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t>  > 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t>  > > 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226101213185.png)\n\t不仅可以嵌套使用，还可以再引用中加入标题，列表等元素：\n\t>  ## 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t>  > 1. 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t>  > 2.  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t效果如下图：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226101413977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n# 4.3. 列表\n列表在http中有无序和有序列表，markdown也有如下：\n __无序列表__ :使用星号 、加号或是减号来作为标记\n\t- test\n\t- test\n\t- test\n效果如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226102026437.png)\n有序列表则是在文本前面加上数字和小数点\n\t1. test\n\t2. test\n\t3. test\n效果如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226102236789.png)\n在列表中如何使用引用？\n\t*  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t\t> 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t\t> 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n在列表栏下，引用的文本需要缩进\n效果如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226102633553.png)\n代办列表：表示列表数据是否被勾选\n\t- [ ] 不勾选\n\t- [x] 勾选\n效果如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226102826784.png)\n# 4.4. 代码块\n只要把代码块包裹在“` 之间，在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了：\n\n\t```ruby\n\t\trequire 'redcarpet'\n\t\tmarkdown = Redcarpet.new(\"Hello World!\")\n\t\tputs markdown.to_html\n\t```\n\n效果如下图：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226103542307.png)\n# 4.5. 强调\n在Markdown中，可以使用 * 和  _  来表示斜体和加粗。\n单个 * 和 _ 修饰，表示斜体，双个 * 和 _ 修饰表示粗体\n\n\t*Markdown*\n\t_Markdown_\n\t**Markdown**\n\t__Markdown__\n效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226104023173.png)\n# 4.6. 链接\n\n\t文字链接 [文字描述](地址)\n\t图片链接 ![文字描述](地址)\n效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226104232855.png)\n还有一些表格，一些工程图（流程图，时序图等）都可以使用markdown表现出来，我这里就不一一介绍了，具体参考[Markdown 语法介绍](https://coding.net/help/doc/project/markdown.html#i-6)\n# 4.7. 换行：\n&emsp;&emsp;1.使用两个以上的空格加回车\n&emsp;&emsp;2.使用http标签 \\<br>\n# 4.8. 首行缩进\n\t&emsp;&emsp;1. 半角空格 “\\&ensp;”\n\t&emsp;&emsp;2. 全角空格 “\\&emsp;”\n\t&emsp;&emsp;3. 不换行空格 “\\&nbsp;”\n# 4.9. 文本加颜色\nmarkdown 可以通过像html一样，可以通过标签样式让文本有一定的格式。\n\n\t<font color=\"red\">test</font>\n\n效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226111339130.png)\n具体需要实现什么样式，参考[css文档](http://www.runoob.com/css/css-text.html)\n\n# 5. 总结\n今天简单介绍了markdown，并通过几个例子来展示具体用法。其实markdown还有很多内容，所以需要大家在以后使用中多积累多完善，这样才能更好的使用和掌markdown。\n\n参考文档：\n[Markdown 语法介绍](https://coding.net/help/doc/project/markdown.html#i-6)\n[Markdown使用技巧总结——字体，颜色，字号，背景，首行缩进等](https://blog.csdn.net/u010177286/article/details/50358720)\n[全角半角 && 6种空白空格的区别](https://blog.csdn.net/bao19901210/article/details/54625703)\n[维基百科 markdown介绍](https://zh.wikipedia.org/wiki/Markdown)\n\n\n\n","source":"_posts/markdown的使用笔记.md","raw":"---\ntitle: markdown的使用笔记\ndate: 2019-02-26 11:28:10\ntags:\n- markdown\n- http\n---\n由于最近写博客需要，了解到一种轻量级标记语言-markdown。下面来说一下关于一些markdown的知识：\n# 1. markdown是什么？\nMarkdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。\n# 2. markdown的历史发展？\nJohn Gruber 在 2004 年创造了 Markdown 语言，在语法上有很大一部分是跟亚伦·斯沃茨（Aaron Swartz）共同合作的。这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的XHTML（或是HTML）”。 其中最重要的设计是可读性，也就是说这个语言应该要能直接在字面上的被阅读，而不用被一些格式化指令标记（像是RTF与HTML）。 因此，它是现行电子邮件标记格式的惯例，虽然它也借鉴了很多早期的标记语言，如：Setext、Texile、reStructuredText。Gruber也编写了的Perl脚本：Markdown.pl，用于把markdown语法编写的内容转换成有效的、结构良好的XHTML或HTML内容，并将左尖括号<和&号替换成它们各自的字符实体引用。它可以用作单独的脚本，Blosxom和Movable Type的插件又或者BBEdit的文本过滤器。Markdown也已经被其他人用Perl和别的编程语言重新实现，其中一个Perl模块放在了CPAN(Text::Markdown)上。它基于一个BSD风格的许可证分发并可以作为几个内容管理系统的插件。\n# 3. markdown能用来做什么？\n由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。甚至Markdown能被使用来撰写电子书。\n# 4. markdown的一些语法和平时书写的注意点？\n# 4.1. 标题\n书写标题的时候，我们只需要在文本前面加上『# 』即可创建一级标题，如果想创建二级，三级，或者更多只需要增加『# 』的个数即可。下面展示一下效果：\n\t\t# 一级标题\n\t\t## 二级标题\n\t\t### 三级标题\n\t\t#### 四级标题\n\t\t##### 五级标题\n\t\t###### 六级标题\n效果如下图：\n![](https://img-blog.csdnimg.cn/20190226100452277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n# 4.2. 引用\n\n在需要的整个段落第一行最前面加上『>』即可：\n\t>在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t效果如下图：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226101026545.png)\n区块引用还可以嵌套使用\n\t>  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t>  > 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t>  > > 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226101213185.png)\n\t不仅可以嵌套使用，还可以再引用中加入标题，列表等元素：\n\t>  ## 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t>  > 1. 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t>  > 2.  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t效果如下图：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226101413977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n# 4.3. 列表\n列表在http中有无序和有序列表，markdown也有如下：\n __无序列表__ :使用星号 、加号或是减号来作为标记\n\t- test\n\t- test\n\t- test\n效果如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226102026437.png)\n有序列表则是在文本前面加上数字和小数点\n\t1. test\n\t2. test\n\t3. test\n效果如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226102236789.png)\n在列表中如何使用引用？\n\t*  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t\t> 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n\t\t> 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n在列表栏下，引用的文本需要缩进\n效果如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226102633553.png)\n代办列表：表示列表数据是否被勾选\n\t- [ ] 不勾选\n\t- [x] 勾选\n效果如下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226102826784.png)\n# 4.4. 代码块\n只要把代码块包裹在“` 之间，在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了：\n\n\t```ruby\n\t\trequire 'redcarpet'\n\t\tmarkdown = Redcarpet.new(\"Hello World!\")\n\t\tputs markdown.to_html\n\t```\n\n效果如下图：\n\t![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226103542307.png)\n# 4.5. 强调\n在Markdown中，可以使用 * 和  _  来表示斜体和加粗。\n单个 * 和 _ 修饰，表示斜体，双个 * 和 _ 修饰表示粗体\n\n\t*Markdown*\n\t_Markdown_\n\t**Markdown**\n\t__Markdown__\n效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226104023173.png)\n# 4.6. 链接\n\n\t文字链接 [文字描述](地址)\n\t图片链接 ![文字描述](地址)\n效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226104232855.png)\n还有一些表格，一些工程图（流程图，时序图等）都可以使用markdown表现出来，我这里就不一一介绍了，具体参考[Markdown 语法介绍](https://coding.net/help/doc/project/markdown.html#i-6)\n# 4.7. 换行：\n&emsp;&emsp;1.使用两个以上的空格加回车\n&emsp;&emsp;2.使用http标签 \\<br>\n# 4.8. 首行缩进\n\t&emsp;&emsp;1. 半角空格 “\\&ensp;”\n\t&emsp;&emsp;2. 全角空格 “\\&emsp;”\n\t&emsp;&emsp;3. 不换行空格 “\\&nbsp;”\n# 4.9. 文本加颜色\nmarkdown 可以通过像html一样，可以通过标签样式让文本有一定的格式。\n\n\t<font color=\"red\">test</font>\n\n效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190226111339130.png)\n具体需要实现什么样式，参考[css文档](http://www.runoob.com/css/css-text.html)\n\n# 5. 总结\n今天简单介绍了markdown，并通过几个例子来展示具体用法。其实markdown还有很多内容，所以需要大家在以后使用中多积累多完善，这样才能更好的使用和掌markdown。\n\n参考文档：\n[Markdown 语法介绍](https://coding.net/help/doc/project/markdown.html#i-6)\n[Markdown使用技巧总结——字体，颜色，字号，背景，首行缩进等](https://blog.csdn.net/u010177286/article/details/50358720)\n[全角半角 && 6种空白空格的区别](https://blog.csdn.net/bao19901210/article/details/54625703)\n[维基百科 markdown介绍](https://zh.wikipedia.org/wiki/Markdown)\n\n\n\n","slug":"markdown的使用笔记","published":1,"updated":"2019-02-26T03:43:40.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezme4000n38udtvgaqrrd","content":"<p>由于最近写博客需要，了解到一种轻量级标记语言-markdown。下面来说一下关于一些markdown的知识：</p>\n<h1 id=\"1-markdown是什么？\"><a href=\"#1-markdown是什么？\" class=\"headerlink\" title=\"1. markdown是什么？\"></a>1. markdown是什么？</h1><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>\n<h1 id=\"2-markdown的历史发展？\"><a href=\"#2-markdown的历史发展？\" class=\"headerlink\" title=\"2. markdown的历史发展？\"></a>2. markdown的历史发展？</h1><p>John Gruber 在 2004 年创造了 Markdown 语言，在语法上有很大一部分是跟亚伦·斯沃茨（Aaron Swartz）共同合作的。这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的XHTML（或是HTML）”。 其中最重要的设计是可读性，也就是说这个语言应该要能直接在字面上的被阅读，而不用被一些格式化指令标记（像是RTF与HTML）。 因此，它是现行电子邮件标记格式的惯例，虽然它也借鉴了很多早期的标记语言，如：Setext、Texile、reStructuredText。Gruber也编写了的Perl脚本：Markdown.pl，用于把markdown语法编写的内容转换成有效的、结构良好的XHTML或HTML内容，并将左尖括号&lt;和&amp;号替换成它们各自的字符实体引用。它可以用作单独的脚本，Blosxom和Movable Type的插件又或者BBEdit的文本过滤器。Markdown也已经被其他人用Perl和别的编程语言重新实现，其中一个Perl模块放在了CPAN(Text::Markdown)上。它基于一个BSD风格的许可证分发并可以作为几个内容管理系统的插件。</p>\n<h1 id=\"3-markdown能用来做什么？\"><a href=\"#3-markdown能用来做什么？\" class=\"headerlink\" title=\"3. markdown能用来做什么？\"></a>3. markdown能用来做什么？</h1><p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。甚至Markdown能被使用来撰写电子书。</p>\n<h1 id=\"4-markdown的一些语法和平时书写的注意点？\"><a href=\"#4-markdown的一些语法和平时书写的注意点？\" class=\"headerlink\" title=\"4. markdown的一些语法和平时书写的注意点？\"></a>4. markdown的一些语法和平时书写的注意点？</h1><h1 id=\"4-1-标题\"><a href=\"#4-1-标题\" class=\"headerlink\" title=\"4.1. 标题\"></a>4.1. 标题</h1><p>书写标题的时候，我们只需要在文本前面加上『# 』即可创建一级标题，如果想创建二级，三级，或者更多只需要增加『# 』的个数即可。下面展示一下效果：</p>\n<pre><code># 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n</code></pre><p>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226100452277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"4-2-引用\"><a href=\"#4-2-引用\" class=\"headerlink\" title=\"4.2. 引用\"></a>4.2. 引用</h1><p>在需要的整个段落第一行最前面加上『&gt;』即可：<br>    &gt;在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    效果如下图：<br>    <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226101026545.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>区块引用还可以嵌套使用<br>    &gt;  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    &gt;  &gt; 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    &gt;  &gt; &gt; 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226101213185.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>    不仅可以嵌套使用，还可以再引用中加入标题，列表等元素：<br>    &gt;  ## 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    &gt;  &gt; 1. 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    &gt;  &gt; 2.  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    效果如下图：<br>    <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226101413977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"4-3-列表\"><a href=\"#4-3-列表\" class=\"headerlink\" title=\"4.3. 列表\"></a>4.3. 列表</h1><p>列表在http中有无序和有序列表，markdown也有如下：<br> <strong>无序列表</strong> :使用星号 、加号或是减号来作为标记</p>\n<pre><code>- test\n- test\n- test\n</code></pre><p>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226102026437.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>有序列表则是在文本前面加上数字和小数点</p>\n<pre><code>1. test\n2. test\n3. test\n</code></pre><p>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226102236789.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>在列表中如何使用引用？</p>\n<pre><code>*  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n    &gt; 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n    &gt; 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n</code></pre><p>在列表栏下，引用的文本需要缩进<br>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226102633553.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>代办列表：表示列表数据是否被勾选</p>\n<pre><code>- [ ] 不勾选\n- [x] 勾选\n</code></pre><p>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226102826784.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"4-4-代码块\"><a href=\"#4-4-代码块\" class=\"headerlink\" title=\"4.4. 代码块\"></a>4.4. 代码块</h1><p>只要把代码块包裹在“` 之间，在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了：</p>\n<pre><code><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'redcarpet'</span></span><br><span class=\"line\">markdown = Redcarpet.new(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">puts markdown.to_html</span><br></pre></td></tr></table></figure>\n</code></pre><p>效果如下图：<br>    <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226103542307.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"4-5-强调\"><a href=\"#4-5-强调\" class=\"headerlink\" title=\"4.5. 强调\"></a>4.5. 强调</h1><p>在Markdown中，可以使用 <em> 和  _  来表示斜体和加粗。<br>单个 </em> 和 _ 修饰，表示斜体，双个 * 和 _ 修饰表示粗体</p>\n<pre><code>*Markdown*\n_Markdown_\n**Markdown**\n__Markdown__\n</code></pre><p>效果如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226104023173.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"4-6-链接\"><a href=\"#4-6-链接\" class=\"headerlink\" title=\"4.6. 链接\"></a>4.6. 链接</h1><pre><code>文字链接 [文字描述](地址)\n图片链接 {% image 地址 '文字描述' '' %}\n</code></pre><p>效果如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226104232855.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>还有一些表格，一些工程图（流程图，时序图等）都可以使用markdown表现出来，我这里就不一一介绍了，具体参考<a href=\"https://coding.net/help/doc/project/markdown.html#i-6\" target=\"_blank\" rel=\"noopener\">Markdown 语法介绍</a></p>\n<h1 id=\"4-7-换行：\"><a href=\"#4-7-换行：\" class=\"headerlink\" title=\"4.7. 换行：\"></a>4.7. 换行：</h1><p>&emsp;&emsp;1.使用两个以上的空格加回车<br>&emsp;&emsp;2.使用http标签 \\<br></p>\n<h1 id=\"4-8-首行缩进\"><a href=\"#4-8-首行缩进\" class=\"headerlink\" title=\"4.8. 首行缩进\"></a>4.8. 首行缩进</h1><pre><code>&amp;emsp;&amp;emsp;1. 半角空格 “\\&amp;ensp;”\n&amp;emsp;&amp;emsp;2. 全角空格 “\\&amp;emsp;”\n&amp;emsp;&amp;emsp;3. 不换行空格 “\\&amp;nbsp;”\n</code></pre><h1 id=\"4-9-文本加颜色\"><a href=\"#4-9-文本加颜色\" class=\"headerlink\" title=\"4.9. 文本加颜色\"></a>4.9. 文本加颜色</h1><p>markdown 可以通过像html一样，可以通过标签样式让文本有一定的格式。</p>\n<pre><code>&lt;font color=&quot;red&quot;&gt;test&lt;/font&gt;\n</code></pre><p>效果如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226111339130.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>具体需要实现什么样式，参考<a href=\"http://www.runoob.com/css/css-text.html\" target=\"_blank\" rel=\"noopener\">css文档</a></p>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><p>今天简单介绍了markdown，并通过几个例子来展示具体用法。其实markdown还有很多内容，所以需要大家在以后使用中多积累多完善，这样才能更好的使用和掌markdown。</p>\n<p>参考文档：<br><a href=\"https://coding.net/help/doc/project/markdown.html#i-6\" target=\"_blank\" rel=\"noopener\">Markdown 语法介绍</a><br><a href=\"https://blog.csdn.net/u010177286/article/details/50358720\" target=\"_blank\" rel=\"noopener\">Markdown使用技巧总结——字体，颜色，字号，背景，首行缩进等</a><br><a href=\"https://blog.csdn.net/bao19901210/article/details/54625703\" target=\"_blank\" rel=\"noopener\">全角半角 &amp;&amp; 6种空白空格的区别</a><br><a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">维基百科 markdown介绍</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于最近写博客需要，了解到一种轻量级标记语言-markdown。下面来说一下关于一些markdown的知识：</p>\n<h1 id=\"1-markdown是什么？\"><a href=\"#1-markdown是什么？\" class=\"headerlink\" title=\"1. markdown是什么？\"></a>1. markdown是什么？</h1><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>\n<h1 id=\"2-markdown的历史发展？\"><a href=\"#2-markdown的历史发展？\" class=\"headerlink\" title=\"2. markdown的历史发展？\"></a>2. markdown的历史发展？</h1><p>John Gruber 在 2004 年创造了 Markdown 语言，在语法上有很大一部分是跟亚伦·斯沃茨（Aaron Swartz）共同合作的。这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的XHTML（或是HTML）”。 其中最重要的设计是可读性，也就是说这个语言应该要能直接在字面上的被阅读，而不用被一些格式化指令标记（像是RTF与HTML）。 因此，它是现行电子邮件标记格式的惯例，虽然它也借鉴了很多早期的标记语言，如：Setext、Texile、reStructuredText。Gruber也编写了的Perl脚本：Markdown.pl，用于把markdown语法编写的内容转换成有效的、结构良好的XHTML或HTML内容，并将左尖括号&lt;和&amp;号替换成它们各自的字符实体引用。它可以用作单独的脚本，Blosxom和Movable Type的插件又或者BBEdit的文本过滤器。Markdown也已经被其他人用Perl和别的编程语言重新实现，其中一个Perl模块放在了CPAN(Text::Markdown)上。它基于一个BSD风格的许可证分发并可以作为几个内容管理系统的插件。</p>\n<h1 id=\"3-markdown能用来做什么？\"><a href=\"#3-markdown能用来做什么？\" class=\"headerlink\" title=\"3. markdown能用来做什么？\"></a>3. markdown能用来做什么？</h1><p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。甚至Markdown能被使用来撰写电子书。</p>\n<h1 id=\"4-markdown的一些语法和平时书写的注意点？\"><a href=\"#4-markdown的一些语法和平时书写的注意点？\" class=\"headerlink\" title=\"4. markdown的一些语法和平时书写的注意点？\"></a>4. markdown的一些语法和平时书写的注意点？</h1><h1 id=\"4-1-标题\"><a href=\"#4-1-标题\" class=\"headerlink\" title=\"4.1. 标题\"></a>4.1. 标题</h1><p>书写标题的时候，我们只需要在文本前面加上『# 』即可创建一级标题，如果想创建二级，三级，或者更多只需要增加『# 』的个数即可。下面展示一下效果：</p>\n<pre><code># 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n</code></pre><p>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226100452277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"4-2-引用\"><a href=\"#4-2-引用\" class=\"headerlink\" title=\"4.2. 引用\"></a>4.2. 引用</h1><p>在需要的整个段落第一行最前面加上『&gt;』即可：<br>    &gt;在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    效果如下图：<br>    <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226101026545.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>区块引用还可以嵌套使用<br>    &gt;  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    &gt;  &gt; 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    &gt;  &gt; &gt; 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226101213185.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>    不仅可以嵌套使用，还可以再引用中加入标题，列表等元素：<br>    &gt;  ## 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    &gt;  &gt; 1. 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    &gt;  &gt; 2.  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术<br>    效果如下图：<br>    <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226101413977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"4-3-列表\"><a href=\"#4-3-列表\" class=\"headerlink\" title=\"4.3. 列表\"></a>4.3. 列表</h1><p>列表在http中有无序和有序列表，markdown也有如下：<br> <strong>无序列表</strong> :使用星号 、加号或是减号来作为标记</p>\n<pre><code>- test\n- test\n- test\n</code></pre><p>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226102026437.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>有序列表则是在文本前面加上数字和小数点</p>\n<pre><code>1. test\n2. test\n3. test\n</code></pre><p>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226102236789.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>在列表中如何使用引用？</p>\n<pre><code>*  在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n    &gt; 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n    &gt; 在这里插入图片描述 双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术\n</code></pre><p>在列表栏下，引用的文本需要缩进<br>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226102633553.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>代办列表：表示列表数据是否被勾选</p>\n<pre><code>- [ ] 不勾选\n- [x] 勾选\n</code></pre><p>效果如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226102826784.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"4-4-代码块\"><a href=\"#4-4-代码块\" class=\"headerlink\" title=\"4.4. 代码块\"></a>4.4. 代码块</h1><p>只要把代码块包裹在“` 之间，在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了：</p>\n<pre><code><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'redcarpet'</span></span><br><span class=\"line\">markdown = Redcarpet.new(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">puts markdown.to_html</span><br></pre></td></tr></table></figure>\n</code></pre><p>效果如下图：<br>    <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226103542307.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"4-5-强调\"><a href=\"#4-5-强调\" class=\"headerlink\" title=\"4.5. 强调\"></a>4.5. 强调</h1><p>在Markdown中，可以使用 <em> 和  _  来表示斜体和加粗。<br>单个 </em> 和 _ 修饰，表示斜体，双个 * 和 _ 修饰表示粗体</p>\n<pre><code>*Markdown*\n_Markdown_\n**Markdown**\n__Markdown__\n</code></pre><p>效果如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226104023173.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure></p>\n<h1 id=\"4-6-链接\"><a href=\"#4-6-链接\" class=\"headerlink\" title=\"4.6. 链接\"></a>4.6. 链接</h1><pre><code>文字链接 [文字描述](地址)\n图片链接 {% image 地址 '文字描述' '' %}\n</code></pre><p>效果如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226104232855.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>还有一些表格，一些工程图（流程图，时序图等）都可以使用markdown表现出来，我这里就不一一介绍了，具体参考<a href=\"https://coding.net/help/doc/project/markdown.html#i-6\" target=\"_blank\" rel=\"noopener\">Markdown 语法介绍</a></p>\n<h1 id=\"4-7-换行：\"><a href=\"#4-7-换行：\" class=\"headerlink\" title=\"4.7. 换行：\"></a>4.7. 换行：</h1><p>&emsp;&emsp;1.使用两个以上的空格加回车<br>&emsp;&emsp;2.使用http标签 \\<br></p>\n<h1 id=\"4-8-首行缩进\"><a href=\"#4-8-首行缩进\" class=\"headerlink\" title=\"4.8. 首行缩进\"></a>4.8. 首行缩进</h1><pre><code>&amp;emsp;&amp;emsp;1. 半角空格 “\\&amp;ensp;”\n&amp;emsp;&amp;emsp;2. 全角空格 “\\&amp;emsp;”\n&amp;emsp;&amp;emsp;3. 不换行空格 “\\&amp;nbsp;”\n</code></pre><h1 id=\"4-9-文本加颜色\"><a href=\"#4-9-文本加颜色\" class=\"headerlink\" title=\"4.9. 文本加颜色\"></a>4.9. 文本加颜色</h1><p>markdown 可以通过像html一样，可以通过标签样式让文本有一定的格式。</p>\n<pre><code>&lt;font color=&quot;red&quot;&gt;test&lt;/font&gt;\n</code></pre><p>效果如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190226111339130.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>具体需要实现什么样式，参考<a href=\"http://www.runoob.com/css/css-text.html\" target=\"_blank\" rel=\"noopener\">css文档</a></p>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><p>今天简单介绍了markdown，并通过几个例子来展示具体用法。其实markdown还有很多内容，所以需要大家在以后使用中多积累多完善，这样才能更好的使用和掌markdown。</p>\n<p>参考文档：<br><a href=\"https://coding.net/help/doc/project/markdown.html#i-6\" target=\"_blank\" rel=\"noopener\">Markdown 语法介绍</a><br><a href=\"https://blog.csdn.net/u010177286/article/details/50358720\" target=\"_blank\" rel=\"noopener\">Markdown使用技巧总结——字体，颜色，字号，背景，首行缩进等</a><br><a href=\"https://blog.csdn.net/bao19901210/article/details/54625703\" target=\"_blank\" rel=\"noopener\">全角半角 &amp;&amp; 6种空白空格的区别</a><br><a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">维基百科 markdown介绍</a></p>\n"},{"layout":"w","title":"shiro 笔记（一）","date":"2019-03-15T01:42:32.000Z","_content":"","source":"_posts/shiro-笔记（一）.md","raw":"---\nlayout: w\ntitle: shiro 笔记（一）\ndate: 2019-03-15 09:42:32\ntags:\n---\n","slug":"shiro-笔记（一）","published":1,"updated":"2019-03-15T01:42:32.974Z","comments":1,"photos":[],"link":"","_id":"cjt9ezme9000p38udfgo4z1f9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"spring boot 学习笔记","date":"2019-02-18T09:06:43.000Z","_content":"1：Spring Boot 定制URL匹配规则的方法\n\n昨天使用spring boot 做了一个后台管理系统，再方法请求时由于带了后缀导致不能找到对应的controller。原因是spring boot 路由规则设置了真匹配，比如 请求你发起请求 /index ，它只能匹配 /home 路径的 带后缀的一律不匹配。那么如果想达到匹配需求以下步骤：\n\n1：启动类 extends WebMvcConfigurationSupport\n\n2：重写configurePathMatch方法\n\n    @SpringBootApplication\n    public class DreamAdminApplication extends WebMvcConfigurationSupport {\n    \n    /**\n     * 1、 extends WebMvcConfigurationSupport\n     * 2、重写下面方法;\n     * setUseSuffixPatternMatch : 设置是否是后缀模式匹配，如“/index ”是否匹配/index.*，默认真即匹配；\n     * setUseTrailingSlashMatch : 设置是否自动后缀路径模式匹配，如“/index ”是否匹配“/index /”，默认真即匹配；\n     */\n    @Override\n    public void configurePathMatch(PathMatchConfigurer configurer) {\n        configurer.setUseSuffixPatternMatch(true);\n    }\n    \n    \n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/static/**\").addResourceLocations(\"classpath:/static/\");\n        super.addResourceHandlers(registry);\n    }\n    \n    public static void main(String[] args) {\n        SpringApplication.run(DreamAdminApplication.class, args);\n    }\n    }\n2：Spring Boot 自定义静态资源映射目录\n\n由于继承了WebMvcConfigurationSupport这个类，导致静态文件出现404的问题，所以需要我们自定义静态资源映射目录的，具体实现只需要重写（WebMvcConfigurationSupport ）的addResourceHandlers方法即可。\n\nregistry.addResourceHandler(“/static/**”).addResourceLocations(“classpath:/static/“);\n\n关于 WebMvcConfigurationSupport 提供的方法，后续再一一讲解。","source":"_posts/spring boot 学习笔记.md","raw":"---\ntitle: spring boot 学习笔记\ndate: 2019-02-18 17:06:43\n---\n1：Spring Boot 定制URL匹配规则的方法\n\n昨天使用spring boot 做了一个后台管理系统，再方法请求时由于带了后缀导致不能找到对应的controller。原因是spring boot 路由规则设置了真匹配，比如 请求你发起请求 /index ，它只能匹配 /home 路径的 带后缀的一律不匹配。那么如果想达到匹配需求以下步骤：\n\n1：启动类 extends WebMvcConfigurationSupport\n\n2：重写configurePathMatch方法\n\n    @SpringBootApplication\n    public class DreamAdminApplication extends WebMvcConfigurationSupport {\n    \n    /**\n     * 1、 extends WebMvcConfigurationSupport\n     * 2、重写下面方法;\n     * setUseSuffixPatternMatch : 设置是否是后缀模式匹配，如“/index ”是否匹配/index.*，默认真即匹配；\n     * setUseTrailingSlashMatch : 设置是否自动后缀路径模式匹配，如“/index ”是否匹配“/index /”，默认真即匹配；\n     */\n    @Override\n    public void configurePathMatch(PathMatchConfigurer configurer) {\n        configurer.setUseSuffixPatternMatch(true);\n    }\n    \n    \n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/static/**\").addResourceLocations(\"classpath:/static/\");\n        super.addResourceHandlers(registry);\n    }\n    \n    public static void main(String[] args) {\n        SpringApplication.run(DreamAdminApplication.class, args);\n    }\n    }\n2：Spring Boot 自定义静态资源映射目录\n\n由于继承了WebMvcConfigurationSupport这个类，导致静态文件出现404的问题，所以需要我们自定义静态资源映射目录的，具体实现只需要重写（WebMvcConfigurationSupport ）的addResourceHandlers方法即可。\n\nregistry.addResourceHandler(“/static/**”).addResourceLocations(“classpath:/static/“);\n\n关于 WebMvcConfigurationSupport 提供的方法，后续再一一讲解。","slug":"spring boot 学习笔记","published":1,"updated":"2019-02-18T09:10:22.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmec000r38udl71axa95","content":"<p>1：Spring Boot 定制URL匹配规则的方法</p>\n<p>昨天使用spring boot 做了一个后台管理系统，再方法请求时由于带了后缀导致不能找到对应的controller。原因是spring boot 路由规则设置了真匹配，比如 请求你发起请求 /index ，它只能匹配 /home 路径的 带后缀的一律不匹配。那么如果想达到匹配需求以下步骤：</p>\n<p>1：启动类 extends WebMvcConfigurationSupport</p>\n<p>2：重写configurePathMatch方法</p>\n<pre><code>@SpringBootApplication\npublic class DreamAdminApplication extends WebMvcConfigurationSupport {\n\n/**\n * 1、 extends WebMvcConfigurationSupport\n * 2、重写下面方法;\n * setUseSuffixPatternMatch : 设置是否是后缀模式匹配，如“/index ”是否匹配/index.*，默认真即匹配；\n * setUseTrailingSlashMatch : 设置是否自动后缀路径模式匹配，如“/index ”是否匹配“/index /”，默认真即匹配；\n */\n@Override\npublic void configurePathMatch(PathMatchConfigurer configurer) {\n    configurer.setUseSuffixPatternMatch(true);\n}\n\n\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n    registry.addResourceHandler(&quot;/static/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;);\n    super.addResourceHandlers(registry);\n}\n\npublic static void main(String[] args) {\n    SpringApplication.run(DreamAdminApplication.class, args);\n}\n}\n</code></pre><p>2：Spring Boot 自定义静态资源映射目录</p>\n<p>由于继承了WebMvcConfigurationSupport这个类，导致静态文件出现404的问题，所以需要我们自定义静态资源映射目录的，具体实现只需要重写（WebMvcConfigurationSupport ）的addResourceHandlers方法即可。</p>\n<p>registry.addResourceHandler(“/static/**”).addResourceLocations(“classpath:/static/“);</p>\n<p>关于 WebMvcConfigurationSupport 提供的方法，后续再一一讲解。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1：Spring Boot 定制URL匹配规则的方法</p>\n<p>昨天使用spring boot 做了一个后台管理系统，再方法请求时由于带了后缀导致不能找到对应的controller。原因是spring boot 路由规则设置了真匹配，比如 请求你发起请求 /index ，它只能匹配 /home 路径的 带后缀的一律不匹配。那么如果想达到匹配需求以下步骤：</p>\n<p>1：启动类 extends WebMvcConfigurationSupport</p>\n<p>2：重写configurePathMatch方法</p>\n<pre><code>@SpringBootApplication\npublic class DreamAdminApplication extends WebMvcConfigurationSupport {\n\n/**\n * 1、 extends WebMvcConfigurationSupport\n * 2、重写下面方法;\n * setUseSuffixPatternMatch : 设置是否是后缀模式匹配，如“/index ”是否匹配/index.*，默认真即匹配；\n * setUseTrailingSlashMatch : 设置是否自动后缀路径模式匹配，如“/index ”是否匹配“/index /”，默认真即匹配；\n */\n@Override\npublic void configurePathMatch(PathMatchConfigurer configurer) {\n    configurer.setUseSuffixPatternMatch(true);\n}\n\n\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n    registry.addResourceHandler(&quot;/static/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;);\n    super.addResourceHandlers(registry);\n}\n\npublic static void main(String[] args) {\n    SpringApplication.run(DreamAdminApplication.class, args);\n}\n}\n</code></pre><p>2：Spring Boot 自定义静态资源映射目录</p>\n<p>由于继承了WebMvcConfigurationSupport这个类，导致静态文件出现404的问题，所以需要我们自定义静态资源映射目录的，具体实现只需要重写（WebMvcConfigurationSupport ）的addResourceHandlers方法即可。</p>\n<p>registry.addResourceHandler(“/static/**”).addResourceLocations(“classpath:/static/“);</p>\n<p>关于 WebMvcConfigurationSupport 提供的方法，后续再一一讲解。</p>\n"},{"title":"spring bean的作用域","date":"2019-03-15T01:51:36.000Z","_content":"\nSpring 中有五种作用域，但是有三种只适用在web环境![在这里插入图片描述](https://img-blog.csdnimg.cn/20190305163713526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n下面我们来介绍一下 singleton 和 prototype\n* Singleton 作用域\n我们先通过idea 创建一个项目，然后创建一个NewCar 类拥有两个方法如下：\n```\npublic class NewCar {\n    private String content;\n    public void prints() {\n        System.out.println(content);\n    }\n   \tpublic void setContent(String content) {\n        this.content = content;\n    }\n}\n```\n接着创建一个singleton.xml 配置文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"testSingleton\" class=\"cn.assist.easydao.util.NewCar\" scope=\"singleton\"></bean>\n</beans>\n```\n接下来我们创建一个测试类，来检验\n```\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"singleton.xml\");\nNewCar newCar = (NewCar) applicationContext.getBean(\"testSingleton\");\nnewCar.setContent(\"test singleton\");\nNewCar newCar1 = (NewCar) applicationContext.getBean(\"testSingleton\");\nnewCar1.prints();\n```\n通过上述方法，打印结果如下：\n```\ntest singleton\n```\n说明 newCar 和 newCar1 指向的是同一个实例，如果使用prototype作用域会是一个什么结果？\n将上述配置文件scope 修改成 prototype，如下：\n* prototype 作用域\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"testSingleton\" class=\"cn.assist.easydao.util.NewCar\" scope=\"prototype\"></bean>\n</beans>\n```\n再次运行测试类，打印如下\n```\nNull\n```\n通过结果我们很容易知道，newCar1 和 newCar 指向的不是同一个实例。\n通过上述例子我们知道了singleton和prototype的区别，以后在实际过程中就能很好的利用它们了。\n* Request 作用域\n对于每个http请求，spring容器都会创建一个新的实例，由于每个请求都会创建一个新实例，相互之间不能看到对方的内部变化，所以相对来说是安全的。一旦请求完成，对应Request 作用域的实例也随着丢弃。\n* Session 作用域\n\t每个请求都会创建一个实例，每个实例共享一个HTTP  Session。\n. globalSession 作用域\n普遍适用于在基于portlets 的web环境下，所有的portlet共享全局的session。\n**注意：如果在基于 servlet 的web环境下，定义一个或者多个 global session 作用域，标准的http讲使用Session 作用，不会出现错误。**\n参考文档：\n[Bean scopes](https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s04.html)\n\n接下来一篇我们来介绍一下一个Servlet 和 portlets 的区别","source":"_posts/spring-bean的作用域.md","raw":"---\ntitle: spring bean的作用域\ndate: 2019-03-15 09:51:36\ntags:\n- spring\n---\n\nSpring 中有五种作用域，但是有三种只适用在web环境![在这里插入图片描述](https://img-blog.csdnimg.cn/20190305163713526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n下面我们来介绍一下 singleton 和 prototype\n* Singleton 作用域\n我们先通过idea 创建一个项目，然后创建一个NewCar 类拥有两个方法如下：\n```\npublic class NewCar {\n    private String content;\n    public void prints() {\n        System.out.println(content);\n    }\n   \tpublic void setContent(String content) {\n        this.content = content;\n    }\n}\n```\n接着创建一个singleton.xml 配置文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"testSingleton\" class=\"cn.assist.easydao.util.NewCar\" scope=\"singleton\"></bean>\n</beans>\n```\n接下来我们创建一个测试类，来检验\n```\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"singleton.xml\");\nNewCar newCar = (NewCar) applicationContext.getBean(\"testSingleton\");\nnewCar.setContent(\"test singleton\");\nNewCar newCar1 = (NewCar) applicationContext.getBean(\"testSingleton\");\nnewCar1.prints();\n```\n通过上述方法，打印结果如下：\n```\ntest singleton\n```\n说明 newCar 和 newCar1 指向的是同一个实例，如果使用prototype作用域会是一个什么结果？\n将上述配置文件scope 修改成 prototype，如下：\n* prototype 作用域\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"testSingleton\" class=\"cn.assist.easydao.util.NewCar\" scope=\"prototype\"></bean>\n</beans>\n```\n再次运行测试类，打印如下\n```\nNull\n```\n通过结果我们很容易知道，newCar1 和 newCar 指向的不是同一个实例。\n通过上述例子我们知道了singleton和prototype的区别，以后在实际过程中就能很好的利用它们了。\n* Request 作用域\n对于每个http请求，spring容器都会创建一个新的实例，由于每个请求都会创建一个新实例，相互之间不能看到对方的内部变化，所以相对来说是安全的。一旦请求完成，对应Request 作用域的实例也随着丢弃。\n* Session 作用域\n\t每个请求都会创建一个实例，每个实例共享一个HTTP  Session。\n. globalSession 作用域\n普遍适用于在基于portlets 的web环境下，所有的portlet共享全局的session。\n**注意：如果在基于 servlet 的web环境下，定义一个或者多个 global session 作用域，标准的http讲使用Session 作用，不会出现错误。**\n参考文档：\n[Bean scopes](https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s04.html)\n\n接下来一篇我们来介绍一下一个Servlet 和 portlets 的区别","slug":"spring-bean的作用域","published":1,"updated":"2019-03-15T01:52:28.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmef000t38udv29kakvw","content":"<p>Spring 中有五种作用域，但是有三种只适用在web环境<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190305163713526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>下面我们来介绍一下 singleton 和 prototype</p>\n<ul>\n<li>Singleton 作用域<br>我们先通过idea 创建一个项目，然后创建一个NewCar 类拥有两个方法如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NewCar &#123;</span><br><span class=\"line\">    private String content;</span><br><span class=\"line\">    public void prints() &#123;</span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   \tpublic void setContent(String content) &#123;</span><br><span class=\"line\">        this.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接着创建一个singleton.xml 配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;testSingleton&quot; class=&quot;cn.assist.easydao.util.NewCar&quot; scope=&quot;singleton&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们创建一个测试类，来检验<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;singleton.xml&quot;);</span><br><span class=\"line\">NewCar newCar = (NewCar) applicationContext.getBean(&quot;testSingleton&quot;);</span><br><span class=\"line\">newCar.setContent(&quot;test singleton&quot;);</span><br><span class=\"line\">NewCar newCar1 = (NewCar) applicationContext.getBean(&quot;testSingleton&quot;);</span><br><span class=\"line\">newCar1.prints();</span><br></pre></td></tr></table></figure></p>\n<p>通过上述方法，打印结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test singleton</span><br></pre></td></tr></table></figure></p>\n<p>说明 newCar 和 newCar1 指向的是同一个实例，如果使用prototype作用域会是一个什么结果？<br>将上述配置文件scope 修改成 prototype，如下：</p>\n<ul>\n<li>prototype 作用域<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;testSingleton&quot; class=&quot;cn.assist.easydao.util.NewCar&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>再次运行测试类，打印如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Null</span><br></pre></td></tr></table></figure></p>\n<p>通过结果我们很容易知道，newCar1 和 newCar 指向的不是同一个实例。<br>通过上述例子我们知道了singleton和prototype的区别，以后在实际过程中就能很好的利用它们了。</p>\n<ul>\n<li>Request 作用域<br>对于每个http请求，spring容器都会创建一个新的实例，由于每个请求都会创建一个新实例，相互之间不能看到对方的内部变化，所以相对来说是安全的。一旦请求完成，对应Request 作用域的实例也随着丢弃。</li>\n<li>Session 作用域<br>  每个请求都会创建一个实例，每个实例共享一个HTTP  Session。<br>. globalSession 作用域<br>普遍适用于在基于portlets 的web环境下，所有的portlet共享全局的session。<br><strong>注意：如果在基于 servlet 的web环境下，定义一个或者多个 global session 作用域，标准的http讲使用Session 作用，不会出现错误。</strong><br>参考文档：<br><a href=\"https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s04.html\" target=\"_blank\" rel=\"noopener\">Bean scopes</a></li>\n</ul>\n<p>接下来一篇我们来介绍一下一个Servlet 和 portlets 的区别</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Spring 中有五种作用域，但是有三种只适用在web环境<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190305163713526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>下面我们来介绍一下 singleton 和 prototype</p>\n<ul>\n<li>Singleton 作用域<br>我们先通过idea 创建一个项目，然后创建一个NewCar 类拥有两个方法如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NewCar &#123;</span><br><span class=\"line\">    private String content;</span><br><span class=\"line\">    public void prints() &#123;</span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   \tpublic void setContent(String content) &#123;</span><br><span class=\"line\">        this.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接着创建一个singleton.xml 配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;testSingleton&quot; class=&quot;cn.assist.easydao.util.NewCar&quot; scope=&quot;singleton&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们创建一个测试类，来检验<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;singleton.xml&quot;);</span><br><span class=\"line\">NewCar newCar = (NewCar) applicationContext.getBean(&quot;testSingleton&quot;);</span><br><span class=\"line\">newCar.setContent(&quot;test singleton&quot;);</span><br><span class=\"line\">NewCar newCar1 = (NewCar) applicationContext.getBean(&quot;testSingleton&quot;);</span><br><span class=\"line\">newCar1.prints();</span><br></pre></td></tr></table></figure></p>\n<p>通过上述方法，打印结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test singleton</span><br></pre></td></tr></table></figure></p>\n<p>说明 newCar 和 newCar1 指向的是同一个实例，如果使用prototype作用域会是一个什么结果？<br>将上述配置文件scope 修改成 prototype，如下：</p>\n<ul>\n<li>prototype 作用域<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;testSingleton&quot; class=&quot;cn.assist.easydao.util.NewCar&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>再次运行测试类，打印如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Null</span><br></pre></td></tr></table></figure></p>\n<p>通过结果我们很容易知道，newCar1 和 newCar 指向的不是同一个实例。<br>通过上述例子我们知道了singleton和prototype的区别，以后在实际过程中就能很好的利用它们了。</p>\n<ul>\n<li>Request 作用域<br>对于每个http请求，spring容器都会创建一个新的实例，由于每个请求都会创建一个新实例，相互之间不能看到对方的内部变化，所以相对来说是安全的。一旦请求完成，对应Request 作用域的实例也随着丢弃。</li>\n<li>Session 作用域<br>  每个请求都会创建一个实例，每个实例共享一个HTTP  Session。<br>. globalSession 作用域<br>普遍适用于在基于portlets 的web环境下，所有的portlet共享全局的session。<br><strong>注意：如果在基于 servlet 的web环境下，定义一个或者多个 global session 作用域，标准的http讲使用Session 作用，不会出现错误。</strong><br>参考文档：<br><a href=\"https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s04.html\" target=\"_blank\" rel=\"noopener\">Bean scopes</a></li>\n</ul>\n<p>接下来一篇我们来介绍一下一个Servlet 和 portlets 的区别</p>\n"},{"title":"spring boot 如何创建和使用freemaker自定义标签","date":"2019-02-19T10:06:11.000Z","_content":"\n由于spring boot 简化了配置文件的，所以之前在配置文件中实现自定义freemaker标签，统一通过Java类实现。\n\n之前spring MVC 的实现步骤：\n\n    <!-- =========================freemarker VIEW定义 ========================= -->\n    <bean id=\"freeMarkerConfig\" class=\"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer\">\n       <property name=\"templateLoaderPaths\" value=\"/WEB-INF/view2.0/\"/>\n       <property name=\"freemarkerVariables\">\n          <map>\n             <!-- shiro freemarker标签  使用自定义标签-->\n             <entry key=\"shiro\">\n                <bean class=\"com.yuelinghui.shiro.freemarker.ShiroTags\"/>\n             </entry>\n          </map>\n       </property>\n    </bean>\n    那么spring boot 中如何实现，具体实现如下：\n    \n    创建 FreemarkerConfig ，\n    @Component\n    public class FreemarkerConfig {\n    \n      @Autowired\n      private Configuration configuration;\n    \n      @PostConstruct\n      public void setSharedVariable() {\n    // 创建自定义标签对象\n        configuration.setSharedVariable(\"shiro\", new ShiroTags());\n      }\n    \n    }\n    通过上述方法可以实现引入freemaker 自定义标签\n","source":"_posts/spring-boot-如何创建和使用freemaker自定义标签.md","raw":"---\ntitle: spring boot 如何创建和使用freemaker自定义标签\ndate: 2019-02-19 18:06:11\ntags:\n---\n\n由于spring boot 简化了配置文件的，所以之前在配置文件中实现自定义freemaker标签，统一通过Java类实现。\n\n之前spring MVC 的实现步骤：\n\n    <!-- =========================freemarker VIEW定义 ========================= -->\n    <bean id=\"freeMarkerConfig\" class=\"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer\">\n       <property name=\"templateLoaderPaths\" value=\"/WEB-INF/view2.0/\"/>\n       <property name=\"freemarkerVariables\">\n          <map>\n             <!-- shiro freemarker标签  使用自定义标签-->\n             <entry key=\"shiro\">\n                <bean class=\"com.yuelinghui.shiro.freemarker.ShiroTags\"/>\n             </entry>\n          </map>\n       </property>\n    </bean>\n    那么spring boot 中如何实现，具体实现如下：\n    \n    创建 FreemarkerConfig ，\n    @Component\n    public class FreemarkerConfig {\n    \n      @Autowired\n      private Configuration configuration;\n    \n      @PostConstruct\n      public void setSharedVariable() {\n    // 创建自定义标签对象\n        configuration.setSharedVariable(\"shiro\", new ShiroTags());\n      }\n    \n    }\n    通过上述方法可以实现引入freemaker 自定义标签\n","slug":"spring-boot-如何创建和使用freemaker自定义标签","published":1,"updated":"2019-02-19T10:09:45.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmeh000v38ud8gkagywu","content":"<p>由于spring boot 简化了配置文件的，所以之前在配置文件中实现自定义freemaker标签，统一通过Java类实现。</p>\n<p>之前spring MVC 的实现步骤：</p>\n<pre><code>&lt;!-- =========================freemarker VIEW定义 ========================= --&gt;\n&lt;bean id=&quot;freeMarkerConfig&quot; class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;&gt;\n   &lt;property name=&quot;templateLoaderPaths&quot; value=&quot;/WEB-INF/view2.0/&quot;/&gt;\n   &lt;property name=&quot;freemarkerVariables&quot;&gt;\n      &lt;map&gt;\n         &lt;!-- shiro freemarker标签  使用自定义标签--&gt;\n         &lt;entry key=&quot;shiro&quot;&gt;\n            &lt;bean class=&quot;com.yuelinghui.shiro.freemarker.ShiroTags&quot;/&gt;\n         &lt;/entry&gt;\n      &lt;/map&gt;\n   &lt;/property&gt;\n&lt;/bean&gt;\n那么spring boot 中如何实现，具体实现如下：\n\n创建 FreemarkerConfig ，\n@Component\npublic class FreemarkerConfig {\n\n  @Autowired\n  private Configuration configuration;\n\n  @PostConstruct\n  public void setSharedVariable() {\n// 创建自定义标签对象\n    configuration.setSharedVariable(&quot;shiro&quot;, new ShiroTags());\n  }\n\n}\n通过上述方法可以实现引入freemaker 自定义标签\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>由于spring boot 简化了配置文件的，所以之前在配置文件中实现自定义freemaker标签，统一通过Java类实现。</p>\n<p>之前spring MVC 的实现步骤：</p>\n<pre><code>&lt;!-- =========================freemarker VIEW定义 ========================= --&gt;\n&lt;bean id=&quot;freeMarkerConfig&quot; class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;&gt;\n   &lt;property name=&quot;templateLoaderPaths&quot; value=&quot;/WEB-INF/view2.0/&quot;/&gt;\n   &lt;property name=&quot;freemarkerVariables&quot;&gt;\n      &lt;map&gt;\n         &lt;!-- shiro freemarker标签  使用自定义标签--&gt;\n         &lt;entry key=&quot;shiro&quot;&gt;\n            &lt;bean class=&quot;com.yuelinghui.shiro.freemarker.ShiroTags&quot;/&gt;\n         &lt;/entry&gt;\n      &lt;/map&gt;\n   &lt;/property&gt;\n&lt;/bean&gt;\n那么spring boot 中如何实现，具体实现如下：\n\n创建 FreemarkerConfig ，\n@Component\npublic class FreemarkerConfig {\n\n  @Autowired\n  private Configuration configuration;\n\n  @PostConstruct\n  public void setSharedVariable() {\n// 创建自定义标签对象\n    configuration.setSharedVariable(&quot;shiro&quot;, new ShiroTags());\n  }\n\n}\n通过上述方法可以实现引入freemaker 自定义标签\n</code></pre>"},{"title":"spring mvc @RequestBody 和 @RequestParam 比较","date":"2019-02-19T10:03:23.000Z","_content":"1： @RequestBody\n\n    @RequestBody 注解 通过 HttpMessageReader 使请求的body反序列化成一个对象。\n    \n    GET、POST方式提交时， 根据 request header Content-Type 的值来判断:\n    \n    application/x-www-form-urlencoded， 可选（即非必须，因为这种情况的数据@RequestParam, @ModelAttribute也可以处理，当然@RequestBody也能处理）；\n    multipart/form-data, 不能处理（即使用@RequestBody不能处理这种格式的数据）；\n    其他格式， 必须（其他格式包括application/json, application/xml等。这些格式的数据，使用@RequestBody来处理）；\n    $.ajax({\n        type: \"POST\",\n        url: \"/coupon/del\",\n        dataType : 'json',\n        contentType : 'application/json;charset=UTF-8', // 设置请求的文本类型\n        data: JSON.stringify(ids),\n        success: function (result) {\n            layer.msg(result.msg)\n        }\n    });\n    控制层接收\n    \n    public JSONObject del(@RequestBody String[] cids){\n           RecordBean<String> result = couponService.delBatch(cids);\n       if (result.isSuccessCode()) {\n          return JsonBean.success(result.getMsg());\n       }\n       return JsonBean.error(result.getMsg());\n2：@RequestParam\n\n    @RequestParam \n    \n    A） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String--> 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；\n    \n    B）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；\n    \n    C) 该注解有两个属性： name、required； \n    \n    name：用来指定要传入值的key名称\n    \n    required：用来指示参数是否必须绑定；当@RequestParam 被声明是Map<String, String> or MultiValueMap<String, String> required 为false\n    \n    相比 Request.getParameter() 获取 优点：\n    \n    通过注解的方式可以减少代码量，代码更整洁\n    \n    示例代码：\n    \n    $.ajax({\n        type: \"POST\",\n        url: \"/coupon/del\",\n        data: {ids:123},\n        success: function (result) {\n            layer.msg(result.msg)\n        }\n    });\n    控制层\n    \n    \n     \n     * 删除\n        */\n       @ResponseBody\n       @RequestMapping(\"/dels\")\n       public JSONObject dels(@RequestParam(name = \"ids\") Integer cids){\n          System.out.println(cids);\n          return JsonBean.success(\"ok\",cids);\n       }\n3:@ModelAttribute 注解获取参数\n\n    /**\n        * 删除\n        */\n       @RequestMapping(\"/coupon\")\n       @ResponseBody\n    // @RequiresPermissions(\"coupon:del\")\n       public JSONObject coupon(@ModelAttribute Coupon coupon){\n      return JsonBean.success(\"\",coupon);\n\n","source":"_posts/spring-mvc-RequestBody-和-RequestParam-比较.md","raw":"---\ntitle: spring mvc @RequestBody 和 @RequestParam 比较\ndate: 2019-02-19 18:03:23\ntags:\n---\n1： @RequestBody\n\n    @RequestBody 注解 通过 HttpMessageReader 使请求的body反序列化成一个对象。\n    \n    GET、POST方式提交时， 根据 request header Content-Type 的值来判断:\n    \n    application/x-www-form-urlencoded， 可选（即非必须，因为这种情况的数据@RequestParam, @ModelAttribute也可以处理，当然@RequestBody也能处理）；\n    multipart/form-data, 不能处理（即使用@RequestBody不能处理这种格式的数据）；\n    其他格式， 必须（其他格式包括application/json, application/xml等。这些格式的数据，使用@RequestBody来处理）；\n    $.ajax({\n        type: \"POST\",\n        url: \"/coupon/del\",\n        dataType : 'json',\n        contentType : 'application/json;charset=UTF-8', // 设置请求的文本类型\n        data: JSON.stringify(ids),\n        success: function (result) {\n            layer.msg(result.msg)\n        }\n    });\n    控制层接收\n    \n    public JSONObject del(@RequestBody String[] cids){\n           RecordBean<String> result = couponService.delBatch(cids);\n       if (result.isSuccessCode()) {\n          return JsonBean.success(result.getMsg());\n       }\n       return JsonBean.error(result.getMsg());\n2：@RequestParam\n\n    @RequestParam \n    \n    A） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String--> 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；\n    \n    B）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；\n    \n    C) 该注解有两个属性： name、required； \n    \n    name：用来指定要传入值的key名称\n    \n    required：用来指示参数是否必须绑定；当@RequestParam 被声明是Map<String, String> or MultiValueMap<String, String> required 为false\n    \n    相比 Request.getParameter() 获取 优点：\n    \n    通过注解的方式可以减少代码量，代码更整洁\n    \n    示例代码：\n    \n    $.ajax({\n        type: \"POST\",\n        url: \"/coupon/del\",\n        data: {ids:123},\n        success: function (result) {\n            layer.msg(result.msg)\n        }\n    });\n    控制层\n    \n    \n     \n     * 删除\n        */\n       @ResponseBody\n       @RequestMapping(\"/dels\")\n       public JSONObject dels(@RequestParam(name = \"ids\") Integer cids){\n          System.out.println(cids);\n          return JsonBean.success(\"ok\",cids);\n       }\n3:@ModelAttribute 注解获取参数\n\n    /**\n        * 删除\n        */\n       @RequestMapping(\"/coupon\")\n       @ResponseBody\n    // @RequiresPermissions(\"coupon:del\")\n       public JSONObject coupon(@ModelAttribute Coupon coupon){\n      return JsonBean.success(\"\",coupon);\n\n","slug":"spring-mvc-RequestBody-和-RequestParam-比较","published":1,"updated":"2019-02-19T10:10:24.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmej000w38udyp6dfg5l","content":"<p>1： @RequestBody</p>\n<pre><code>@RequestBody 注解 通过 HttpMessageReader 使请求的body反序列化成一个对象。\n\nGET、POST方式提交时， 根据 request header Content-Type 的值来判断:\n\napplication/x-www-form-urlencoded， 可选（即非必须，因为这种情况的数据@RequestParam, @ModelAttribute也可以处理，当然@RequestBody也能处理）；\nmultipart/form-data, 不能处理（即使用@RequestBody不能处理这种格式的数据）；\n其他格式， 必须（其他格式包括application/json, application/xml等。这些格式的数据，使用@RequestBody来处理）；\n$.ajax({\n    type: &quot;POST&quot;,\n    url: &quot;/coupon/del&quot;,\n    dataType : &apos;json&apos;,\n    contentType : &apos;application/json;charset=UTF-8&apos;, // 设置请求的文本类型\n    data: JSON.stringify(ids),\n    success: function (result) {\n        layer.msg(result.msg)\n    }\n});\n控制层接收\n\npublic JSONObject del(@RequestBody String[] cids){\n       RecordBean&lt;String&gt; result = couponService.delBatch(cids);\n   if (result.isSuccessCode()) {\n      return JsonBean.success(result.getMsg());\n   }\n   return JsonBean.error(result.getMsg());\n</code></pre><p>2：@RequestParam</p>\n<pre><code>@RequestParam \n\nA） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String--&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；\n\nB）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；\n\nC) 该注解有两个属性： name、required； \n\nname：用来指定要传入值的key名称\n\nrequired：用来指示参数是否必须绑定；当@RequestParam 被声明是Map&lt;String, String&gt; or MultiValueMap&lt;String, String&gt; required 为false\n\n相比 Request.getParameter() 获取 优点：\n\n通过注解的方式可以减少代码量，代码更整洁\n\n示例代码：\n\n$.ajax({\n    type: &quot;POST&quot;,\n    url: &quot;/coupon/del&quot;,\n    data: {ids:123},\n    success: function (result) {\n        layer.msg(result.msg)\n    }\n});\n控制层\n\n\n\n * 删除\n    */\n   @ResponseBody\n   @RequestMapping(&quot;/dels&quot;)\n   public JSONObject dels(@RequestParam(name = &quot;ids&quot;) Integer cids){\n      System.out.println(cids);\n      return JsonBean.success(&quot;ok&quot;,cids);\n   }\n</code></pre><p>3:@ModelAttribute 注解获取参数</p>\n<pre><code>/**\n    * 删除\n    */\n   @RequestMapping(&quot;/coupon&quot;)\n   @ResponseBody\n// @RequiresPermissions(&quot;coupon:del&quot;)\n   public JSONObject coupon(@ModelAttribute Coupon coupon){\n  return JsonBean.success(&quot;&quot;,coupon);\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>1： @RequestBody</p>\n<pre><code>@RequestBody 注解 通过 HttpMessageReader 使请求的body反序列化成一个对象。\n\nGET、POST方式提交时， 根据 request header Content-Type 的值来判断:\n\napplication/x-www-form-urlencoded， 可选（即非必须，因为这种情况的数据@RequestParam, @ModelAttribute也可以处理，当然@RequestBody也能处理）；\nmultipart/form-data, 不能处理（即使用@RequestBody不能处理这种格式的数据）；\n其他格式， 必须（其他格式包括application/json, application/xml等。这些格式的数据，使用@RequestBody来处理）；\n$.ajax({\n    type: &quot;POST&quot;,\n    url: &quot;/coupon/del&quot;,\n    dataType : &apos;json&apos;,\n    contentType : &apos;application/json;charset=UTF-8&apos;, // 设置请求的文本类型\n    data: JSON.stringify(ids),\n    success: function (result) {\n        layer.msg(result.msg)\n    }\n});\n控制层接收\n\npublic JSONObject del(@RequestBody String[] cids){\n       RecordBean&lt;String&gt; result = couponService.delBatch(cids);\n   if (result.isSuccessCode()) {\n      return JsonBean.success(result.getMsg());\n   }\n   return JsonBean.error(result.getMsg());\n</code></pre><p>2：@RequestParam</p>\n<pre><code>@RequestParam \n\nA） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String--&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；\n\nB）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；\n\nC) 该注解有两个属性： name、required； \n\nname：用来指定要传入值的key名称\n\nrequired：用来指示参数是否必须绑定；当@RequestParam 被声明是Map&lt;String, String&gt; or MultiValueMap&lt;String, String&gt; required 为false\n\n相比 Request.getParameter() 获取 优点：\n\n通过注解的方式可以减少代码量，代码更整洁\n\n示例代码：\n\n$.ajax({\n    type: &quot;POST&quot;,\n    url: &quot;/coupon/del&quot;,\n    data: {ids:123},\n    success: function (result) {\n        layer.msg(result.msg)\n    }\n});\n控制层\n\n\n\n * 删除\n    */\n   @ResponseBody\n   @RequestMapping(&quot;/dels&quot;)\n   public JSONObject dels(@RequestParam(name = &quot;ids&quot;) Integer cids){\n      System.out.println(cids);\n      return JsonBean.success(&quot;ok&quot;,cids);\n   }\n</code></pre><p>3:@ModelAttribute 注解获取参数</p>\n<pre><code>/**\n    * 删除\n    */\n   @RequestMapping(&quot;/coupon&quot;)\n   @ResponseBody\n// @RequiresPermissions(&quot;coupon:del&quot;)\n   public JSONObject coupon(@ModelAttribute Coupon coupon){\n  return JsonBean.success(&quot;&quot;,coupon);\n</code></pre>"},{"title":"了解Java中的代理","date":"2019-03-15T01:46:49.000Z","_content":"# 1. 什么是代理？\n代理能代替我们去做很多事情，就举一个买票的例子，我们如果去火车站买票，需要搭车去火车站，然后排队买票，买到票回家这一系列的操作都需要自己去完成，万一碰到每票的情况还需要明天继续跑一趟。这时你是不是想有一个人帮你去做，做成之后你给他一点报酬，那么你是不是不用去火车站买票了，可以做一些自己的事了。代替你去买票的过程其实就是代理的过程。\n# 2. 代理的实现？\n在没有使用代理之前，我们需要自己去实现很多功能，现在我通过工人工作和打卡两个功能进行说明\n* 工人接口 有一个默认方法打卡和一个工作的方法\n```\npublic interface Worker {\n\tpublic void work();\n    default void punch() {\n        System.out.println(\"上下班打卡。。。。。。。。。。。。。。。\");\n    }\n}\n```\n* 工人A 实现类 ，实现接口的工作方法，并在上下班前打卡\n```\n/**\n * 第一个工人\n * @author xla\n */\npublic class WorkFirst implements Worker {\n\n    @Override\n    public void work() {\n        punch();\n        System.out.println(\"doing First work\");\n        punch();\n    }\n\n}\n```\n* 工人B 实现类，实现接口的工作方法，并在上下班前打卡\n```\n/**\n * 第二个工人\n * @author xla\n */\npublic class WorkSecond implements Worker {\n\n    /**\n     * 他们在工作前后需要打卡\n     */\n    @Override\n    public void work() {\n        punch();\n        System.out.println(\"do second job\");\n        punch();\n    }\n}\n```\n上述代码在没有使用代理前是这么实现的，但是你有没有发现一个问题，上述工人在工作前后都调用了punch方法，显得有些重复。那我们通过什么可以解决这个问题呢？代理？？\n\n目前我们使用的Java 代理有两种，静态代理和动态代理下面我们通过例子来实现：\n* 静态代理\n我们创建一个代理类 WorkProxy\n```\npublic class WorkProxy implements Worker {\n    private Worker worker;\n\n    public WorkProxy(Worker worker) {\n        this.worker = worker;\n    }\n\n    @Override\n    public void work() {\n          punch();\n          worker.work();\n          punch();\n    }\n}\n```\n工人A 中的work 方法就不需要再前后调用打卡功能，只需要将自己的对象交给代理类让代理类去实现打卡功能代码如下：\n```\npublic static void main(String[] args) {\n        Worker worker = new WorkFirst();\n        WorkProxy workProxy = new WorkProxy(worker);\n        workProxy.work();\n }\n```\n结果如下：\n```\n上下班打卡。。。。。。。。。。。。。。。\ndoing First work\n上下班打卡。。。。。。。。。。。。。。。\n```\n* 动态代理\n\n动态代理，顾名思义就是代理类是在运行过程中动态创建的，实现动态的过程我们需要创建一个中介类，实现InvocationHandler 接口作为调用处理器”拦截“对代理类方法的调用。中介类实现如下：\n```\npublic class WorkDynamicProxy implements InvocationHandler {\n    private Worker worker;\n\n    public  WorkDynamicProxy(Worker worker) {\n        this.worker = worker;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        worker.punch();\n        Object result = method.invoke(worker, args);\n        worker.punch();\n        return result;\n    }\n}\n```\n接下来我们来测试一下：\n```\npublic static void main(String[] args) {\n        WorkDynamicProxy workDynamicProxy = new WorkDynamicProxy(new WorkSecond());\n        //获取代理类实例worker\n        Worker worker = (Worker)(Proxy.newProxyInstance(Worker.class.getClassLoader(), new Class[] {Worker.class}, workDynamicProxy));\n        //通过代理类对象调用代理类方法，实际上会转到invoke方法调用\n        worker.work();\n    }\n```\n打印结果如下：\n```\n上下班打卡。。。。。。。。。。。。。。。\ndo second job\n上下班打卡。。。。。。。。。。。。。。。\n```\n现在我们需要考虑一几个问题？动态代理的过程？为啥动态代理需要使用接口？现在我们来解决第一个问题：\n* 动态代理的过程？\n从上述代码中我们可以看出，通过newProxyInstance方法获取一个代理类的，调用代理类的方法都会执行invoke(Object proxy, Method method, Object[] args)方法，解释三个参数\nproxy 委托类\nmethod 代理类的方法\nargs 调用代理类的方法参入的参数\n* 为啥动态代理需要使用接口？\n我们再次查看源码newProxyInstance方法的实现：\n```\npublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        Objects.requireNonNull(h);\n\n        final Class<?>[] intfs = interfaces.clone();\n        final SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);\n        }\n\n        /*\n         * Look up or generate the designated proxy class.\n         */\n        Class<?> cl = getProxyClass0(loader, intfs);\n\n        /*\n         * Invoke its constructor with the designated invocation handler.\n         */\n        try {\n            if (sm != null) {\n                checkNewProxyPermission(Reflection.getCallerClass(), cl);\n            }\n\n            final Constructor<?> cons = cl.getConstructor(constructorParams);\n            final InvocationHandler ih = h;\n            if (!Modifier.isPublic(cl.getModifiers())) {\n                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n                    public Void run() {\n                        cons.setAccessible(true);\n                        return null;\n                    }\n                });\n            }\n            return cons.newInstance(new Object[]{h});\n        }\n        ....\n    }\n```\n从源码上，首先进行一系列的判断逻辑，然后到了\nClass<?> cl = getProxyClass0(loader, intfs);\n获取代理类的Class 对象，接下来执行\n final Constructor<?> cons = cl.getConstructor(constructorParams);\n 获取Class的构造对象，通过cons.newInstance(new Object[]{h}); 返回一个代理类实例对象，具体参考 [Java反射](http://www.xulian.net.cn/2019/02/20/java-%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/) 。\n 目前我们只知道代理类对象的创建过程，但是为啥只能传入接口还是得不到解决，那我们只能继续查看getProxyClass0源码：\n 具体实现步骤：\n 1. 验证，通过类加载对象和接口列表获取代理类的Class对象，如果缓存中存在则返回，没有就通过代理类工厂创建代理类\n 2. 创建代理类\n通过ProxyClassFactory工厂创建代理类，核心代码如下\n```\nString proxyName = proxyPkg + proxyClassNamePrefix + num;\nbyte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);\ndefineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);\n```\n定义一个类的名称，通过传入的接口列表和访问标志生成一个代理类的字节码，最后调用defineClass0方法将字节码加载到类加载器中，创建一个代理类。\n现在我们来实现将代理类的字节码写入本地，查看具体代理类的信息：\n```\nbyte[] proxyClassFile = ProxyGenerator.generateProxyClass(\n                \"$proxy1\", new Class[] {Worker.class}, Modifier.PUBLIC);\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(\"D:/$proxy1.class\");\n            fos.write(proxyClassFile);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                fos.flush();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n```\n通过反编译启查看字节码：\n```\npublic class $proxy1 extends Proxy  implements Worker {\n....\npublic final void work()  throws  {\n    try  {\n      this.h.invoke(this, m3, null);\n      return;\n    }\n    ....\n  }\n....\n}\n```\n现在我们终于得到答案，this.h.invoke(this, m3, null); 很好得验证了之前执行work（）方法其实是调用了中介类的invoke方法结论，还有一个问题，为啥动态代理需要使用接口，主要原因是代理类已经继承了Proxy类，Java不支持多继承所以导致动态代理需要使用接口，接口支持多继承。终于可以说服自己为啥动态代理需要接口了。。。。。\n# 3. 总结\n我们大概讲了一下什么是代理，然后通过例子，代码实现了Java中的代理，最后通过源码解释了Java动态代理的过程。。。\n\n\n参考文档：\n\njdk 8\n[JDK动态代理为什么必须针对接口？其与CGLIB的对比](https://www.cnblogs.com/frankliiu-java/articles/1896443.html)\n","source":"_posts/了解Java中的代理.md","raw":"---\ntitle: 了解Java中的代理\ndate: 2019-03-15 09:46:49\ntags:\n- JAVA\n---\n# 1. 什么是代理？\n代理能代替我们去做很多事情，就举一个买票的例子，我们如果去火车站买票，需要搭车去火车站，然后排队买票，买到票回家这一系列的操作都需要自己去完成，万一碰到每票的情况还需要明天继续跑一趟。这时你是不是想有一个人帮你去做，做成之后你给他一点报酬，那么你是不是不用去火车站买票了，可以做一些自己的事了。代替你去买票的过程其实就是代理的过程。\n# 2. 代理的实现？\n在没有使用代理之前，我们需要自己去实现很多功能，现在我通过工人工作和打卡两个功能进行说明\n* 工人接口 有一个默认方法打卡和一个工作的方法\n```\npublic interface Worker {\n\tpublic void work();\n    default void punch() {\n        System.out.println(\"上下班打卡。。。。。。。。。。。。。。。\");\n    }\n}\n```\n* 工人A 实现类 ，实现接口的工作方法，并在上下班前打卡\n```\n/**\n * 第一个工人\n * @author xla\n */\npublic class WorkFirst implements Worker {\n\n    @Override\n    public void work() {\n        punch();\n        System.out.println(\"doing First work\");\n        punch();\n    }\n\n}\n```\n* 工人B 实现类，实现接口的工作方法，并在上下班前打卡\n```\n/**\n * 第二个工人\n * @author xla\n */\npublic class WorkSecond implements Worker {\n\n    /**\n     * 他们在工作前后需要打卡\n     */\n    @Override\n    public void work() {\n        punch();\n        System.out.println(\"do second job\");\n        punch();\n    }\n}\n```\n上述代码在没有使用代理前是这么实现的，但是你有没有发现一个问题，上述工人在工作前后都调用了punch方法，显得有些重复。那我们通过什么可以解决这个问题呢？代理？？\n\n目前我们使用的Java 代理有两种，静态代理和动态代理下面我们通过例子来实现：\n* 静态代理\n我们创建一个代理类 WorkProxy\n```\npublic class WorkProxy implements Worker {\n    private Worker worker;\n\n    public WorkProxy(Worker worker) {\n        this.worker = worker;\n    }\n\n    @Override\n    public void work() {\n          punch();\n          worker.work();\n          punch();\n    }\n}\n```\n工人A 中的work 方法就不需要再前后调用打卡功能，只需要将自己的对象交给代理类让代理类去实现打卡功能代码如下：\n```\npublic static void main(String[] args) {\n        Worker worker = new WorkFirst();\n        WorkProxy workProxy = new WorkProxy(worker);\n        workProxy.work();\n }\n```\n结果如下：\n```\n上下班打卡。。。。。。。。。。。。。。。\ndoing First work\n上下班打卡。。。。。。。。。。。。。。。\n```\n* 动态代理\n\n动态代理，顾名思义就是代理类是在运行过程中动态创建的，实现动态的过程我们需要创建一个中介类，实现InvocationHandler 接口作为调用处理器”拦截“对代理类方法的调用。中介类实现如下：\n```\npublic class WorkDynamicProxy implements InvocationHandler {\n    private Worker worker;\n\n    public  WorkDynamicProxy(Worker worker) {\n        this.worker = worker;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        worker.punch();\n        Object result = method.invoke(worker, args);\n        worker.punch();\n        return result;\n    }\n}\n```\n接下来我们来测试一下：\n```\npublic static void main(String[] args) {\n        WorkDynamicProxy workDynamicProxy = new WorkDynamicProxy(new WorkSecond());\n        //获取代理类实例worker\n        Worker worker = (Worker)(Proxy.newProxyInstance(Worker.class.getClassLoader(), new Class[] {Worker.class}, workDynamicProxy));\n        //通过代理类对象调用代理类方法，实际上会转到invoke方法调用\n        worker.work();\n    }\n```\n打印结果如下：\n```\n上下班打卡。。。。。。。。。。。。。。。\ndo second job\n上下班打卡。。。。。。。。。。。。。。。\n```\n现在我们需要考虑一几个问题？动态代理的过程？为啥动态代理需要使用接口？现在我们来解决第一个问题：\n* 动态代理的过程？\n从上述代码中我们可以看出，通过newProxyInstance方法获取一个代理类的，调用代理类的方法都会执行invoke(Object proxy, Method method, Object[] args)方法，解释三个参数\nproxy 委托类\nmethod 代理类的方法\nargs 调用代理类的方法参入的参数\n* 为啥动态代理需要使用接口？\n我们再次查看源码newProxyInstance方法的实现：\n```\npublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        Objects.requireNonNull(h);\n\n        final Class<?>[] intfs = interfaces.clone();\n        final SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);\n        }\n\n        /*\n         * Look up or generate the designated proxy class.\n         */\n        Class<?> cl = getProxyClass0(loader, intfs);\n\n        /*\n         * Invoke its constructor with the designated invocation handler.\n         */\n        try {\n            if (sm != null) {\n                checkNewProxyPermission(Reflection.getCallerClass(), cl);\n            }\n\n            final Constructor<?> cons = cl.getConstructor(constructorParams);\n            final InvocationHandler ih = h;\n            if (!Modifier.isPublic(cl.getModifiers())) {\n                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n                    public Void run() {\n                        cons.setAccessible(true);\n                        return null;\n                    }\n                });\n            }\n            return cons.newInstance(new Object[]{h});\n        }\n        ....\n    }\n```\n从源码上，首先进行一系列的判断逻辑，然后到了\nClass<?> cl = getProxyClass0(loader, intfs);\n获取代理类的Class 对象，接下来执行\n final Constructor<?> cons = cl.getConstructor(constructorParams);\n 获取Class的构造对象，通过cons.newInstance(new Object[]{h}); 返回一个代理类实例对象，具体参考 [Java反射](http://www.xulian.net.cn/2019/02/20/java-%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/) 。\n 目前我们只知道代理类对象的创建过程，但是为啥只能传入接口还是得不到解决，那我们只能继续查看getProxyClass0源码：\n 具体实现步骤：\n 1. 验证，通过类加载对象和接口列表获取代理类的Class对象，如果缓存中存在则返回，没有就通过代理类工厂创建代理类\n 2. 创建代理类\n通过ProxyClassFactory工厂创建代理类，核心代码如下\n```\nString proxyName = proxyPkg + proxyClassNamePrefix + num;\nbyte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);\ndefineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);\n```\n定义一个类的名称，通过传入的接口列表和访问标志生成一个代理类的字节码，最后调用defineClass0方法将字节码加载到类加载器中，创建一个代理类。\n现在我们来实现将代理类的字节码写入本地，查看具体代理类的信息：\n```\nbyte[] proxyClassFile = ProxyGenerator.generateProxyClass(\n                \"$proxy1\", new Class[] {Worker.class}, Modifier.PUBLIC);\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(\"D:/$proxy1.class\");\n            fos.write(proxyClassFile);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                fos.flush();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n```\n通过反编译启查看字节码：\n```\npublic class $proxy1 extends Proxy  implements Worker {\n....\npublic final void work()  throws  {\n    try  {\n      this.h.invoke(this, m3, null);\n      return;\n    }\n    ....\n  }\n....\n}\n```\n现在我们终于得到答案，this.h.invoke(this, m3, null); 很好得验证了之前执行work（）方法其实是调用了中介类的invoke方法结论，还有一个问题，为啥动态代理需要使用接口，主要原因是代理类已经继承了Proxy类，Java不支持多继承所以导致动态代理需要使用接口，接口支持多继承。终于可以说服自己为啥动态代理需要接口了。。。。。\n# 3. 总结\n我们大概讲了一下什么是代理，然后通过例子，代码实现了Java中的代理，最后通过源码解释了Java动态代理的过程。。。\n\n\n参考文档：\n\njdk 8\n[JDK动态代理为什么必须针对接口？其与CGLIB的对比](https://www.cnblogs.com/frankliiu-java/articles/1896443.html)\n","slug":"了解Java中的代理","published":1,"updated":"2019-03-15T01:48:11.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmem000y38udhr9qwe4v","content":"<h1 id=\"1-什么是代理？\"><a href=\"#1-什么是代理？\" class=\"headerlink\" title=\"1. 什么是代理？\"></a>1. 什么是代理？</h1><p>代理能代替我们去做很多事情，就举一个买票的例子，我们如果去火车站买票，需要搭车去火车站，然后排队买票，买到票回家这一系列的操作都需要自己去完成，万一碰到每票的情况还需要明天继续跑一趟。这时你是不是想有一个人帮你去做，做成之后你给他一点报酬，那么你是不是不用去火车站买票了，可以做一些自己的事了。代替你去买票的过程其实就是代理的过程。</p>\n<h1 id=\"2-代理的实现？\"><a href=\"#2-代理的实现？\" class=\"headerlink\" title=\"2. 代理的实现？\"></a>2. 代理的实现？</h1><p>在没有使用代理之前，我们需要自己去实现很多功能，现在我通过工人工作和打卡两个功能进行说明</p>\n<ul>\n<li><p>工人接口 有一个默认方法打卡和一个工作的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Worker &#123;</span><br><span class=\"line\">\tpublic void work();</span><br><span class=\"line\">    default void punch() &#123;</span><br><span class=\"line\">        System.out.println(&quot;上下班打卡。。。。。。。。。。。。。。。&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>工人A 实现类 ，实现接口的工作方法，并在上下班前打卡</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 第一个工人</span><br><span class=\"line\"> * @author xla</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class WorkFirst implements Worker &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void work() &#123;</span><br><span class=\"line\">        punch();</span><br><span class=\"line\">        System.out.println(&quot;doing First work&quot;);</span><br><span class=\"line\">        punch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>工人B 实现类，实现接口的工作方法，并在上下班前打卡</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 第二个工人</span><br><span class=\"line\"> * @author xla</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class WorkSecond implements Worker &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 他们在工作前后需要打卡</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void work() &#123;</span><br><span class=\"line\">        punch();</span><br><span class=\"line\">        System.out.println(&quot;do second job&quot;);</span><br><span class=\"line\">        punch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上述代码在没有使用代理前是这么实现的，但是你有没有发现一个问题，上述工人在工作前后都调用了punch方法，显得有些重复。那我们通过什么可以解决这个问题呢？代理？？</p>\n<p>目前我们使用的Java 代理有两种，静态代理和动态代理下面我们通过例子来实现：</p>\n<ul>\n<li>静态代理<br>我们创建一个代理类 WorkProxy<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class WorkProxy implements Worker &#123;</span><br><span class=\"line\">    private Worker worker;</span><br><span class=\"line\"></span><br><span class=\"line\">    public WorkProxy(Worker worker) &#123;</span><br><span class=\"line\">        this.worker = worker;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void work() &#123;</span><br><span class=\"line\">          punch();</span><br><span class=\"line\">          worker.work();</span><br><span class=\"line\">          punch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>工人A 中的work 方法就不需要再前后调用打卡功能，只需要将自己的对象交给代理类让代理类去实现打卡功能代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        Worker worker = new WorkFirst();</span><br><span class=\"line\">        WorkProxy workProxy = new WorkProxy(worker);</span><br><span class=\"line\">        workProxy.work();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上下班打卡。。。。。。。。。。。。。。。</span><br><span class=\"line\">doing First work</span><br><span class=\"line\">上下班打卡。。。。。。。。。。。。。。。</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>动态代理</li>\n</ul>\n<p>动态代理，顾名思义就是代理类是在运行过程中动态创建的，实现动态的过程我们需要创建一个中介类，实现InvocationHandler 接口作为调用处理器”拦截“对代理类方法的调用。中介类实现如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class WorkDynamicProxy implements InvocationHandler &#123;</span><br><span class=\"line\">    private Worker worker;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  WorkDynamicProxy(Worker worker) &#123;</span><br><span class=\"line\">        this.worker = worker;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">        worker.punch();</span><br><span class=\"line\">        Object result = method.invoke(worker, args);</span><br><span class=\"line\">        worker.punch();</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们来测试一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        WorkDynamicProxy workDynamicProxy = new WorkDynamicProxy(new WorkSecond());</span><br><span class=\"line\">        //获取代理类实例worker</span><br><span class=\"line\">        Worker worker = (Worker)(Proxy.newProxyInstance(Worker.class.getClassLoader(), new Class[] &#123;Worker.class&#125;, workDynamicProxy));</span><br><span class=\"line\">        //通过代理类对象调用代理类方法，实际上会转到invoke方法调用</span><br><span class=\"line\">        worker.work();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>打印结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上下班打卡。。。。。。。。。。。。。。。</span><br><span class=\"line\">do second job</span><br><span class=\"line\">上下班打卡。。。。。。。。。。。。。。。</span><br></pre></td></tr></table></figure></p>\n<p>现在我们需要考虑一几个问题？动态代理的过程？为啥动态代理需要使用接口？现在我们来解决第一个问题：</p>\n<ul>\n<li>动态代理的过程？<br>从上述代码中我们可以看出，通过newProxyInstance方法获取一个代理类的，调用代理类的方法都会执行invoke(Object proxy, Method method, Object[] args)方法，解释三个参数<br>proxy 委托类<br>method 代理类的方法<br>args 调用代理类的方法参入的参数</li>\n<li>为啥动态代理需要使用接口？<br>我们再次查看源码newProxyInstance方法的实现：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader,</span><br><span class=\"line\">                                          Class&lt;?&gt;[] interfaces,</span><br><span class=\"line\">                                          InvocationHandler h)</span><br><span class=\"line\">        throws IllegalArgumentException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Objects.requireNonNull(h);</span><br><span class=\"line\"></span><br><span class=\"line\">        final Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">        final SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">        if (sm != null) &#123;</span><br><span class=\"line\">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Look up or generate the designated proxy class.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\"></span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Invoke its constructor with the designated invocation handler.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (sm != null) &#123;</span><br><span class=\"line\">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">            final InvocationHandler ih = h;</span><br><span class=\"line\">            if (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">                AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                    public Void run() &#123;</span><br><span class=\"line\">                        cons.setAccessible(true);</span><br><span class=\"line\">                        return null;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return cons.newInstance(new Object[]&#123;h&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>从源码上，首先进行一系列的判断逻辑，然后到了<br>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);<br>获取代理类的Class 对象，接下来执行<br> final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);<br> 获取Class的构造对象，通过cons.newInstance(new Object[]{h}); 返回一个代理类实例对象，具体参考 <a href=\"http://www.xulian.net.cn/2019/02/20/java-%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">Java反射</a> 。<br> 目前我们只知道代理类对象的创建过程，但是为啥只能传入接口还是得不到解决，那我们只能继续查看getProxyClass0源码：<br> 具体实现步骤：</p>\n<ol>\n<li>验证，通过类加载对象和接口列表获取代理类的Class对象，如果缓存中存在则返回，没有就通过代理类工厂创建代理类</li>\n<li>创建代理类<br>通过ProxyClassFactory工厂创建代理类，核心代码如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class=\"line\">byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);</span><br><span class=\"line\">defineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>定义一个类的名称，通过传入的接口列表和访问标志生成一个代理类的字节码，最后调用defineClass0方法将字节码加载到类加载器中，创建一个代理类。<br>现在我们来实现将代理类的字节码写入本地，查看具体代理类的信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class=\"line\">                &quot;$proxy1&quot;, new Class[] &#123;Worker.class&#125;, Modifier.PUBLIC);</span><br><span class=\"line\">        FileOutputStream fos = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            fos = new FileOutputStream(&quot;D:/$proxy1.class&quot;);</span><br><span class=\"line\">            fos.write(proxyClassFile);</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                fos.flush();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过反编译启查看字节码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class $proxy1 extends Proxy  implements Worker &#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">public final void work()  throws  &#123;</span><br><span class=\"line\">    try  &#123;</span><br><span class=\"line\">      this.h.invoke(this, m3, null);</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们终于得到答案，this.h.invoke(this, m3, null); 很好得验证了之前执行work（）方法其实是调用了中介类的invoke方法结论，还有一个问题，为啥动态代理需要使用接口，主要原因是代理类已经继承了Proxy类，Java不支持多继承所以导致动态代理需要使用接口，接口支持多继承。终于可以说服自己为啥动态代理需要接口了。。。。。</p>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>我们大概讲了一下什么是代理，然后通过例子，代码实现了Java中的代理，最后通过源码解释了Java动态代理的过程。。。</p>\n<p>参考文档：</p>\n<p>jdk 8<br><a href=\"https://www.cnblogs.com/frankliiu-java/articles/1896443.html\" target=\"_blank\" rel=\"noopener\">JDK动态代理为什么必须针对接口？其与CGLIB的对比</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-什么是代理？\"><a href=\"#1-什么是代理？\" class=\"headerlink\" title=\"1. 什么是代理？\"></a>1. 什么是代理？</h1><p>代理能代替我们去做很多事情，就举一个买票的例子，我们如果去火车站买票，需要搭车去火车站，然后排队买票，买到票回家这一系列的操作都需要自己去完成，万一碰到每票的情况还需要明天继续跑一趟。这时你是不是想有一个人帮你去做，做成之后你给他一点报酬，那么你是不是不用去火车站买票了，可以做一些自己的事了。代替你去买票的过程其实就是代理的过程。</p>\n<h1 id=\"2-代理的实现？\"><a href=\"#2-代理的实现？\" class=\"headerlink\" title=\"2. 代理的实现？\"></a>2. 代理的实现？</h1><p>在没有使用代理之前，我们需要自己去实现很多功能，现在我通过工人工作和打卡两个功能进行说明</p>\n<ul>\n<li><p>工人接口 有一个默认方法打卡和一个工作的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Worker &#123;</span><br><span class=\"line\">\tpublic void work();</span><br><span class=\"line\">    default void punch() &#123;</span><br><span class=\"line\">        System.out.println(&quot;上下班打卡。。。。。。。。。。。。。。。&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>工人A 实现类 ，实现接口的工作方法，并在上下班前打卡</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 第一个工人</span><br><span class=\"line\"> * @author xla</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class WorkFirst implements Worker &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void work() &#123;</span><br><span class=\"line\">        punch();</span><br><span class=\"line\">        System.out.println(&quot;doing First work&quot;);</span><br><span class=\"line\">        punch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>工人B 实现类，实现接口的工作方法，并在上下班前打卡</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 第二个工人</span><br><span class=\"line\"> * @author xla</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class WorkSecond implements Worker &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 他们在工作前后需要打卡</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void work() &#123;</span><br><span class=\"line\">        punch();</span><br><span class=\"line\">        System.out.println(&quot;do second job&quot;);</span><br><span class=\"line\">        punch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上述代码在没有使用代理前是这么实现的，但是你有没有发现一个问题，上述工人在工作前后都调用了punch方法，显得有些重复。那我们通过什么可以解决这个问题呢？代理？？</p>\n<p>目前我们使用的Java 代理有两种，静态代理和动态代理下面我们通过例子来实现：</p>\n<ul>\n<li>静态代理<br>我们创建一个代理类 WorkProxy<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class WorkProxy implements Worker &#123;</span><br><span class=\"line\">    private Worker worker;</span><br><span class=\"line\"></span><br><span class=\"line\">    public WorkProxy(Worker worker) &#123;</span><br><span class=\"line\">        this.worker = worker;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void work() &#123;</span><br><span class=\"line\">          punch();</span><br><span class=\"line\">          worker.work();</span><br><span class=\"line\">          punch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>工人A 中的work 方法就不需要再前后调用打卡功能，只需要将自己的对象交给代理类让代理类去实现打卡功能代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        Worker worker = new WorkFirst();</span><br><span class=\"line\">        WorkProxy workProxy = new WorkProxy(worker);</span><br><span class=\"line\">        workProxy.work();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上下班打卡。。。。。。。。。。。。。。。</span><br><span class=\"line\">doing First work</span><br><span class=\"line\">上下班打卡。。。。。。。。。。。。。。。</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>动态代理</li>\n</ul>\n<p>动态代理，顾名思义就是代理类是在运行过程中动态创建的，实现动态的过程我们需要创建一个中介类，实现InvocationHandler 接口作为调用处理器”拦截“对代理类方法的调用。中介类实现如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class WorkDynamicProxy implements InvocationHandler &#123;</span><br><span class=\"line\">    private Worker worker;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  WorkDynamicProxy(Worker worker) &#123;</span><br><span class=\"line\">        this.worker = worker;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">        worker.punch();</span><br><span class=\"line\">        Object result = method.invoke(worker, args);</span><br><span class=\"line\">        worker.punch();</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们来测试一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        WorkDynamicProxy workDynamicProxy = new WorkDynamicProxy(new WorkSecond());</span><br><span class=\"line\">        //获取代理类实例worker</span><br><span class=\"line\">        Worker worker = (Worker)(Proxy.newProxyInstance(Worker.class.getClassLoader(), new Class[] &#123;Worker.class&#125;, workDynamicProxy));</span><br><span class=\"line\">        //通过代理类对象调用代理类方法，实际上会转到invoke方法调用</span><br><span class=\"line\">        worker.work();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>打印结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上下班打卡。。。。。。。。。。。。。。。</span><br><span class=\"line\">do second job</span><br><span class=\"line\">上下班打卡。。。。。。。。。。。。。。。</span><br></pre></td></tr></table></figure></p>\n<p>现在我们需要考虑一几个问题？动态代理的过程？为啥动态代理需要使用接口？现在我们来解决第一个问题：</p>\n<ul>\n<li>动态代理的过程？<br>从上述代码中我们可以看出，通过newProxyInstance方法获取一个代理类的，调用代理类的方法都会执行invoke(Object proxy, Method method, Object[] args)方法，解释三个参数<br>proxy 委托类<br>method 代理类的方法<br>args 调用代理类的方法参入的参数</li>\n<li>为啥动态代理需要使用接口？<br>我们再次查看源码newProxyInstance方法的实现：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader,</span><br><span class=\"line\">                                          Class&lt;?&gt;[] interfaces,</span><br><span class=\"line\">                                          InvocationHandler h)</span><br><span class=\"line\">        throws IllegalArgumentException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Objects.requireNonNull(h);</span><br><span class=\"line\"></span><br><span class=\"line\">        final Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">        final SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">        if (sm != null) &#123;</span><br><span class=\"line\">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Look up or generate the designated proxy class.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\"></span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Invoke its constructor with the designated invocation handler.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (sm != null) &#123;</span><br><span class=\"line\">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">            final InvocationHandler ih = h;</span><br><span class=\"line\">            if (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">                AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                    public Void run() &#123;</span><br><span class=\"line\">                        cons.setAccessible(true);</span><br><span class=\"line\">                        return null;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return cons.newInstance(new Object[]&#123;h&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>从源码上，首先进行一系列的判断逻辑，然后到了<br>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);<br>获取代理类的Class 对象，接下来执行<br> final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);<br> 获取Class的构造对象，通过cons.newInstance(new Object[]{h}); 返回一个代理类实例对象，具体参考 <a href=\"http://www.xulian.net.cn/2019/02/20/java-%E5%8F%8D%E5%B0%84%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">Java反射</a> 。<br> 目前我们只知道代理类对象的创建过程，但是为啥只能传入接口还是得不到解决，那我们只能继续查看getProxyClass0源码：<br> 具体实现步骤：</p>\n<ol>\n<li>验证，通过类加载对象和接口列表获取代理类的Class对象，如果缓存中存在则返回，没有就通过代理类工厂创建代理类</li>\n<li>创建代理类<br>通过ProxyClassFactory工厂创建代理类，核心代码如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class=\"line\">byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);</span><br><span class=\"line\">defineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>定义一个类的名称，通过传入的接口列表和访问标志生成一个代理类的字节码，最后调用defineClass0方法将字节码加载到类加载器中，创建一个代理类。<br>现在我们来实现将代理类的字节码写入本地，查看具体代理类的信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class=\"line\">                &quot;$proxy1&quot;, new Class[] &#123;Worker.class&#125;, Modifier.PUBLIC);</span><br><span class=\"line\">        FileOutputStream fos = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            fos = new FileOutputStream(&quot;D:/$proxy1.class&quot;);</span><br><span class=\"line\">            fos.write(proxyClassFile);</span><br><span class=\"line\">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                fos.flush();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过反编译启查看字节码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class $proxy1 extends Proxy  implements Worker &#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">public final void work()  throws  &#123;</span><br><span class=\"line\">    try  &#123;</span><br><span class=\"line\">      this.h.invoke(this, m3, null);</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们终于得到答案，this.h.invoke(this, m3, null); 很好得验证了之前执行work（）方法其实是调用了中介类的invoke方法结论，还有一个问题，为啥动态代理需要使用接口，主要原因是代理类已经继承了Proxy类，Java不支持多继承所以导致动态代理需要使用接口，接口支持多继承。终于可以说服自己为啥动态代理需要接口了。。。。。</p>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>我们大概讲了一下什么是代理，然后通过例子，代码实现了Java中的代理，最后通过源码解释了Java动态代理的过程。。。</p>\n<p>参考文档：</p>\n<p>jdk 8<br><a href=\"https://www.cnblogs.com/frankliiu-java/articles/1896443.html\" target=\"_blank\" rel=\"noopener\">JDK动态代理为什么必须针对接口？其与CGLIB的对比</a></p>\n"},{"title":"使用iframe遇到的问题","date":"2019-03-15T01:58:07.000Z","_content":"# 1：在iframe中使用layer弹框引发的一些问题\n1. 弹框后，出现子窗口高度不够，导致显示内容不全\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190227175949596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n\n使用iframe 代码如下：\n\n\t<div class=\"layui-tab-content\" style=\"min-height: 150px; padding: 0 0 0 0;\">\n\t\t<div class=\"layui-tab-item layui-show\">\n\t\t\t<iframe src=\"/main\" name=\"main\" scrolling=\"auto\"></iframe>\n\t\t</div>\n\t</div>\n出现这个问题的原因主要是 iframe 设置的高度是100%，没有设置具体的高度，导致子窗口没有参考物导致其即使设置了高度也不能讲父元素撑开。出现这种情况目前有二种方式：\n* 给iframe 设置样式 overflow: auto;\n* 通过 js 获取窗体的高度，减去头部和底部的高度剩下的就是内容的高度，然后给iframe 设置高度，具体代码如下：\n\n\t\t$(window).on('resize', function () {\n\t\t        let resizeTimer = null;\n\t\t        if (resizeTimer) {\n\t\t            clearTimeout(resizeTimer);\n\t\t        }\n\t\t        resizeTimer = setTimeout(function () {\n\t\t            setContentSize();\n\t\t        }, 500);\n\t\t    }).resize();\n\n\t    function setContentSize() {\n\t        var $content = $('.admin-nav-card .layui-tab-content');\n\t        $content.height($(this).height() - 147);\n\t        $content.find('iframe').each(function () {\n\t            $(this).height($content.height());\n\t            $(this).width($content.width());\n\t            $(this).contents().find(\".layui-layer-iframe\").width($content.width())\n\t        });\n\t    }\n解释一下，主要是监听窗体调整，获取窗体的高度，减去头部和底部的高度剩下的就是\\$content的高度，然后给iframe设置高度，代码中运行了延迟加载，防止函数执行过快。\n\n2. 高度虽然解决了，但是又出现一个问题，当弹窗使用全屏显示的时候，调整窗体宽度，里面内容不会跟着改变，那么问题来了出现这种效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190227184346806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n里面的内容被覆盖了，导致这个原因主要是里面iframe和弹窗内容div的宽度没有跟着改变，那么我们怎么解决呢，想到上一节讲了高度设置，那么我们宽度也跟着设置呀。带着这个想法，我试一下修改iframe的宽度\n\n```\n\t\tfunction setContentSize() {\n\t        var $content = $('.admin-nav-card .layui-tab-content');\n\t        $content.height($(this).height() - 147);\n\t        $content.find('iframe').each(function () {\n\t            $(this).height($content.height());\n\t            $(this).width($content.width());\n\t        });\n\t    }\n   ```\n结果还是出现上述那个问题，那到底为啥呢？然后通过F12 模式 调试了一下，原来弹框里面有一个div也设置了宽度，那我跟iframe一起一并修改呢?\n\n```\n\tfunction setContentSize() {\n        var $content = $('.admin-nav-card .layui-tab-content');\n        if ($(this).width > 768) {\n\n        }\n        $content.height($(this).height() - 147);\n        $content.find('iframe').each(function () {\n            $(this).height($content.height());\n            $(this).width($content.width());\n            $(this).contents().find(\".layui-layer-iframe\").width($content.width())\n        });\n    }.\n```\n尝试了一下果真可以，现在看效果：\n![调整窗体前](https://img-blog.csdnimg.cn/20190227185309289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n\n![调整窗体后](https://img-blog.csdnimg.cn/20190227185353924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n这样终于算解决问题了，有一个前端小伙伴告诉我还有一种方式，就是改变窗体宽度的时候，调用一个layer.full(index)，index 是创建弹窗的编号。这种方式好处就是内部自动根据窗体宽度调整弹窗宽度，但是有个问题我怎么去获取那个index呢？这个问题等以后解决吧，先放放。。。\n\n# 2. 手机端解决iframe 中内容不能左右移动的问题\n现在是pc端解决了适配，但是手机端呢，用上述的代码显示的页面不能左右移动。这下就需要Google一把了，带着问题去搜索了一下网上大佬说：先给iframe 套一个div 然后给div设置样式\n\n```\n@media screen and (max-width: 768px) {\n\t/* 主体容器 */\n    .admin-nav-card .layui-tab-item {\n        -webkit-overflow-scrolling: touch;\n        overflow: auto;\n    }\n }\n ```\n结果试了一次果真可以实现，但是由于手机品牌很多，需要适配就难上加难，由于自己又不是一个前端人员就先放放了，等有时间在跟着上述的问题一起解决。\n\n参考文档：\n\n[子窗口高度不够](https://fly.layui.com/jie/33662/)\n[iphone下iframe问题记录](https://www.jianshu.com/p/bd9fbf5a14f0)\n\n","source":"_posts/使用iframe遇到的问题.md","raw":"---\ntitle: 使用iframe遇到的问题\ndate: 2019-03-15 09:58:07\ntags:\n- HTML\n---\n# 1：在iframe中使用layer弹框引发的一些问题\n1. 弹框后，出现子窗口高度不够，导致显示内容不全\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190227175949596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n\n使用iframe 代码如下：\n\n\t<div class=\"layui-tab-content\" style=\"min-height: 150px; padding: 0 0 0 0;\">\n\t\t<div class=\"layui-tab-item layui-show\">\n\t\t\t<iframe src=\"/main\" name=\"main\" scrolling=\"auto\"></iframe>\n\t\t</div>\n\t</div>\n出现这个问题的原因主要是 iframe 设置的高度是100%，没有设置具体的高度，导致子窗口没有参考物导致其即使设置了高度也不能讲父元素撑开。出现这种情况目前有二种方式：\n* 给iframe 设置样式 overflow: auto;\n* 通过 js 获取窗体的高度，减去头部和底部的高度剩下的就是内容的高度，然后给iframe 设置高度，具体代码如下：\n\n\t\t$(window).on('resize', function () {\n\t\t        let resizeTimer = null;\n\t\t        if (resizeTimer) {\n\t\t            clearTimeout(resizeTimer);\n\t\t        }\n\t\t        resizeTimer = setTimeout(function () {\n\t\t            setContentSize();\n\t\t        }, 500);\n\t\t    }).resize();\n\n\t    function setContentSize() {\n\t        var $content = $('.admin-nav-card .layui-tab-content');\n\t        $content.height($(this).height() - 147);\n\t        $content.find('iframe').each(function () {\n\t            $(this).height($content.height());\n\t            $(this).width($content.width());\n\t            $(this).contents().find(\".layui-layer-iframe\").width($content.width())\n\t        });\n\t    }\n解释一下，主要是监听窗体调整，获取窗体的高度，减去头部和底部的高度剩下的就是\\$content的高度，然后给iframe设置高度，代码中运行了延迟加载，防止函数执行过快。\n\n2. 高度虽然解决了，但是又出现一个问题，当弹窗使用全屏显示的时候，调整窗体宽度，里面内容不会跟着改变，那么问题来了出现这种效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190227184346806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n里面的内容被覆盖了，导致这个原因主要是里面iframe和弹窗内容div的宽度没有跟着改变，那么我们怎么解决呢，想到上一节讲了高度设置，那么我们宽度也跟着设置呀。带着这个想法，我试一下修改iframe的宽度\n\n```\n\t\tfunction setContentSize() {\n\t        var $content = $('.admin-nav-card .layui-tab-content');\n\t        $content.height($(this).height() - 147);\n\t        $content.find('iframe').each(function () {\n\t            $(this).height($content.height());\n\t            $(this).width($content.width());\n\t        });\n\t    }\n   ```\n结果还是出现上述那个问题，那到底为啥呢？然后通过F12 模式 调试了一下，原来弹框里面有一个div也设置了宽度，那我跟iframe一起一并修改呢?\n\n```\n\tfunction setContentSize() {\n        var $content = $('.admin-nav-card .layui-tab-content');\n        if ($(this).width > 768) {\n\n        }\n        $content.height($(this).height() - 147);\n        $content.find('iframe').each(function () {\n            $(this).height($content.height());\n            $(this).width($content.width());\n            $(this).contents().find(\".layui-layer-iframe\").width($content.width())\n        });\n    }.\n```\n尝试了一下果真可以，现在看效果：\n![调整窗体前](https://img-blog.csdnimg.cn/20190227185309289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n\n![调整窗体后](https://img-blog.csdnimg.cn/20190227185353924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n这样终于算解决问题了，有一个前端小伙伴告诉我还有一种方式，就是改变窗体宽度的时候，调用一个layer.full(index)，index 是创建弹窗的编号。这种方式好处就是内部自动根据窗体宽度调整弹窗宽度，但是有个问题我怎么去获取那个index呢？这个问题等以后解决吧，先放放。。。\n\n# 2. 手机端解决iframe 中内容不能左右移动的问题\n现在是pc端解决了适配，但是手机端呢，用上述的代码显示的页面不能左右移动。这下就需要Google一把了，带着问题去搜索了一下网上大佬说：先给iframe 套一个div 然后给div设置样式\n\n```\n@media screen and (max-width: 768px) {\n\t/* 主体容器 */\n    .admin-nav-card .layui-tab-item {\n        -webkit-overflow-scrolling: touch;\n        overflow: auto;\n    }\n }\n ```\n结果试了一次果真可以实现，但是由于手机品牌很多，需要适配就难上加难，由于自己又不是一个前端人员就先放放了，等有时间在跟着上述的问题一起解决。\n\n参考文档：\n\n[子窗口高度不够](https://fly.layui.com/jie/33662/)\n[iphone下iframe问题记录](https://www.jianshu.com/p/bd9fbf5a14f0)\n\n","slug":"使用iframe遇到的问题","published":1,"updated":"2019-03-15T01:58:30.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmep001038ud1gra46oo","content":"<h1 id=\"1：在iframe中使用layer弹框引发的一些问题\"><a href=\"#1：在iframe中使用layer弹框引发的一些问题\" class=\"headerlink\" title=\"1：在iframe中使用layer弹框引发的一些问题\"></a>1：在iframe中使用layer弹框引发的一些问题</h1><ol>\n<li>弹框后，出现子窗口高度不够，导致显示内容不全<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190227175949596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n</li>\n</ol>\n<p>使用iframe 代码如下：</p>\n<pre><code>&lt;div class=&quot;layui-tab-content&quot; style=&quot;min-height: 150px; padding: 0 0 0 0;&quot;&gt;\n    &lt;div class=&quot;layui-tab-item layui-show&quot;&gt;\n        &lt;iframe src=&quot;/main&quot; name=&quot;main&quot; scrolling=&quot;auto&quot;&gt;&lt;/iframe&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>出现这个问题的原因主要是 iframe 设置的高度是100%，没有设置具体的高度，导致子窗口没有参考物导致其即使设置了高度也不能讲父元素撑开。出现这种情况目前有二种方式：</p>\n<ul>\n<li>给iframe 设置样式 overflow: auto;</li>\n<li><p>通过 js 获取窗体的高度，减去头部和底部的高度剩下的就是内容的高度，然后给iframe 设置高度，具体代码如下：</p>\n<pre><code>$(window).on(&apos;resize&apos;, function () {\n        let resizeTimer = null;\n        if (resizeTimer) {\n            clearTimeout(resizeTimer);\n        }\n        resizeTimer = setTimeout(function () {\n            setContentSize();\n        }, 500);\n    }).resize();\n\nfunction setContentSize() {\n    var $content = $(&apos;.admin-nav-card .layui-tab-content&apos;);\n    $content.height($(this).height() - 147);\n    $content.find(&apos;iframe&apos;).each(function () {\n        $(this).height($content.height());\n        $(this).width($content.width());\n        $(this).contents().find(&quot;.layui-layer-iframe&quot;).width($content.width())\n    });\n}\n</code></pre><p>解释一下，主要是监听窗体调整，获取窗体的高度，减去头部和底部的高度剩下的就是\\$content的高度，然后给iframe设置高度，代码中运行了延迟加载，防止函数执行过快。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>高度虽然解决了，但是又出现一个问题，当弹窗使用全屏显示的时候，调整窗体宽度，里面内容不会跟着改变，那么问题来了出现这种效果：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190227184346806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n里面的内容被覆盖了，导致这个原因主要是里面iframe和弹窗内容div的宽度没有跟着改变，那么我们怎么解决呢，想到上一节讲了高度设置，那么我们宽度也跟着设置呀。带着这个想法，我试一下修改iframe的宽度</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setContentSize() &#123;</span><br><span class=\"line\">       var $content = $(&apos;.admin-nav-card .layui-tab-content&apos;);</span><br><span class=\"line\">       $content.height($(this).height() - 147);</span><br><span class=\"line\">       $content.find(&apos;iframe&apos;).each(function () &#123;</span><br><span class=\"line\">           $(this).height($content.height());</span><br><span class=\"line\">           $(this).width($content.width());</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>结果还是出现上述那个问题，那到底为啥呢？然后通过F12 模式 调试了一下，原来弹框里面有一个div也设置了宽度，那我跟iframe一起一并修改呢?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setContentSize() &#123;</span><br><span class=\"line\">       var $content = $(&apos;.admin-nav-card .layui-tab-content&apos;);</span><br><span class=\"line\">       if ($(this).width &gt; 768) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       $content.height($(this).height() - 147);</span><br><span class=\"line\">       $content.find(&apos;iframe&apos;).each(function () &#123;</span><br><span class=\"line\">           $(this).height($content.height());</span><br><span class=\"line\">           $(this).width($content.width());</span><br><span class=\"line\">           $(this).contents().find(&quot;.layui-layer-iframe&quot;).width($content.width())</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;.</span><br></pre></td></tr></table></figure>\n<p>尝试了一下果真可以，现在看效果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190227185309289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"调整窗体前\" title=\"\">\n                </div>\n                <div class=\"image-caption\">调整窗体前</div>\n            </figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190227185353924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"调整窗体后\" title=\"\">\n                </div>\n                <div class=\"image-caption\">调整窗体后</div>\n            </figure>\n<p>这样终于算解决问题了，有一个前端小伙伴告诉我还有一种方式，就是改变窗体宽度的时候，调用一个layer.full(index)，index 是创建弹窗的编号。这种方式好处就是内部自动根据窗体宽度调整弹窗宽度，但是有个问题我怎么去获取那个index呢？这个问题等以后解决吧，先放放。。。</p>\n<h1 id=\"2-手机端解决iframe-中内容不能左右移动的问题\"><a href=\"#2-手机端解决iframe-中内容不能左右移动的问题\" class=\"headerlink\" title=\"2. 手机端解决iframe 中内容不能左右移动的问题\"></a>2. 手机端解决iframe 中内容不能左右移动的问题</h1><p>现在是pc端解决了适配，但是手机端呢，用上述的代码显示的页面不能左右移动。这下就需要Google一把了，带着问题去搜索了一下网上大佬说：先给iframe 套一个div 然后给div设置样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 768px) &#123;</span><br><span class=\"line\">\t/* 主体容器 */</span><br><span class=\"line\">    .admin-nav-card .layui-tab-item &#123;</span><br><span class=\"line\">        -webkit-overflow-scrolling: touch;</span><br><span class=\"line\">        overflow: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>结果试了一次果真可以实现，但是由于手机品牌很多，需要适配就难上加难，由于自己又不是一个前端人员就先放放了，等有时间在跟着上述的问题一起解决。</p>\n<p>参考文档：</p>\n<p><a href=\"https://fly.layui.com/jie/33662/\" target=\"_blank\" rel=\"noopener\">子窗口高度不够</a><br><a href=\"https://www.jianshu.com/p/bd9fbf5a14f0\" target=\"_blank\" rel=\"noopener\">iphone下iframe问题记录</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1：在iframe中使用layer弹框引发的一些问题\"><a href=\"#1：在iframe中使用layer弹框引发的一些问题\" class=\"headerlink\" title=\"1：在iframe中使用layer弹框引发的一些问题\"></a>1：在iframe中使用layer弹框引发的一些问题</h1><ol>\n<li>弹框后，出现子窗口高度不够，导致显示内容不全<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190227175949596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n</li>\n</ol>\n<p>使用iframe 代码如下：</p>\n<pre><code>&lt;div class=&quot;layui-tab-content&quot; style=&quot;min-height: 150px; padding: 0 0 0 0;&quot;&gt;\n    &lt;div class=&quot;layui-tab-item layui-show&quot;&gt;\n        &lt;iframe src=&quot;/main&quot; name=&quot;main&quot; scrolling=&quot;auto&quot;&gt;&lt;/iframe&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>出现这个问题的原因主要是 iframe 设置的高度是100%，没有设置具体的高度，导致子窗口没有参考物导致其即使设置了高度也不能讲父元素撑开。出现这种情况目前有二种方式：</p>\n<ul>\n<li>给iframe 设置样式 overflow: auto;</li>\n<li><p>通过 js 获取窗体的高度，减去头部和底部的高度剩下的就是内容的高度，然后给iframe 设置高度，具体代码如下：</p>\n<pre><code>$(window).on(&apos;resize&apos;, function () {\n        let resizeTimer = null;\n        if (resizeTimer) {\n            clearTimeout(resizeTimer);\n        }\n        resizeTimer = setTimeout(function () {\n            setContentSize();\n        }, 500);\n    }).resize();\n\nfunction setContentSize() {\n    var $content = $(&apos;.admin-nav-card .layui-tab-content&apos;);\n    $content.height($(this).height() - 147);\n    $content.find(&apos;iframe&apos;).each(function () {\n        $(this).height($content.height());\n        $(this).width($content.width());\n        $(this).contents().find(&quot;.layui-layer-iframe&quot;).width($content.width())\n    });\n}\n</code></pre><p>解释一下，主要是监听窗体调整，获取窗体的高度，减去头部和底部的高度剩下的就是\\$content的高度，然后给iframe设置高度，代码中运行了延迟加载，防止函数执行过快。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>高度虽然解决了，但是又出现一个问题，当弹窗使用全屏显示的时候，调整窗体宽度，里面内容不会跟着改变，那么问题来了出现这种效果：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190227184346806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n里面的内容被覆盖了，导致这个原因主要是里面iframe和弹窗内容div的宽度没有跟着改变，那么我们怎么解决呢，想到上一节讲了高度设置，那么我们宽度也跟着设置呀。带着这个想法，我试一下修改iframe的宽度</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setContentSize() &#123;</span><br><span class=\"line\">       var $content = $(&apos;.admin-nav-card .layui-tab-content&apos;);</span><br><span class=\"line\">       $content.height($(this).height() - 147);</span><br><span class=\"line\">       $content.find(&apos;iframe&apos;).each(function () &#123;</span><br><span class=\"line\">           $(this).height($content.height());</span><br><span class=\"line\">           $(this).width($content.width());</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>结果还是出现上述那个问题，那到底为啥呢？然后通过F12 模式 调试了一下，原来弹框里面有一个div也设置了宽度，那我跟iframe一起一并修改呢?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setContentSize() &#123;</span><br><span class=\"line\">       var $content = $(&apos;.admin-nav-card .layui-tab-content&apos;);</span><br><span class=\"line\">       if ($(this).width &gt; 768) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       $content.height($(this).height() - 147);</span><br><span class=\"line\">       $content.find(&apos;iframe&apos;).each(function () &#123;</span><br><span class=\"line\">           $(this).height($content.height());</span><br><span class=\"line\">           $(this).width($content.width());</span><br><span class=\"line\">           $(this).contents().find(&quot;.layui-layer-iframe&quot;).width($content.width())</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;.</span><br></pre></td></tr></table></figure>\n<p>尝试了一下果真可以，现在看效果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190227185309289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"调整窗体前\" title=\"\">\n                </div>\n                <div class=\"image-caption\">调整窗体前</div>\n            </figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190227185353924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"调整窗体后\" title=\"\">\n                </div>\n                <div class=\"image-caption\">调整窗体后</div>\n            </figure>\n<p>这样终于算解决问题了，有一个前端小伙伴告诉我还有一种方式，就是改变窗体宽度的时候，调用一个layer.full(index)，index 是创建弹窗的编号。这种方式好处就是内部自动根据窗体宽度调整弹窗宽度，但是有个问题我怎么去获取那个index呢？这个问题等以后解决吧，先放放。。。</p>\n<h1 id=\"2-手机端解决iframe-中内容不能左右移动的问题\"><a href=\"#2-手机端解决iframe-中内容不能左右移动的问题\" class=\"headerlink\" title=\"2. 手机端解决iframe 中内容不能左右移动的问题\"></a>2. 手机端解决iframe 中内容不能左右移动的问题</h1><p>现在是pc端解决了适配，但是手机端呢，用上述的代码显示的页面不能左右移动。这下就需要Google一把了，带着问题去搜索了一下网上大佬说：先给iframe 套一个div 然后给div设置样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 768px) &#123;</span><br><span class=\"line\">\t/* 主体容器 */</span><br><span class=\"line\">    .admin-nav-card .layui-tab-item &#123;</span><br><span class=\"line\">        -webkit-overflow-scrolling: touch;</span><br><span class=\"line\">        overflow: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>结果试了一次果真可以实现，但是由于手机品牌很多，需要适配就难上加难，由于自己又不是一个前端人员就先放放了，等有时间在跟着上述的问题一起解决。</p>\n<p>参考文档：</p>\n<p><a href=\"https://fly.layui.com/jie/33662/\" target=\"_blank\" rel=\"noopener\">子窗口高度不够</a><br><a href=\"https://www.jianshu.com/p/bd9fbf5a14f0\" target=\"_blank\" rel=\"noopener\">iphone下iframe问题记录</a></p>\n"},{"title":"关于Volatile的那点事","date":"2019-03-15T01:53:46.000Z","_content":"# 1.\t为啥要使用Volatile？\n通常我们在Java中给变量加上Volatile修饰，主要用途是使该变量具有可见性。因为在多线程的操作中，由于每个线程内部都会开辟一个内存空间，如果想让每个空间都可见该变量则需要给这个变量加在Volatile修饰，使变量变成共享变量。它也能避免 jvm 指令重排。\n# 2. Volatile 实现原理？\n在了解volatile原理之前，我们先了解一下cpu和主存，关于cpu的定义如下图：\n![cpu术语定义](https://img-blog.csdnimg.cn/20190301100135878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n知道cpu定义后，我们来看一下内存和cpu是怎么交互的，由于内存处理速度和cpu的处理速度差距太大，为了平衡两者之间的差距引入了cpu\n缓存如下图：\n![cpu和内存的交互](https://img-blog.csdnimg.cn/20190301101210752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n知道内存和cpu的交互后，我们来解决一个问题 -- volatile 关键字是如何实现变量可见性的呢，我们通过一段代码来展示如何实现可见性的：\nJava 代码如下：\nobject = new Singleton(); // object 是 volatile 修饰的变量\n转变成汇编代码：\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190301100533374.png)\n 我们发现通过volatile 修饰的变量进行写操作的时候会多出一段Lock 前缀指令，这段指令的用途主要有两点：\n 1. 将当前的处理器缓存行写会系统内存\n 2. 这个写回操作使其他cpu里面缓存该值的内存地址数据实效。\n我们来了解一下实现过程，Lock前缀指令在执行期间会给处理器发送一个LOCK#信号，处理器收到信号后会锁住cpu缓存并将变量写入主内存中。由于处理器使用嗅探技术确保它内存缓存，系统内存和其他处理器的缓存的数据在总线上保持一致。如果嗅探到有一个处理器来检测其他处理器打算写入内存地址，而这个地址是处于共享状态的，那么正在嗅探的处理器中缓存的内存地址将变成无效，下次访问的时候直接读取主存中的内存地址。\n# 3. volatile 能实现可见性，但不能保证原子性\n虽然volatile关键字能保证从主内存中直接获取被volatile修饰的变量，也能直接把volatile修饰的变量写入主内存中，但是这样也不能保证原子性。在多cpu的情况下，还是会出现线程不安全情况，比如：在多线程下，多个线程正在写入一个volatile变量，并正确的将值写入主内存中，如果新写入的值不是根据之前的值计算得到的，那么就不能保证数据原子性了。\n除了上述写了还有一种情况：\n在多线程中，递增一个volatile变量counter，通过volatile不足够解决问题，下面我们通过一个例子来解释：\n你想象一下如果线程1读取值为0的变量counter将他写入cpu缓存中，递增这个变量counter将它变成1，没有将修改的值写入主内存中。线程2也能从主内存中读取到相同的变量counter，但是这个变量counter还是0，然后将变量counter写入cpu的缓存中，线程2也递增了这个变量counter为1，没有将值写入主内存中，这种情况如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190301144702874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n线程1和线程2现在不是同步的。上述结果原本应该是2，但是因为两个线程都没有把变量counter写入主内存，导致主内存的变量counter还是0，即使最终线程1和2将变量counter写入主内存也是错误的。\n# 4. 怎么保证volatile原子性呢？\n如果两个以上的线程对共享变量读写操作，使用volatile并不能解决问题。你需要使用 synchronized 来确保对变量读写操作使原子性的。不止可以通过synchronized锁解决这个问题，你也可以使用 java.util.concurrent package 下的一些原子数据，比如 AtomicLong，AtomicReference 还有其他一些。volatile关键字能保证在32和64位的变量运行。\n\n# 5. volatile 性能考虑\n读取和写入volatile变量会导致变量被读取或写入主存储器。读取和写入主内存比访问CPU缓存更昂贵。访问volatile变量也会阻止指令重新排序，这是一种正常的性能增强技术。因此，当您确实需要强制实施变量可见性时，应该只使用volatile变量。\n\n# 6. 总结\n主要讲了一些 volatile 的底层实现和如何保证volatile原子性，最后讲了一下 需要考虑一些 volatile 性能。\n注意：__使用 volatile 修饰的变量避免该变量计算需要依赖之前的值。__\n\n参考文档：\n[Java Volatile Keyword](http://tutorials.jenkov.com/java-concurrency/volatile.html)\n[聊聊并发（一）——深入分析 Volatile 的实现原理](https://www.infoq.cn/article/ftf-java-volatile)\n","source":"_posts/关于Volatile的那点事.md","raw":"---\ntitle: 关于Volatile的那点事\ndate: 2019-03-15 09:53:46\ntags:\n- 多线程\n- 并发\n---\n# 1.\t为啥要使用Volatile？\n通常我们在Java中给变量加上Volatile修饰，主要用途是使该变量具有可见性。因为在多线程的操作中，由于每个线程内部都会开辟一个内存空间，如果想让每个空间都可见该变量则需要给这个变量加在Volatile修饰，使变量变成共享变量。它也能避免 jvm 指令重排。\n# 2. Volatile 实现原理？\n在了解volatile原理之前，我们先了解一下cpu和主存，关于cpu的定义如下图：\n![cpu术语定义](https://img-blog.csdnimg.cn/20190301100135878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n知道cpu定义后，我们来看一下内存和cpu是怎么交互的，由于内存处理速度和cpu的处理速度差距太大，为了平衡两者之间的差距引入了cpu\n缓存如下图：\n![cpu和内存的交互](https://img-blog.csdnimg.cn/20190301101210752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n知道内存和cpu的交互后，我们来解决一个问题 -- volatile 关键字是如何实现变量可见性的呢，我们通过一段代码来展示如何实现可见性的：\nJava 代码如下：\nobject = new Singleton(); // object 是 volatile 修饰的变量\n转变成汇编代码：\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190301100533374.png)\n 我们发现通过volatile 修饰的变量进行写操作的时候会多出一段Lock 前缀指令，这段指令的用途主要有两点：\n 1. 将当前的处理器缓存行写会系统内存\n 2. 这个写回操作使其他cpu里面缓存该值的内存地址数据实效。\n我们来了解一下实现过程，Lock前缀指令在执行期间会给处理器发送一个LOCK#信号，处理器收到信号后会锁住cpu缓存并将变量写入主内存中。由于处理器使用嗅探技术确保它内存缓存，系统内存和其他处理器的缓存的数据在总线上保持一致。如果嗅探到有一个处理器来检测其他处理器打算写入内存地址，而这个地址是处于共享状态的，那么正在嗅探的处理器中缓存的内存地址将变成无效，下次访问的时候直接读取主存中的内存地址。\n# 3. volatile 能实现可见性，但不能保证原子性\n虽然volatile关键字能保证从主内存中直接获取被volatile修饰的变量，也能直接把volatile修饰的变量写入主内存中，但是这样也不能保证原子性。在多cpu的情况下，还是会出现线程不安全情况，比如：在多线程下，多个线程正在写入一个volatile变量，并正确的将值写入主内存中，如果新写入的值不是根据之前的值计算得到的，那么就不能保证数据原子性了。\n除了上述写了还有一种情况：\n在多线程中，递增一个volatile变量counter，通过volatile不足够解决问题，下面我们通过一个例子来解释：\n你想象一下如果线程1读取值为0的变量counter将他写入cpu缓存中，递增这个变量counter将它变成1，没有将修改的值写入主内存中。线程2也能从主内存中读取到相同的变量counter，但是这个变量counter还是0，然后将变量counter写入cpu的缓存中，线程2也递增了这个变量counter为1，没有将值写入主内存中，这种情况如下图所示：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190301144702874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n线程1和线程2现在不是同步的。上述结果原本应该是2，但是因为两个线程都没有把变量counter写入主内存，导致主内存的变量counter还是0，即使最终线程1和2将变量counter写入主内存也是错误的。\n# 4. 怎么保证volatile原子性呢？\n如果两个以上的线程对共享变量读写操作，使用volatile并不能解决问题。你需要使用 synchronized 来确保对变量读写操作使原子性的。不止可以通过synchronized锁解决这个问题，你也可以使用 java.util.concurrent package 下的一些原子数据，比如 AtomicLong，AtomicReference 还有其他一些。volatile关键字能保证在32和64位的变量运行。\n\n# 5. volatile 性能考虑\n读取和写入volatile变量会导致变量被读取或写入主存储器。读取和写入主内存比访问CPU缓存更昂贵。访问volatile变量也会阻止指令重新排序，这是一种正常的性能增强技术。因此，当您确实需要强制实施变量可见性时，应该只使用volatile变量。\n\n# 6. 总结\n主要讲了一些 volatile 的底层实现和如何保证volatile原子性，最后讲了一下 需要考虑一些 volatile 性能。\n注意：__使用 volatile 修饰的变量避免该变量计算需要依赖之前的值。__\n\n参考文档：\n[Java Volatile Keyword](http://tutorials.jenkov.com/java-concurrency/volatile.html)\n[聊聊并发（一）——深入分析 Volatile 的实现原理](https://www.infoq.cn/article/ftf-java-volatile)\n","slug":"关于Volatile的那点事","published":1,"updated":"2019-03-15T01:55:04.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmes001338udiffztbe5","content":"<h1 id=\"1-为啥要使用Volatile？\"><a href=\"#1-为啥要使用Volatile？\" class=\"headerlink\" title=\"1.    为啥要使用Volatile？\"></a>1.    为啥要使用Volatile？</h1><p>通常我们在Java中给变量加上Volatile修饰，主要用途是使该变量具有可见性。因为在多线程的操作中，由于每个线程内部都会开辟一个内存空间，如果想让每个空间都可见该变量则需要给这个变量加在Volatile修饰，使变量变成共享变量。它也能避免 jvm 指令重排。</p>\n<h1 id=\"2-Volatile-实现原理？\"><a href=\"#2-Volatile-实现原理？\" class=\"headerlink\" title=\"2. Volatile 实现原理？\"></a>2. Volatile 实现原理？</h1><p>在了解volatile原理之前，我们先了解一下cpu和主存，关于cpu的定义如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190301100135878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"cpu术语定义\" title=\"\">\n                </div>\n                <div class=\"image-caption\">cpu术语定义</div>\n            </figure><br>知道cpu定义后，我们来看一下内存和cpu是怎么交互的，由于内存处理速度和cpu的处理速度差距太大，为了平衡两者之间的差距引入了cpu<br>缓存如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190301101210752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"cpu和内存的交互\" title=\"\">\n                </div>\n                <div class=\"image-caption\">cpu和内存的交互</div>\n            </figure><br>知道内存和cpu的交互后，我们来解决一个问题 – volatile 关键字是如何实现变量可见性的呢，我们通过一段代码来展示如何实现可见性的：<br>Java 代码如下：<br>object = new Singleton(); // object 是 volatile 修饰的变量<br>转变成汇编代码：<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190301100533374.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br> 我们发现通过volatile 修饰的变量进行写操作的时候会多出一段Lock 前缀指令，这段指令的用途主要有两点：</p>\n<ol>\n<li>将当前的处理器缓存行写会系统内存</li>\n<li>这个写回操作使其他cpu里面缓存该值的内存地址数据实效。<br>我们来了解一下实现过程，Lock前缀指令在执行期间会给处理器发送一个LOCK#信号，处理器收到信号后会锁住cpu缓存并将变量写入主内存中。由于处理器使用嗅探技术确保它内存缓存，系统内存和其他处理器的缓存的数据在总线上保持一致。如果嗅探到有一个处理器来检测其他处理器打算写入内存地址，而这个地址是处于共享状态的，那么正在嗅探的处理器中缓存的内存地址将变成无效，下次访问的时候直接读取主存中的内存地址。<h1 id=\"3-volatile-能实现可见性，但不能保证原子性\"><a href=\"#3-volatile-能实现可见性，但不能保证原子性\" class=\"headerlink\" title=\"3. volatile 能实现可见性，但不能保证原子性\"></a>3. volatile 能实现可见性，但不能保证原子性</h1>虽然volatile关键字能保证从主内存中直接获取被volatile修饰的变量，也能直接把volatile修饰的变量写入主内存中，但是这样也不能保证原子性。在多cpu的情况下，还是会出现线程不安全情况，比如：在多线程下，多个线程正在写入一个volatile变量，并正确的将值写入主内存中，如果新写入的值不是根据之前的值计算得到的，那么就不能保证数据原子性了。<br>除了上述写了还有一种情况：<br>在多线程中，递增一个volatile变量counter，通过volatile不足够解决问题，下面我们通过一个例子来解释：<br>你想象一下如果线程1读取值为0的变量counter将他写入cpu缓存中，递增这个变量counter将它变成1，没有将修改的值写入主内存中。线程2也能从主内存中读取到相同的变量counter，但是这个变量counter还是0，然后将变量counter写入cpu的缓存中，线程2也递增了这个变量counter为1，没有将值写入主内存中，这种情况如下图所示：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190301144702874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n线程1和线程2现在不是同步的。上述结果原本应该是2，但是因为两个线程都没有把变量counter写入主内存，导致主内存的变量counter还是0，即使最终线程1和2将变量counter写入主内存也是错误的。<h1 id=\"4-怎么保证volatile原子性呢？\"><a href=\"#4-怎么保证volatile原子性呢？\" class=\"headerlink\" title=\"4. 怎么保证volatile原子性呢？\"></a>4. 怎么保证volatile原子性呢？</h1>如果两个以上的线程对共享变量读写操作，使用volatile并不能解决问题。你需要使用 synchronized 来确保对变量读写操作使原子性的。不止可以通过synchronized锁解决这个问题，你也可以使用 java.util.concurrent package 下的一些原子数据，比如 AtomicLong，AtomicReference 还有其他一些。volatile关键字能保证在32和64位的变量运行。</li>\n</ol>\n<h1 id=\"5-volatile-性能考虑\"><a href=\"#5-volatile-性能考虑\" class=\"headerlink\" title=\"5. volatile 性能考虑\"></a>5. volatile 性能考虑</h1><p>读取和写入volatile变量会导致变量被读取或写入主存储器。读取和写入主内存比访问CPU缓存更昂贵。访问volatile变量也会阻止指令重新排序，这是一种正常的性能增强技术。因此，当您确实需要强制实施变量可见性时，应该只使用volatile变量。</p>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><p>主要讲了一些 volatile 的底层实现和如何保证volatile原子性，最后讲了一下 需要考虑一些 volatile 性能。<br>注意：<strong>使用 volatile 修饰的变量避免该变量计算需要依赖之前的值。</strong></p>\n<p>参考文档：<br><a href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\" target=\"_blank\" rel=\"noopener\">Java Volatile Keyword</a><br><a href=\"https://www.infoq.cn/article/ftf-java-volatile\" target=\"_blank\" rel=\"noopener\">聊聊并发（一）——深入分析 Volatile 的实现原理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-为啥要使用Volatile？\"><a href=\"#1-为啥要使用Volatile？\" class=\"headerlink\" title=\"1.    为啥要使用Volatile？\"></a>1.    为啥要使用Volatile？</h1><p>通常我们在Java中给变量加上Volatile修饰，主要用途是使该变量具有可见性。因为在多线程的操作中，由于每个线程内部都会开辟一个内存空间，如果想让每个空间都可见该变量则需要给这个变量加在Volatile修饰，使变量变成共享变量。它也能避免 jvm 指令重排。</p>\n<h1 id=\"2-Volatile-实现原理？\"><a href=\"#2-Volatile-实现原理？\" class=\"headerlink\" title=\"2. Volatile 实现原理？\"></a>2. Volatile 实现原理？</h1><p>在了解volatile原理之前，我们先了解一下cpu和主存，关于cpu的定义如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190301100135878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"cpu术语定义\" title=\"\">\n                </div>\n                <div class=\"image-caption\">cpu术语定义</div>\n            </figure><br>知道cpu定义后，我们来看一下内存和cpu是怎么交互的，由于内存处理速度和cpu的处理速度差距太大，为了平衡两者之间的差距引入了cpu<br>缓存如下图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190301101210752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"cpu和内存的交互\" title=\"\">\n                </div>\n                <div class=\"image-caption\">cpu和内存的交互</div>\n            </figure><br>知道内存和cpu的交互后，我们来解决一个问题 – volatile 关键字是如何实现变量可见性的呢，我们通过一段代码来展示如何实现可见性的：<br>Java 代码如下：<br>object = new Singleton(); // object 是 volatile 修饰的变量<br>转变成汇编代码：<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190301100533374.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br> 我们发现通过volatile 修饰的变量进行写操作的时候会多出一段Lock 前缀指令，这段指令的用途主要有两点：</p>\n<ol>\n<li>将当前的处理器缓存行写会系统内存</li>\n<li>这个写回操作使其他cpu里面缓存该值的内存地址数据实效。<br>我们来了解一下实现过程，Lock前缀指令在执行期间会给处理器发送一个LOCK#信号，处理器收到信号后会锁住cpu缓存并将变量写入主内存中。由于处理器使用嗅探技术确保它内存缓存，系统内存和其他处理器的缓存的数据在总线上保持一致。如果嗅探到有一个处理器来检测其他处理器打算写入内存地址，而这个地址是处于共享状态的，那么正在嗅探的处理器中缓存的内存地址将变成无效，下次访问的时候直接读取主存中的内存地址。<h1 id=\"3-volatile-能实现可见性，但不能保证原子性\"><a href=\"#3-volatile-能实现可见性，但不能保证原子性\" class=\"headerlink\" title=\"3. volatile 能实现可见性，但不能保证原子性\"></a>3. volatile 能实现可见性，但不能保证原子性</h1>虽然volatile关键字能保证从主内存中直接获取被volatile修饰的变量，也能直接把volatile修饰的变量写入主内存中，但是这样也不能保证原子性。在多cpu的情况下，还是会出现线程不安全情况，比如：在多线程下，多个线程正在写入一个volatile变量，并正确的将值写入主内存中，如果新写入的值不是根据之前的值计算得到的，那么就不能保证数据原子性了。<br>除了上述写了还有一种情况：<br>在多线程中，递增一个volatile变量counter，通过volatile不足够解决问题，下面我们通过一个例子来解释：<br>你想象一下如果线程1读取值为0的变量counter将他写入cpu缓存中，递增这个变量counter将它变成1，没有将修改的值写入主内存中。线程2也能从主内存中读取到相同的变量counter，但是这个变量counter还是0，然后将变量counter写入cpu的缓存中，线程2也递增了这个变量counter为1，没有将值写入主内存中，这种情况如下图所示：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190301144702874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n线程1和线程2现在不是同步的。上述结果原本应该是2，但是因为两个线程都没有把变量counter写入主内存，导致主内存的变量counter还是0，即使最终线程1和2将变量counter写入主内存也是错误的。<h1 id=\"4-怎么保证volatile原子性呢？\"><a href=\"#4-怎么保证volatile原子性呢？\" class=\"headerlink\" title=\"4. 怎么保证volatile原子性呢？\"></a>4. 怎么保证volatile原子性呢？</h1>如果两个以上的线程对共享变量读写操作，使用volatile并不能解决问题。你需要使用 synchronized 来确保对变量读写操作使原子性的。不止可以通过synchronized锁解决这个问题，你也可以使用 java.util.concurrent package 下的一些原子数据，比如 AtomicLong，AtomicReference 还有其他一些。volatile关键字能保证在32和64位的变量运行。</li>\n</ol>\n<h1 id=\"5-volatile-性能考虑\"><a href=\"#5-volatile-性能考虑\" class=\"headerlink\" title=\"5. volatile 性能考虑\"></a>5. volatile 性能考虑</h1><p>读取和写入volatile变量会导致变量被读取或写入主存储器。读取和写入主内存比访问CPU缓存更昂贵。访问volatile变量也会阻止指令重新排序，这是一种正常的性能增强技术。因此，当您确实需要强制实施变量可见性时，应该只使用volatile变量。</p>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><p>主要讲了一些 volatile 的底层实现和如何保证volatile原子性，最后讲了一下 需要考虑一些 volatile 性能。<br>注意：<strong>使用 volatile 修饰的变量避免该变量计算需要依赖之前的值。</strong></p>\n<p>参考文档：<br><a href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\" target=\"_blank\" rel=\"noopener\">Java Volatile Keyword</a><br><a href=\"https://www.infoq.cn/article/ftf-java-volatile\" target=\"_blank\" rel=\"noopener\">聊聊并发（一）——深入分析 Volatile 的实现原理</a></p>\n"},{"title":"关于executeUpdate方法返回的值问题","date":"2019-03-15T01:50:30.000Z","_content":"今天在项目中出现了一个问题，delete 语句使用executeUpdate方法后，如果是更新一条数则返回1，但是更新一条以上数据就出现返回0的问题，我一直以为executeUpdate返回更新的条数是错误的？带着疑问我们查看源码：\n```\n@Override\n\tpublic int update(final String sql) throws DataAccessException {\n\t\tAssert.notNull(sql, \"SQL must not be null\");\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Executing SQL update [\" + sql + \"]\");\n\t\t}\n\n\t\tclass UpdateStatementCallback implements StatementCallback<Integer>, SqlProvider {\n\t\t\t@Override\n\t\t\tpublic Integer doInStatement(Statement stmt) throws SQLException {\n\t\t\t\tint rows = stmt.executeUpdate(sql);\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"SQL update affected \" + rows + \" rows\");\n\t\t\t\t}\n\t\t\t\treturn rows;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic String getSql() {\n\t\t\t\treturn sql;\n\t\t\t}\n\t\t}\n\n\t\treturn execute(new UpdateStatementCallback());\n\t}\n```\n从源码上看，update方法返回的就是 stmt.executeUpdate(sql) 方法返回的条数，那么上述更新多条出现0的情况是什么问题？但是执行update语句的话返回的值就是正确的，难道是执行delete语句后数据被删除了，则返回空了？那之前我执行删除一条数据为啥返回1呢？没道理呀。。。。我们继续深入分析，原来是自己上层调用的方法已经将数据删除了，所以再次执行执行delete语句返回0，对自己的用法充满无奈。。。。。。。。。。。。。。\n# 总结\nexecuteUpdate 方法返回的是被更新条数，如果是删除语句则是被删除的条数\n\n\n\n\n","source":"_posts/关于executeUpdate方法返回的值问题.md","raw":"---\ntitle: 关于executeUpdate方法返回的值问题\ndate: 2019-03-15 09:50:30\ntags:\n- spring\n---\n今天在项目中出现了一个问题，delete 语句使用executeUpdate方法后，如果是更新一条数则返回1，但是更新一条以上数据就出现返回0的问题，我一直以为executeUpdate返回更新的条数是错误的？带着疑问我们查看源码：\n```\n@Override\n\tpublic int update(final String sql) throws DataAccessException {\n\t\tAssert.notNull(sql, \"SQL must not be null\");\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Executing SQL update [\" + sql + \"]\");\n\t\t}\n\n\t\tclass UpdateStatementCallback implements StatementCallback<Integer>, SqlProvider {\n\t\t\t@Override\n\t\t\tpublic Integer doInStatement(Statement stmt) throws SQLException {\n\t\t\t\tint rows = stmt.executeUpdate(sql);\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"SQL update affected \" + rows + \" rows\");\n\t\t\t\t}\n\t\t\t\treturn rows;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic String getSql() {\n\t\t\t\treturn sql;\n\t\t\t}\n\t\t}\n\n\t\treturn execute(new UpdateStatementCallback());\n\t}\n```\n从源码上看，update方法返回的就是 stmt.executeUpdate(sql) 方法返回的条数，那么上述更新多条出现0的情况是什么问题？但是执行update语句的话返回的值就是正确的，难道是执行delete语句后数据被删除了，则返回空了？那之前我执行删除一条数据为啥返回1呢？没道理呀。。。。我们继续深入分析，原来是自己上层调用的方法已经将数据删除了，所以再次执行执行delete语句返回0，对自己的用法充满无奈。。。。。。。。。。。。。。\n# 总结\nexecuteUpdate 方法返回的是被更新条数，如果是删除语句则是被删除的条数\n\n\n\n\n","slug":"关于executeUpdate方法返回的值问题","published":1,"updated":"2019-03-15T01:51:04.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmev001538udbk9vr2px","content":"<p>今天在项目中出现了一个问题，delete 语句使用executeUpdate方法后，如果是更新一条数则返回1，但是更新一条以上数据就出现返回0的问题，我一直以为executeUpdate返回更新的条数是错误的？带着疑问我们查看源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">\tpublic int update(final String sql) throws DataAccessException &#123;</span><br><span class=\"line\">\t\tAssert.notNull(sql, &quot;SQL must not be null&quot;);</span><br><span class=\"line\">\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(&quot;Executing SQL update [&quot; + sql + &quot;]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclass UpdateStatementCallback implements StatementCallback&lt;Integer&gt;, SqlProvider &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Integer doInStatement(Statement stmt) throws SQLException &#123;</span><br><span class=\"line\">\t\t\t\tint rows = stmt.executeUpdate(sql);</span><br><span class=\"line\">\t\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(&quot;SQL update affected &quot; + rows + &quot; rows&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\treturn rows;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic String getSql() &#123;</span><br><span class=\"line\">\t\t\t\treturn sql;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn execute(new UpdateStatementCallback());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从源码上看，update方法返回的就是 stmt.executeUpdate(sql) 方法返回的条数，那么上述更新多条出现0的情况是什么问题？但是执行update语句的话返回的值就是正确的，难道是执行delete语句后数据被删除了，则返回空了？那之前我执行删除一条数据为啥返回1呢？没道理呀。。。。我们继续深入分析，原来是自己上层调用的方法已经将数据删除了，所以再次执行执行delete语句返回0，对自己的用法充满无奈。。。。。。。。。。。。。。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>executeUpdate 方法返回的是被更新条数，如果是删除语句则是被删除的条数</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在项目中出现了一个问题，delete 语句使用executeUpdate方法后，如果是更新一条数则返回1，但是更新一条以上数据就出现返回0的问题，我一直以为executeUpdate返回更新的条数是错误的？带着疑问我们查看源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">\tpublic int update(final String sql) throws DataAccessException &#123;</span><br><span class=\"line\">\t\tAssert.notNull(sql, &quot;SQL must not be null&quot;);</span><br><span class=\"line\">\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(&quot;Executing SQL update [&quot; + sql + &quot;]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclass UpdateStatementCallback implements StatementCallback&lt;Integer&gt;, SqlProvider &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Integer doInStatement(Statement stmt) throws SQLException &#123;</span><br><span class=\"line\">\t\t\t\tint rows = stmt.executeUpdate(sql);</span><br><span class=\"line\">\t\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(&quot;SQL update affected &quot; + rows + &quot; rows&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\treturn rows;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic String getSql() &#123;</span><br><span class=\"line\">\t\t\t\treturn sql;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn execute(new UpdateStatementCallback());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从源码上看，update方法返回的就是 stmt.executeUpdate(sql) 方法返回的条数，那么上述更新多条出现0的情况是什么问题？但是执行update语句的话返回的值就是正确的，难道是执行delete语句后数据被删除了，则返回空了？那之前我执行删除一条数据为啥返回1呢？没道理呀。。。。我们继续深入分析，原来是自己上层调用的方法已经将数据删除了，所以再次执行执行delete语句返回0，对自己的用法充满无奈。。。。。。。。。。。。。。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>executeUpdate 方法返回的是被更新条数，如果是删除语句则是被删除的条数</p>\n"},{"title":"双通道存储器技术","date":"2019-02-26T01:52:53.000Z","_content":"&nbsp;&nbsp;&nbsp;&nbsp;听说内存开始降价了，充满好奇心的我就打开京东看了一下内存条的价格，本来只想买一条的我，下单前看到一个套装两条内存居然比单条的价格贵了这么多，带着好奇询问了商家，商家的解释是这样的：\n* 内存条套装不是促销方式，而是2条（双通道）、3条（三通道）或者4条（四通道）品牌、参数完全相同的（同一生产线、同一批次的产品）内存成套销售，兼容性是最出色的。而单条内存，在组建通道的时候，具有随意性，可能品牌、参数都有差异，兼容性当然没有套装好。\n带着这个解释去了解双通道存储器技术\n# 1. 什么是双通道存储器技术\n维基百科给出的解释是：双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术，此种技术将多个存储器由串联方式改良为并联方式，以得到更大的带宽。最早使用此技术的记忆体是Rambus。\n# 2. 为啥使用双通道存储器技术？\n主要是cpu随着技术发展，对内存要求越来越高，单通道技术已经不能满足cpu的要求。比如cpu 等待时间，数据传输，处理等要求。\n# 3. 双通道存储器技术的优点？相比单通道技术\n* 使用单通道技术时，主板上多条存储器是以串联方式运作，也就是仅是当作一条存储器运作，只是容量会相加。存储器总线宽度为64-bit，无论安装几条存储器，带宽都固定为64-bit。\n* 双通道便是利用并联方式运作，当连接两条存储器时，总线宽度将会达到128-bit，而套上存储器宽度计算便会知道相差甚远。也就是开双通道后，带宽可以增至两倍，性能也会增加；至于能否提升至两倍速度，根据测试似乎是没办法，但是对于存储器性能的提升却是很大的帮助。\n理论上，双通道能提升存储器两倍的性能；对系统整体性能来说，打开双通道带来的性能提升约为2至3%，最好的情况是提升约5%。一直到现在，双通道对整个系统的影响最高只有多5%的性能而已。在实际使用上，若非长时间的极大数据运算或透过软件测试获取测试数据，对于用户的操作上并没有太大的差异\n如果是纯粹的CPU运算，使用双通道近乎没有性能增长。但对于高端游戏玩家或是绘图需求较大的用户而言，双通道技术不吝为一大帮助，因为GPU要经常访问纹理贴图数据，需要很大的存储器带宽。所以在使用双通道时，双倍的带宽可使内置绘图核心(GPU)的性能增长近一倍。\n\n参考文档：\n[双通道存储器技](https://zh.wikipedia.org/wiki/%E9%9B%99%E9%80%9A%E9%81%93%E8%A8%98%E6%86%B6%E9%AB%94%E6%8A%80%E8%A1%93)","source":"_posts/双通道存储器技术.md","raw":"---\ntitle: 双通道存储器技术\ndate: 2019-02-26 09:52:53\ntags:\n- 硬件\n- 内存\n---\n&nbsp;&nbsp;&nbsp;&nbsp;听说内存开始降价了，充满好奇心的我就打开京东看了一下内存条的价格，本来只想买一条的我，下单前看到一个套装两条内存居然比单条的价格贵了这么多，带着好奇询问了商家，商家的解释是这样的：\n* 内存条套装不是促销方式，而是2条（双通道）、3条（三通道）或者4条（四通道）品牌、参数完全相同的（同一生产线、同一批次的产品）内存成套销售，兼容性是最出色的。而单条内存，在组建通道的时候，具有随意性，可能品牌、参数都有差异，兼容性当然没有套装好。\n带着这个解释去了解双通道存储器技术\n# 1. 什么是双通道存储器技术\n维基百科给出的解释是：双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术，此种技术将多个存储器由串联方式改良为并联方式，以得到更大的带宽。最早使用此技术的记忆体是Rambus。\n# 2. 为啥使用双通道存储器技术？\n主要是cpu随着技术发展，对内存要求越来越高，单通道技术已经不能满足cpu的要求。比如cpu 等待时间，数据传输，处理等要求。\n# 3. 双通道存储器技术的优点？相比单通道技术\n* 使用单通道技术时，主板上多条存储器是以串联方式运作，也就是仅是当作一条存储器运作，只是容量会相加。存储器总线宽度为64-bit，无论安装几条存储器，带宽都固定为64-bit。\n* 双通道便是利用并联方式运作，当连接两条存储器时，总线宽度将会达到128-bit，而套上存储器宽度计算便会知道相差甚远。也就是开双通道后，带宽可以增至两倍，性能也会增加；至于能否提升至两倍速度，根据测试似乎是没办法，但是对于存储器性能的提升却是很大的帮助。\n理论上，双通道能提升存储器两倍的性能；对系统整体性能来说，打开双通道带来的性能提升约为2至3%，最好的情况是提升约5%。一直到现在，双通道对整个系统的影响最高只有多5%的性能而已。在实际使用上，若非长时间的极大数据运算或透过软件测试获取测试数据，对于用户的操作上并没有太大的差异\n如果是纯粹的CPU运算，使用双通道近乎没有性能增长。但对于高端游戏玩家或是绘图需求较大的用户而言，双通道技术不吝为一大帮助，因为GPU要经常访问纹理贴图数据，需要很大的存储器带宽。所以在使用双通道时，双倍的带宽可使内置绘图核心(GPU)的性能增长近一倍。\n\n参考文档：\n[双通道存储器技](https://zh.wikipedia.org/wiki/%E9%9B%99%E9%80%9A%E9%81%93%E8%A8%98%E6%86%B6%E9%AB%94%E6%8A%80%E8%A1%93)","slug":"双通道存储器技术","published":1,"updated":"2019-02-26T03:45:54.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmex001738ud9w6p69hq","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;听说内存开始降价了，充满好奇心的我就打开京东看了一下内存条的价格，本来只想买一条的我，下单前看到一个套装两条内存居然比单条的价格贵了这么多，带着好奇询问了商家，商家的解释是这样的：</p>\n<ul>\n<li>内存条套装不是促销方式，而是2条（双通道）、3条（三通道）或者4条（四通道）品牌、参数完全相同的（同一生产线、同一批次的产品）内存成套销售，兼容性是最出色的。而单条内存，在组建通道的时候，具有随意性，可能品牌、参数都有差异，兼容性当然没有套装好。<br>带着这个解释去了解双通道存储器技术<h1 id=\"1-什么是双通道存储器技术\"><a href=\"#1-什么是双通道存储器技术\" class=\"headerlink\" title=\"1. 什么是双通道存储器技术\"></a>1. 什么是双通道存储器技术</h1>维基百科给出的解释是：双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术，此种技术将多个存储器由串联方式改良为并联方式，以得到更大的带宽。最早使用此技术的记忆体是Rambus。<h1 id=\"2-为啥使用双通道存储器技术？\"><a href=\"#2-为啥使用双通道存储器技术？\" class=\"headerlink\" title=\"2. 为啥使用双通道存储器技术？\"></a>2. 为啥使用双通道存储器技术？</h1>主要是cpu随着技术发展，对内存要求越来越高，单通道技术已经不能满足cpu的要求。比如cpu 等待时间，数据传输，处理等要求。<h1 id=\"3-双通道存储器技术的优点？相比单通道技术\"><a href=\"#3-双通道存储器技术的优点？相比单通道技术\" class=\"headerlink\" title=\"3. 双通道存储器技术的优点？相比单通道技术\"></a>3. 双通道存储器技术的优点？相比单通道技术</h1></li>\n<li>使用单通道技术时，主板上多条存储器是以串联方式运作，也就是仅是当作一条存储器运作，只是容量会相加。存储器总线宽度为64-bit，无论安装几条存储器，带宽都固定为64-bit。</li>\n<li>双通道便是利用并联方式运作，当连接两条存储器时，总线宽度将会达到128-bit，而套上存储器宽度计算便会知道相差甚远。也就是开双通道后，带宽可以增至两倍，性能也会增加；至于能否提升至两倍速度，根据测试似乎是没办法，但是对于存储器性能的提升却是很大的帮助。<br>理论上，双通道能提升存储器两倍的性能；对系统整体性能来说，打开双通道带来的性能提升约为2至3%，最好的情况是提升约5%。一直到现在，双通道对整个系统的影响最高只有多5%的性能而已。在实际使用上，若非长时间的极大数据运算或透过软件测试获取测试数据，对于用户的操作上并没有太大的差异<br>如果是纯粹的CPU运算，使用双通道近乎没有性能增长。但对于高端游戏玩家或是绘图需求较大的用户而言，双通道技术不吝为一大帮助，因为GPU要经常访问纹理贴图数据，需要很大的存储器带宽。所以在使用双通道时，双倍的带宽可使内置绘图核心(GPU)的性能增长近一倍。</li>\n</ul>\n<p>参考文档：<br><a href=\"https://zh.wikipedia.org/wiki/%E9%9B%99%E9%80%9A%E9%81%93%E8%A8%98%E6%86%B6%E9%AB%94%E6%8A%80%E8%A1%93\" target=\"_blank\" rel=\"noopener\">双通道存储器技</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;听说内存开始降价了，充满好奇心的我就打开京东看了一下内存条的价格，本来只想买一条的我，下单前看到一个套装两条内存居然比单条的价格贵了这么多，带着好奇询问了商家，商家的解释是这样的：</p>\n<ul>\n<li>内存条套装不是促销方式，而是2条（双通道）、3条（三通道）或者4条（四通道）品牌、参数完全相同的（同一生产线、同一批次的产品）内存成套销售，兼容性是最出色的。而单条内存，在组建通道的时候，具有随意性，可能品牌、参数都有差异，兼容性当然没有套装好。<br>带着这个解释去了解双通道存储器技术<h1 id=\"1-什么是双通道存储器技术\"><a href=\"#1-什么是双通道存储器技术\" class=\"headerlink\" title=\"1. 什么是双通道存储器技术\"></a>1. 什么是双通道存储器技术</h1>维基百科给出的解释是：双通道（英语：Dual-channel）是一种能够让计算机性能增加的技术，此种技术将多个存储器由串联方式改良为并联方式，以得到更大的带宽。最早使用此技术的记忆体是Rambus。<h1 id=\"2-为啥使用双通道存储器技术？\"><a href=\"#2-为啥使用双通道存储器技术？\" class=\"headerlink\" title=\"2. 为啥使用双通道存储器技术？\"></a>2. 为啥使用双通道存储器技术？</h1>主要是cpu随着技术发展，对内存要求越来越高，单通道技术已经不能满足cpu的要求。比如cpu 等待时间，数据传输，处理等要求。<h1 id=\"3-双通道存储器技术的优点？相比单通道技术\"><a href=\"#3-双通道存储器技术的优点？相比单通道技术\" class=\"headerlink\" title=\"3. 双通道存储器技术的优点？相比单通道技术\"></a>3. 双通道存储器技术的优点？相比单通道技术</h1></li>\n<li>使用单通道技术时，主板上多条存储器是以串联方式运作，也就是仅是当作一条存储器运作，只是容量会相加。存储器总线宽度为64-bit，无论安装几条存储器，带宽都固定为64-bit。</li>\n<li>双通道便是利用并联方式运作，当连接两条存储器时，总线宽度将会达到128-bit，而套上存储器宽度计算便会知道相差甚远。也就是开双通道后，带宽可以增至两倍，性能也会增加；至于能否提升至两倍速度，根据测试似乎是没办法，但是对于存储器性能的提升却是很大的帮助。<br>理论上，双通道能提升存储器两倍的性能；对系统整体性能来说，打开双通道带来的性能提升约为2至3%，最好的情况是提升约5%。一直到现在，双通道对整个系统的影响最高只有多5%的性能而已。在实际使用上，若非长时间的极大数据运算或透过软件测试获取测试数据，对于用户的操作上并没有太大的差异<br>如果是纯粹的CPU运算，使用双通道近乎没有性能增长。但对于高端游戏玩家或是绘图需求较大的用户而言，双通道技术不吝为一大帮助，因为GPU要经常访问纹理贴图数据，需要很大的存储器带宽。所以在使用双通道时，双倍的带宽可使内置绘图核心(GPU)的性能增长近一倍。</li>\n</ul>\n<p>参考文档：<br><a href=\"https://zh.wikipedia.org/wiki/%E9%9B%99%E9%80%9A%E9%81%93%E8%A8%98%E6%86%B6%E9%AB%94%E6%8A%80%E8%A1%93\" target=\"_blank\" rel=\"noopener\">双通道存储器技</a></p>\n"},{"title":"如何使用flatMap","date":"2019-03-15T01:52:57.000Z","_content":"\n# 1. 什么情况下用到flatMap\n* 当使用map（）操作时，不是返回一个值，而是返回一个集合或者一个数组的时候，这时候就可以使用flatMap解决这个问题。举个例子，你有一个列表 [21,23,42]，然后你调用getPrimeFactors()方法map操作 使数组转化成stream。\n* 上述结果[[3,7],[23],[2,3,7]]，这个类型Stream<String[]> 使用 stream 操作（filter，sum，distinct ...）和 collectors 都不支持这种类型。如果你想把Stream of Stream转换为值列表，使用 flatMap() 方法 重新生成一个Stream对象，最后可以得到 [3,7,2,3,2,3,7]\n# 2. flatMap如何工作的\n通过下面的图，我们就很容易理解flatmap在java8 中是如何工作的\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190304131022877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n使用红色标记的列表和绿色标记的列表，经过flatmap方法后在第二个管道中把把上述两个列表的数据合并成一个列表数据\n# 3. flatmap 使用例子\n```\n\t\tList<List<Integer>> lists = new ArrayList<>();\n        List<Integer> list = new ArrayList<>();\n        list.add(4444);\n        list.add(33333);\n        list.add(444444);\n        lists.add(list);\n        lists.stream().flatMap(Collection::stream).forEach(System.out::println);\n```\n由于上述 lists.stream() 后返回的是stream<list<Integer>> 所以需要使用flatMap 进行合并\n# 3. 总结\n本文主要通过为啥使用 flatmap，如何使用flatmap 这两点讲述了flatmap方法，下一章节我们来讲一个map & flatmap。\n\n参考文档\n[How to use flatMap() in Java 8](http://www.java67.com/2016/03/how-to-use-flatmap-in-java-8-stream.html)\n[Java 8 flatMap示例](https://www.mkyong.com/java8/java-8-flatmap-example/)\n\n","source":"_posts/如何使用flatMap.md","raw":"---\ntitle: 如何使用flatMap\ndate: 2019-03-15 09:52:57\ntags:\n- JAVA 8\n---\n\n# 1. 什么情况下用到flatMap\n* 当使用map（）操作时，不是返回一个值，而是返回一个集合或者一个数组的时候，这时候就可以使用flatMap解决这个问题。举个例子，你有一个列表 [21,23,42]，然后你调用getPrimeFactors()方法map操作 使数组转化成stream。\n* 上述结果[[3,7],[23],[2,3,7]]，这个类型Stream<String[]> 使用 stream 操作（filter，sum，distinct ...）和 collectors 都不支持这种类型。如果你想把Stream of Stream转换为值列表，使用 flatMap() 方法 重新生成一个Stream对象，最后可以得到 [3,7,2,3,2,3,7]\n# 2. flatMap如何工作的\n通过下面的图，我们就很容易理解flatmap在java8 中是如何工作的\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190304131022877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70)\n使用红色标记的列表和绿色标记的列表，经过flatmap方法后在第二个管道中把把上述两个列表的数据合并成一个列表数据\n# 3. flatmap 使用例子\n```\n\t\tList<List<Integer>> lists = new ArrayList<>();\n        List<Integer> list = new ArrayList<>();\n        list.add(4444);\n        list.add(33333);\n        list.add(444444);\n        lists.add(list);\n        lists.stream().flatMap(Collection::stream).forEach(System.out::println);\n```\n由于上述 lists.stream() 后返回的是stream<list<Integer>> 所以需要使用flatMap 进行合并\n# 3. 总结\n本文主要通过为啥使用 flatmap，如何使用flatmap 这两点讲述了flatmap方法，下一章节我们来讲一个map & flatmap。\n\n参考文档\n[How to use flatMap() in Java 8](http://www.java67.com/2016/03/how-to-use-flatmap-in-java-8-stream.html)\n[Java 8 flatMap示例](https://www.mkyong.com/java8/java-8-flatmap-example/)\n\n","slug":"如何使用flatMap","published":1,"updated":"2019-03-15T01:53:26.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmf1001938udjites4xq","content":"<h1 id=\"1-什么情况下用到flatMap\"><a href=\"#1-什么情况下用到flatMap\" class=\"headerlink\" title=\"1. 什么情况下用到flatMap\"></a>1. 什么情况下用到flatMap</h1><ul>\n<li>当使用map（）操作时，不是返回一个值，而是返回一个集合或者一个数组的时候，这时候就可以使用flatMap解决这个问题。举个例子，你有一个列表 [21,23,42]，然后你调用getPrimeFactors()方法map操作 使数组转化成stream。</li>\n<li>上述结果[[3,7],[23],[2,3,7]]，这个类型Stream&lt;String[]&gt; 使用 stream 操作（filter，sum，distinct …）和 collectors 都不支持这种类型。如果你想把Stream of Stream转换为值列表，使用 flatMap() 方法 重新生成一个Stream对象，最后可以得到 [3,7,2,3,2,3,7]<h1 id=\"2-flatMap如何工作的\"><a href=\"#2-flatMap如何工作的\" class=\"headerlink\" title=\"2. flatMap如何工作的\"></a>2. flatMap如何工作的</h1>通过下面的图，我们就很容易理解flatmap在java8 中是如何工作的<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190304131022877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n使用红色标记的列表和绿色标记的列表，经过flatmap方法后在第二个管道中把把上述两个列表的数据合并成一个列表数据<h1 id=\"3-flatmap-使用例子\"><a href=\"#3-flatmap-使用例子\" class=\"headerlink\" title=\"3. flatmap 使用例子\"></a>3. flatmap 使用例子</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; lists = new ArrayList&lt;&gt;();</span><br><span class=\"line\">      List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">      list.add(4444);</span><br><span class=\"line\">      list.add(33333);</span><br><span class=\"line\">      list.add(444444);</span><br><span class=\"line\">      lists.add(list);</span><br><span class=\"line\">      lists.stream().flatMap(Collection::stream).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>由于上述 lists.stream() 后返回的是stream&lt;list<integer>&gt; 所以需要使用flatMap 进行合并</integer></p>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>本文主要通过为啥使用 flatmap，如何使用flatmap 这两点讲述了flatmap方法，下一章节我们来讲一个map &amp; flatmap。</p>\n<p>参考文档<br><a href=\"http://www.java67.com/2016/03/how-to-use-flatmap-in-java-8-stream.html\" target=\"_blank\" rel=\"noopener\">How to use flatMap() in Java 8</a><br><a href=\"https://www.mkyong.com/java8/java-8-flatmap-example/\" target=\"_blank\" rel=\"noopener\">Java 8 flatMap示例</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-什么情况下用到flatMap\"><a href=\"#1-什么情况下用到flatMap\" class=\"headerlink\" title=\"1. 什么情况下用到flatMap\"></a>1. 什么情况下用到flatMap</h1><ul>\n<li>当使用map（）操作时，不是返回一个值，而是返回一个集合或者一个数组的时候，这时候就可以使用flatMap解决这个问题。举个例子，你有一个列表 [21,23,42]，然后你调用getPrimeFactors()方法map操作 使数组转化成stream。</li>\n<li>上述结果[[3,7],[23],[2,3,7]]，这个类型Stream&lt;String[]&gt; 使用 stream 操作（filter，sum，distinct …）和 collectors 都不支持这种类型。如果你想把Stream of Stream转换为值列表，使用 flatMap() 方法 重新生成一个Stream对象，最后可以得到 [3,7,2,3,2,3,7]<h1 id=\"2-flatMap如何工作的\"><a href=\"#2-flatMap如何工作的\" class=\"headerlink\" title=\"2. flatMap如何工作的\"></a>2. flatMap如何工作的</h1>通过下面的图，我们就很容易理解flatmap在java8 中是如何工作的<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190304131022877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0MTg0OTk3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure>\n使用红色标记的列表和绿色标记的列表，经过flatmap方法后在第二个管道中把把上述两个列表的数据合并成一个列表数据<h1 id=\"3-flatmap-使用例子\"><a href=\"#3-flatmap-使用例子\" class=\"headerlink\" title=\"3. flatmap 使用例子\"></a>3. flatmap 使用例子</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; lists = new ArrayList&lt;&gt;();</span><br><span class=\"line\">      List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">      list.add(4444);</span><br><span class=\"line\">      list.add(33333);</span><br><span class=\"line\">      list.add(444444);</span><br><span class=\"line\">      lists.add(list);</span><br><span class=\"line\">      lists.stream().flatMap(Collection::stream).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>由于上述 lists.stream() 后返回的是stream&lt;list<integer>&gt; 所以需要使用flatMap 进行合并</integer></p>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>本文主要通过为啥使用 flatmap，如何使用flatmap 这两点讲述了flatmap方法，下一章节我们来讲一个map &amp; flatmap。</p>\n<p>参考文档<br><a href=\"http://www.java67.com/2016/03/how-to-use-flatmap-in-java-8-stream.html\" target=\"_blank\" rel=\"noopener\">How to use flatMap() in Java 8</a><br><a href=\"https://www.mkyong.com/java8/java-8-flatmap-example/\" target=\"_blank\" rel=\"noopener\">Java 8 flatMap示例</a></p>\n"},{"title":"理解 linux cpu 负载","date":"2019-03-15T01:55:24.000Z","_content":"# 1. 如何查看cpu负载？通过什么命令\n当你的电脑运行缓慢，操作起来很卡的时候，这时你应该查看一下你的cpu是不是处于负载状态下。下面我们通过命令 top 或 uptime 查看平均负载，如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228111519685.png)\n三个参数分别表示 一分钟，5分钟，15分钟 占的cpu比例，越低表示cpu处于比较空闲的阶段，但是越大则会出现cpu过载的问题。\n# 2. 了解负载参数的意义？\n在单个cpu下，由于只有一个cpu，所以所有操作都经过它来完成，我们举个例子来形象的阐述这个过程：\n我们把cpu比作一条桥，操作进程比作车。因为只有一个cpu，所以车辆都必须从这个车道通过，\n\n系统负载为0的时候，表示没有车经过\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228112537306.png)\n负载为0.5的时候，表示大桥有一半的路段有车辆\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228112700968.png)\n负载为1.0，意味着大桥的所有路段都有车，也就是说大桥已经\"满\"了。但是必须注意的是，直到此时大桥还是能顺畅通行的。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228112715668.png)\n负载大于1，就表示大桥已经处于拥挤状态，后面的车必须处于等待中，等前面的车辆通过大桥后，后面排队的车辆才能依次通过。\n\n通过桥和车辆的例子，我们能很好的理解，如果你想车辆或者你的进程不需要等待，你就需要让你的cpu 负载 低于 1。当大于或等于 1的时候你就需要考虑如何降低负载。\n\n# 3. 多个cpu或者多核cpu 负载值的变化？\n上述我们讲的都是单cpu或者单核cpu的情况，那么多核或者多个cpu的情况下，负载是怎么变化的呢？\n 我们继续用之前桥的例子，单个cpu表示桥上只有一条道，那多个/多核 cpu 表示 桥上有多条道，这样桥上的整体容量是不是增加了n倍？\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228114606538.png)\n所以，2个CPU表明系统负荷可以达到2.0，此时每个CPU都达到100%的工作量。推广开来，n个CPU的电脑，可接受的系统负荷最大为n.0。\n\n# 4. 观察cpu负载每个时间的变化情况，判断运行状态？\n通过 top 命令显示了 \"load average\" 的三个平均值分别是1分钟、5分钟，15分钟的系统负载，那么问题来了，我们应该参考一分钟，五分钟，还是十五分钟？\n如果只有1分钟的系统负荷大于1.0，其他两个时间段都小于1.0，这表明只是暂时现象，问题不大。\n如果15分钟内，平均系统负荷大于1.0（调整CPU核心数之后），表明问题持续存在，不是暂时现象。所以，你应该主要观察\"15分钟系统负荷\"，将它作为电脑正常运行的指标。\n\n# 5. 查看系统的cpu核数\n通过 cat /proc/cpuinfo 能获取系统中每个处理器的信息，如果你想知道cpu核心数量，通过 grep -c 'model name' /proc/cpuinfo\n\n参考文档：\n[理解Linux系统负荷](http://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html)\n[Understanding Linux CPU Load](https://scoutapp.com/blog/understanding-load-averages)\n\n","source":"_posts/理解-linux-cpu-负载.md","raw":"---\ntitle: 理解 linux cpu 负载\ndate: 2019-03-15 09:55:24\ntags:\n- linux\n---\n# 1. 如何查看cpu负载？通过什么命令\n当你的电脑运行缓慢，操作起来很卡的时候，这时你应该查看一下你的cpu是不是处于负载状态下。下面我们通过命令 top 或 uptime 查看平均负载，如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228111519685.png)\n三个参数分别表示 一分钟，5分钟，15分钟 占的cpu比例，越低表示cpu处于比较空闲的阶段，但是越大则会出现cpu过载的问题。\n# 2. 了解负载参数的意义？\n在单个cpu下，由于只有一个cpu，所以所有操作都经过它来完成，我们举个例子来形象的阐述这个过程：\n我们把cpu比作一条桥，操作进程比作车。因为只有一个cpu，所以车辆都必须从这个车道通过，\n\n系统负载为0的时候，表示没有车经过\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228112537306.png)\n负载为0.5的时候，表示大桥有一半的路段有车辆\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228112700968.png)\n负载为1.0，意味着大桥的所有路段都有车，也就是说大桥已经\"满\"了。但是必须注意的是，直到此时大桥还是能顺畅通行的。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228112715668.png)\n负载大于1，就表示大桥已经处于拥挤状态，后面的车必须处于等待中，等前面的车辆通过大桥后，后面排队的车辆才能依次通过。\n\n通过桥和车辆的例子，我们能很好的理解，如果你想车辆或者你的进程不需要等待，你就需要让你的cpu 负载 低于 1。当大于或等于 1的时候你就需要考虑如何降低负载。\n\n# 3. 多个cpu或者多核cpu 负载值的变化？\n上述我们讲的都是单cpu或者单核cpu的情况，那么多核或者多个cpu的情况下，负载是怎么变化的呢？\n 我们继续用之前桥的例子，单个cpu表示桥上只有一条道，那多个/多核 cpu 表示 桥上有多条道，这样桥上的整体容量是不是增加了n倍？\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190228114606538.png)\n所以，2个CPU表明系统负荷可以达到2.0，此时每个CPU都达到100%的工作量。推广开来，n个CPU的电脑，可接受的系统负荷最大为n.0。\n\n# 4. 观察cpu负载每个时间的变化情况，判断运行状态？\n通过 top 命令显示了 \"load average\" 的三个平均值分别是1分钟、5分钟，15分钟的系统负载，那么问题来了，我们应该参考一分钟，五分钟，还是十五分钟？\n如果只有1分钟的系统负荷大于1.0，其他两个时间段都小于1.0，这表明只是暂时现象，问题不大。\n如果15分钟内，平均系统负荷大于1.0（调整CPU核心数之后），表明问题持续存在，不是暂时现象。所以，你应该主要观察\"15分钟系统负荷\"，将它作为电脑正常运行的指标。\n\n# 5. 查看系统的cpu核数\n通过 cat /proc/cpuinfo 能获取系统中每个处理器的信息，如果你想知道cpu核心数量，通过 grep -c 'model name' /proc/cpuinfo\n\n参考文档：\n[理解Linux系统负荷](http://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html)\n[Understanding Linux CPU Load](https://scoutapp.com/blog/understanding-load-averages)\n\n","slug":"理解-linux-cpu-负载","published":1,"updated":"2019-03-15T01:55:42.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ezmf4001b38ud2wls8r8w","content":"<h1 id=\"1-如何查看cpu负载？通过什么命令\"><a href=\"#1-如何查看cpu负载？通过什么命令\" class=\"headerlink\" title=\"1. 如何查看cpu负载？通过什么命令\"></a>1. 如何查看cpu负载？通过什么命令</h1><p>当你的电脑运行缓慢，操作起来很卡的时候，这时你应该查看一下你的cpu是不是处于负载状态下。下面我们通过命令 top 或 uptime 查看平均负载，如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228111519685.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>三个参数分别表示 一分钟，5分钟，15分钟 占的cpu比例，越低表示cpu处于比较空闲的阶段，但是越大则会出现cpu过载的问题。</p>\n<h1 id=\"2-了解负载参数的意义？\"><a href=\"#2-了解负载参数的意义？\" class=\"headerlink\" title=\"2. 了解负载参数的意义？\"></a>2. 了解负载参数的意义？</h1><p>在单个cpu下，由于只有一个cpu，所以所有操作都经过它来完成，我们举个例子来形象的阐述这个过程：<br>我们把cpu比作一条桥，操作进程比作车。因为只有一个cpu，所以车辆都必须从这个车道通过，</p>\n<p>系统负载为0的时候，表示没有车经过<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228112537306.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>负载为0.5的时候，表示大桥有一半的路段有车辆<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228112700968.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>负载为1.0，意味着大桥的所有路段都有车，也就是说大桥已经”满”了。但是必须注意的是，直到此时大桥还是能顺畅通行的。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228112715668.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>负载大于1，就表示大桥已经处于拥挤状态，后面的车必须处于等待中，等前面的车辆通过大桥后，后面排队的车辆才能依次通过。</p>\n<p>通过桥和车辆的例子，我们能很好的理解，如果你想车辆或者你的进程不需要等待，你就需要让你的cpu 负载 低于 1。当大于或等于 1的时候你就需要考虑如何降低负载。</p>\n<h1 id=\"3-多个cpu或者多核cpu-负载值的变化？\"><a href=\"#3-多个cpu或者多核cpu-负载值的变化？\" class=\"headerlink\" title=\"3. 多个cpu或者多核cpu 负载值的变化？\"></a>3. 多个cpu或者多核cpu 负载值的变化？</h1><p>上述我们讲的都是单cpu或者单核cpu的情况，那么多核或者多个cpu的情况下，负载是怎么变化的呢？<br> 我们继续用之前桥的例子，单个cpu表示桥上只有一条道，那多个/多核 cpu 表示 桥上有多条道，这样桥上的整体容量是不是增加了n倍？<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228114606538.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>所以，2个CPU表明系统负荷可以达到2.0，此时每个CPU都达到100%的工作量。推广开来，n个CPU的电脑，可接受的系统负荷最大为n.0。</p>\n<h1 id=\"4-观察cpu负载每个时间的变化情况，判断运行状态？\"><a href=\"#4-观察cpu负载每个时间的变化情况，判断运行状态？\" class=\"headerlink\" title=\"4. 观察cpu负载每个时间的变化情况，判断运行状态？\"></a>4. 观察cpu负载每个时间的变化情况，判断运行状态？</h1><p>通过 top 命令显示了 “load average” 的三个平均值分别是1分钟、5分钟，15分钟的系统负载，那么问题来了，我们应该参考一分钟，五分钟，还是十五分钟？<br>如果只有1分钟的系统负荷大于1.0，其他两个时间段都小于1.0，这表明只是暂时现象，问题不大。<br>如果15分钟内，平均系统负荷大于1.0（调整CPU核心数之后），表明问题持续存在，不是暂时现象。所以，你应该主要观察”15分钟系统负荷”，将它作为电脑正常运行的指标。</p>\n<h1 id=\"5-查看系统的cpu核数\"><a href=\"#5-查看系统的cpu核数\" class=\"headerlink\" title=\"5. 查看系统的cpu核数\"></a>5. 查看系统的cpu核数</h1><p>通过 cat /proc/cpuinfo 能获取系统中每个处理器的信息，如果你想知道cpu核心数量，通过 grep -c ‘model name’ /proc/cpuinfo</p>\n<p>参考文档：<br><a href=\"http://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html\" target=\"_blank\" rel=\"noopener\">理解Linux系统负荷</a><br><a href=\"https://scoutapp.com/blog/understanding-load-averages\" target=\"_blank\" rel=\"noopener\">Understanding Linux CPU Load</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-如何查看cpu负载？通过什么命令\"><a href=\"#1-如何查看cpu负载？通过什么命令\" class=\"headerlink\" title=\"1. 如何查看cpu负载？通过什么命令\"></a>1. 如何查看cpu负载？通过什么命令</h1><p>当你的电脑运行缓慢，操作起来很卡的时候，这时你应该查看一下你的cpu是不是处于负载状态下。下面我们通过命令 top 或 uptime 查看平均负载，如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228111519685.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>三个参数分别表示 一分钟，5分钟，15分钟 占的cpu比例，越低表示cpu处于比较空闲的阶段，但是越大则会出现cpu过载的问题。</p>\n<h1 id=\"2-了解负载参数的意义？\"><a href=\"#2-了解负载参数的意义？\" class=\"headerlink\" title=\"2. 了解负载参数的意义？\"></a>2. 了解负载参数的意义？</h1><p>在单个cpu下，由于只有一个cpu，所以所有操作都经过它来完成，我们举个例子来形象的阐述这个过程：<br>我们把cpu比作一条桥，操作进程比作车。因为只有一个cpu，所以车辆都必须从这个车道通过，</p>\n<p>系统负载为0的时候，表示没有车经过<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228112537306.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>负载为0.5的时候，表示大桥有一半的路段有车辆<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228112700968.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>负载为1.0，意味着大桥的所有路段都有车，也就是说大桥已经”满”了。但是必须注意的是，直到此时大桥还是能顺畅通行的。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228112715668.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>负载大于1，就表示大桥已经处于拥挤状态，后面的车必须处于等待中，等前面的车辆通过大桥后，后面排队的车辆才能依次通过。</p>\n<p>通过桥和车辆的例子，我们能很好的理解，如果你想车辆或者你的进程不需要等待，你就需要让你的cpu 负载 低于 1。当大于或等于 1的时候你就需要考虑如何降低负载。</p>\n<h1 id=\"3-多个cpu或者多核cpu-负载值的变化？\"><a href=\"#3-多个cpu或者多核cpu-负载值的变化？\" class=\"headerlink\" title=\"3. 多个cpu或者多核cpu 负载值的变化？\"></a>3. 多个cpu或者多核cpu 负载值的变化？</h1><p>上述我们讲的都是单cpu或者单核cpu的情况，那么多核或者多个cpu的情况下，负载是怎么变化的呢？<br> 我们继续用之前桥的例子，单个cpu表示桥上只有一条道，那多个/多核 cpu 表示 桥上有多条道，这样桥上的整体容量是不是增加了n倍？<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190228114606538.png\" alt=\"在这里插入图片描述\" title=\"\">\n                </div>\n                <div class=\"image-caption\">在这里插入图片描述</div>\n            </figure><br>所以，2个CPU表明系统负荷可以达到2.0，此时每个CPU都达到100%的工作量。推广开来，n个CPU的电脑，可接受的系统负荷最大为n.0。</p>\n<h1 id=\"4-观察cpu负载每个时间的变化情况，判断运行状态？\"><a href=\"#4-观察cpu负载每个时间的变化情况，判断运行状态？\" class=\"headerlink\" title=\"4. 观察cpu负载每个时间的变化情况，判断运行状态？\"></a>4. 观察cpu负载每个时间的变化情况，判断运行状态？</h1><p>通过 top 命令显示了 “load average” 的三个平均值分别是1分钟、5分钟，15分钟的系统负载，那么问题来了，我们应该参考一分钟，五分钟，还是十五分钟？<br>如果只有1分钟的系统负荷大于1.0，其他两个时间段都小于1.0，这表明只是暂时现象，问题不大。<br>如果15分钟内，平均系统负荷大于1.0（调整CPU核心数之后），表明问题持续存在，不是暂时现象。所以，你应该主要观察”15分钟系统负荷”，将它作为电脑正常运行的指标。</p>\n<h1 id=\"5-查看系统的cpu核数\"><a href=\"#5-查看系统的cpu核数\" class=\"headerlink\" title=\"5. 查看系统的cpu核数\"></a>5. 查看系统的cpu核数</h1><p>通过 cat /proc/cpuinfo 能获取系统中每个处理器的信息，如果你想知道cpu核心数量，通过 grep -c ‘model name’ /proc/cpuinfo</p>\n<p>参考文档：<br><a href=\"http://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html\" target=\"_blank\" rel=\"noopener\">理解Linux系统负荷</a><br><a href=\"https://scoutapp.com/blog/understanding-load-averages\" target=\"_blank\" rel=\"noopener\">Understanding Linux CPU Load</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/JAVA-8的新特性-1/1550828240.jpg","post":"cjt9ezmcs000238uddbnysmdw","slug":"1550828240.jpg","modified":1,"renderable":1},{"_id":"source/_posts/gitLab-搭建/1550803434.jpg","post":"cjt9ezmdm000f38udno1jd6ge","slug":"1550803434.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ModelAttribute-对象没有无参的构造函数出错详解-1/20180627151839209.png","post":"cjt9ezmdc000a38udxnuumkid","slug":"20180627151839209.png","modified":1,"renderable":1},{"_id":"source/_posts/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105206677.png","post":"cjt9ezmdc000a38udxnuumkid","slug":"20180628105206677.png","modified":1,"renderable":1},{"_id":"source/_posts/ModelAttribute-对象没有无参的构造函数出错详解-1/20180628105954917.png","post":"cjt9ezmdc000a38udxnuumkid","slug":"20180628105954917.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjt9ezmd4000638ud43ymt6zs","tag_id":"cjt9ezmcy000438udbaxvqfog","_id":"cjt9ezmdc000938udtmkf2inu"},{"post_id":"cjt9ezmci000038udntzka9mq","tag_id":"cjt9ezmcy000438udbaxvqfog","_id":"cjt9ezmdf000b38ud98ckmto1"},{"post_id":"cjt9ezmcs000238uddbnysmdw","tag_id":"cjt9ezmcy000438udbaxvqfog","_id":"cjt9ezmdv000i38ud835lnl47"},{"post_id":"cjt9ezmcs000238uddbnysmdw","tag_id":"cjt9ezmdh000d38udvvyvh6vv","_id":"cjt9ezmdz000k38udbjr6537a"},{"post_id":"cjt9ezmd1000538udy533hnuv","tag_id":"cjt9ezmdq000g38udg1addsnc","_id":"cjt9ezmec000q38udxjon66g2"},{"post_id":"cjt9ezmd1000538udy533hnuv","tag_id":"cjt9ezme0000l38ud4m08bcsf","_id":"cjt9ezmee000s38udog62pw1u"},{"post_id":"cjt9ezmdf000c38udddnehgka","tag_id":"cjt9ezme8000o38udqf2clc2z","_id":"cjt9ezmeo000z38udwwwp9mbz"},{"post_id":"cjt9ezmdf000c38udddnehgka","tag_id":"cjt9ezmeg000u38udyfb472kw","_id":"cjt9ezmer001138ud88ncbabf"},{"post_id":"cjt9ezmem000y38udhr9qwe4v","tag_id":"cjt9ezmcy000438udbaxvqfog","_id":"cjt9ezmeu001438udm5k03qys"},{"post_id":"cjt9ezmdi000e38udtiklhckb","tag_id":"cjt9ezmel000x38udmj9yfd1o","_id":"cjt9ezmf0001838ud6ctfude9"},{"post_id":"cjt9ezmdi000e38udtiklhckb","tag_id":"cjt9ezmer001238udgpd6viy2","_id":"cjt9ezmf3001a38udps0wufpj"},{"post_id":"cjt9ezmdm000f38udno1jd6ge","tag_id":"cjt9ezmex001638ud8pkv2oqf","_id":"cjt9ezmf9001f38udoldz8skh"},{"post_id":"cjt9ezmdm000f38udno1jd6ge","tag_id":"cjt9ezmf5001c38udyt3a97u0","_id":"cjt9ezmf9001g38udr691bbef"},{"post_id":"cjt9ezmdm000f38udno1jd6ge","tag_id":"cjt9ezmf7001d38uds31klaxq","_id":"cjt9ezmfa001i38uda7hoemi8"},{"post_id":"cjt9ezmds000h38udf7avps8z","tag_id":"cjt9ezmcy000438udbaxvqfog","_id":"cjt9ezmfb001j38ud4gq6541o"},{"post_id":"cjt9ezmds000h38udf7avps8z","tag_id":"cjt9ezmf8001e38udygvq9a1s","_id":"cjt9ezmfc001l38ud2gv8n1dl"},{"post_id":"cjt9ezmdx000j38udwsf39jar","tag_id":"cjt9ezmf9001h38udis85h926","_id":"cjt9ezmfd001n38udr2p8taxp"},{"post_id":"cjt9ezmdx000j38udwsf39jar","tag_id":"cjt9ezmfb001k38udbunrlhi2","_id":"cjt9ezmfe001o38udym884k32"},{"post_id":"cjt9ezme1000m38uddalnok3u","tag_id":"cjt9ezmfd001m38udenikz8n3","_id":"cjt9ezmff001q38ud4agwyhea"},{"post_id":"cjt9ezme4000n38udtvgaqrrd","tag_id":"cjt9ezmfe001p38ud6i7d2uxd","_id":"cjt9ezmfi001t38udf80qcbj1"},{"post_id":"cjt9ezme4000n38udtvgaqrrd","tag_id":"cjt9ezme8000o38udqf2clc2z","_id":"cjt9ezmfi001u38udysgewjsq"},{"post_id":"cjt9ezmef000t38udv29kakvw","tag_id":"cjt9ezmfh001s38udgmga542x","_id":"cjt9ezmfk001w38udq1av3m8f"},{"post_id":"cjt9ezmep001038ud1gra46oo","tag_id":"cjt9ezmfj001v38udnzn241ub","_id":"cjt9ezmfl001y38udzmmxmrcd"},{"post_id":"cjt9ezmes001338udiffztbe5","tag_id":"cjt9ezmfk001x38uduniin6d1","_id":"cjt9ezmfp002138ud15zqjaf3"},{"post_id":"cjt9ezmes001338udiffztbe5","tag_id":"cjt9ezmfm001z38udtywljo86","_id":"cjt9ezmfp002238uddxcf39ra"},{"post_id":"cjt9ezmev001538udbk9vr2px","tag_id":"cjt9ezmfh001s38udgmga542x","_id":"cjt9ezmfq002438udac1nzwa4"},{"post_id":"cjt9ezmex001738ud9w6p69hq","tag_id":"cjt9ezmfq002338udl9tm0ojl","_id":"cjt9ezmft002738udreo2ft1e"},{"post_id":"cjt9ezmex001738ud9w6p69hq","tag_id":"cjt9ezmfr002538udr4zf4ail","_id":"cjt9ezmfu002838ud9w9r053j"},{"post_id":"cjt9ezmf1001938udjites4xq","tag_id":"cjt9ezmfs002638udty0gsosn","_id":"cjt9ezmfv002a38udneavgdx4"},{"post_id":"cjt9ezmf4001b38ud2wls8r8w","tag_id":"cjt9ezmf5001c38udyt3a97u0","_id":"cjt9ezmfw002b38ud31nxzafu"}],"Tag":[{"name":"JAVA","_id":"cjt9ezmcy000438udbaxvqfog"},{"name":"Lambda 表达式","_id":"cjt9ezmdh000d38udvvyvh6vv"},{"name":"java","_id":"cjt9ezmdq000g38udg1addsnc"},{"name":"动态代理","_id":"cjt9ezme0000l38ud4m08bcsf"},{"name":"http","_id":"cjt9ezme8000o38udqf2clc2z"},{"name":"网络安全","_id":"cjt9ezmeg000u38udyfb472kw"},{"name":"springMvc","_id":"cjt9ezmel000x38udmj9yfd1o"},{"name":"字符编码","_id":"cjt9ezmer001238udgpd6viy2"},{"name":"github","_id":"cjt9ezmex001638ud8pkv2oqf"},{"name":"linux","_id":"cjt9ezmf5001c38udyt3a97u0"},{"name":"CentOS","_id":"cjt9ezmf7001d38uds31klaxq"},{"name":"反射机制","_id":"cjt9ezmf8001e38udygvq9a1s"},{"name":"JavaScript","_id":"cjt9ezmf9001h38udis85h926"},{"name":"浏览器兼容性","_id":"cjt9ezmfb001k38udbunrlhi2"},{"name":"JVM","_id":"cjt9ezmfd001m38udenikz8n3"},{"name":"markdown","_id":"cjt9ezmfe001p38ud6i7d2uxd"},{"name":"spring","_id":"cjt9ezmfh001s38udgmga542x"},{"name":"HTML","_id":"cjt9ezmfj001v38udnzn241ub"},{"name":"多线程","_id":"cjt9ezmfk001x38uduniin6d1"},{"name":"并发","_id":"cjt9ezmfm001z38udtywljo86"},{"name":"硬件","_id":"cjt9ezmfq002338udl9tm0ojl"},{"name":"内存","_id":"cjt9ezmfr002538udr4zf4ail"},{"name":"JAVA 8","_id":"cjt9ezmfs002638udty0gsosn"}]}}